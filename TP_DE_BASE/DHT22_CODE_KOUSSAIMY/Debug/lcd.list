
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c0c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08006d50  08006d50  00016d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800719c  0800719c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071a4  080071a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071a4  080071a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071a8  080071a8  000171a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080071ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200001dc  08007388  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08007388  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102bb  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002721  00000000  00000000  000304c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00032be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00033a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182b2  00000000  00000000  00034828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117e3  00000000  00000000  0004cada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fd00  00000000  00000000  0005e2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edfbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004db8  00000000  00000000  000ee010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	08006d34 	.word	0x08006d34

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	08006d34 	.word	0x08006d34

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96e 	b.w	8000e4c <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	460d      	mov	r5, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	468e      	mov	lr, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f040 8083 	bne.w	8000ca0 <__udivmoddi4+0x118>
 8000b9a:	428a      	cmp	r2, r1
 8000b9c:	4617      	mov	r7, r2
 8000b9e:	d947      	bls.n	8000c30 <__udivmoddi4+0xa8>
 8000ba0:	fab2 f382 	clz	r3, r2
 8000ba4:	b14b      	cbz	r3, 8000bba <__udivmoddi4+0x32>
 8000ba6:	f1c3 0120 	rsb	r1, r3, #32
 8000baa:	fa05 fe03 	lsl.w	lr, r5, r3
 8000bae:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb2:	409f      	lsls	r7, r3
 8000bb4:	ea41 0e0e 	orr.w	lr, r1, lr
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bbe:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc2:	fa1f f987 	uxth.w	r9, r7
 8000bc6:	fb08 e21c 	mls	r2, r8, ip, lr
 8000bca:	fb0c f009 	mul.w	r0, ip, r9
 8000bce:	0c21      	lsrs	r1, r4, #16
 8000bd0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x66>
 8000bd8:	18ba      	adds	r2, r7, r2
 8000bda:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000bde:	f080 8118 	bcs.w	8000e12 <__udivmoddi4+0x28a>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	f240 8115 	bls.w	8000e12 <__udivmoddi4+0x28a>
 8000be8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bec:	443a      	add	r2, r7
 8000bee:	1a12      	subs	r2, r2, r0
 8000bf0:	fbb2 f0f8 	udiv	r0, r2, r8
 8000bf4:	fb08 2210 	mls	r2, r8, r0, r2
 8000bf8:	fb00 f109 	mul.w	r1, r0, r9
 8000bfc:	b2a4      	uxth	r4, r4
 8000bfe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c02:	42a1      	cmp	r1, r4
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x92>
 8000c06:	193c      	adds	r4, r7, r4
 8000c08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0c:	f080 8103 	bcs.w	8000e16 <__udivmoddi4+0x28e>
 8000c10:	42a1      	cmp	r1, r4
 8000c12:	f240 8100 	bls.w	8000e16 <__udivmoddi4+0x28e>
 8000c16:	3802      	subs	r0, #2
 8000c18:	443c      	add	r4, r7
 8000c1a:	1a64      	subs	r4, r4, r1
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	b11e      	cbz	r6, 8000c2c <__udivmoddi4+0xa4>
 8000c24:	2200      	movs	r2, #0
 8000c26:	40dc      	lsrs	r4, r3
 8000c28:	e9c6 4200 	strd	r4, r2, [r6]
 8000c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c30:	b902      	cbnz	r2, 8000c34 <__udivmoddi4+0xac>
 8000c32:	deff      	udf	#255	; 0xff
 8000c34:	fab2 f382 	clz	r3, r2
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14f      	bne.n	8000cdc <__udivmoddi4+0x154>
 8000c3c:	1a8d      	subs	r5, r1, r2
 8000c3e:	2101      	movs	r1, #1
 8000c40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000c44:	fa1f f882 	uxth.w	r8, r2
 8000c48:	fbb5 fcfe 	udiv	ip, r5, lr
 8000c4c:	fb0e 551c 	mls	r5, lr, ip, r5
 8000c50:	fb08 f00c 	mul.w	r0, r8, ip
 8000c54:	0c22      	lsrs	r2, r4, #16
 8000c56:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000c5a:	42a8      	cmp	r0, r5
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0xe6>
 8000c5e:	197d      	adds	r5, r7, r5
 8000c60:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0xe4>
 8000c66:	42a8      	cmp	r0, r5
 8000c68:	f200 80e9 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000c6c:	4694      	mov	ip, r2
 8000c6e:	1a2d      	subs	r5, r5, r0
 8000c70:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c74:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c78:	fb08 f800 	mul.w	r8, r8, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c82:	45a0      	cmp	r8, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x10e>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x10c>
 8000c8e:	45a0      	cmp	r8, r4
 8000c90:	f200 80d9 	bhi.w	8000e46 <__udivmoddi4+0x2be>
 8000c94:	4610      	mov	r0, r2
 8000c96:	eba4 0408 	sub.w	r4, r4, r8
 8000c9a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c9e:	e7c0      	b.n	8000c22 <__udivmoddi4+0x9a>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x12e>
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	f000 80b1 	beq.w	8000e0c <__udivmoddi4+0x284>
 8000caa:	2100      	movs	r1, #0
 8000cac:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f183 	clz	r1, r3
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	d14b      	bne.n	8000d56 <__udivmoddi4+0x1ce>
 8000cbe:	42ab      	cmp	r3, r5
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0x140>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80b9 	bhi.w	8000e3a <__udivmoddi4+0x2b2>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb65 0303 	sbc.w	r3, r5, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	469e      	mov	lr, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0aa      	beq.n	8000c2c <__udivmoddi4+0xa4>
 8000cd6:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cda:	e7a7      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	f1c3 0220 	rsb	r2, r3, #32
 8000ce2:	40d1      	lsrs	r1, r2
 8000ce4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cec:	fa1f f887 	uxth.w	r8, r7
 8000cf0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf4:	fa24 f202 	lsr.w	r2, r4, r2
 8000cf8:	409d      	lsls	r5, r3
 8000cfa:	fb00 fc08 	mul.w	ip, r0, r8
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	0c15      	lsrs	r5, r2, #16
 8000d02:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000d06:	45ac      	cmp	ip, r5
 8000d08:	fa04 f403 	lsl.w	r4, r4, r3
 8000d0c:	d909      	bls.n	8000d22 <__udivmoddi4+0x19a>
 8000d0e:	197d      	adds	r5, r7, r5
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	f080 808f 	bcs.w	8000e36 <__udivmoddi4+0x2ae>
 8000d18:	45ac      	cmp	ip, r5
 8000d1a:	f240 808c 	bls.w	8000e36 <__udivmoddi4+0x2ae>
 8000d1e:	3802      	subs	r0, #2
 8000d20:	443d      	add	r5, r7
 8000d22:	eba5 050c 	sub.w	r5, r5, ip
 8000d26:	fbb5 f1fe 	udiv	r1, r5, lr
 8000d2a:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000d2e:	fb01 f908 	mul.w	r9, r1, r8
 8000d32:	b295      	uxth	r5, r2
 8000d34:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d38:	45a9      	cmp	r9, r5
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x1c4>
 8000d3c:	197d      	adds	r5, r7, r5
 8000d3e:	f101 32ff 	add.w	r2, r1, #4294967295
 8000d42:	d274      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000d44:	45a9      	cmp	r9, r5
 8000d46:	d972      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000d48:	3902      	subs	r1, #2
 8000d4a:	443d      	add	r5, r7
 8000d4c:	eba5 0509 	sub.w	r5, r5, r9
 8000d50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d54:	e778      	b.n	8000c48 <__udivmoddi4+0xc0>
 8000d56:	f1c1 0720 	rsb	r7, r1, #32
 8000d5a:	408b      	lsls	r3, r1
 8000d5c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d60:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d64:	fa25 f407 	lsr.w	r4, r5, r7
 8000d68:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d6c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d70:	fa1f f88c 	uxth.w	r8, ip
 8000d74:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d78:	fa20 f307 	lsr.w	r3, r0, r7
 8000d7c:	fb09 fa08 	mul.w	sl, r9, r8
 8000d80:	408d      	lsls	r5, r1
 8000d82:	431d      	orrs	r5, r3
 8000d84:	0c2b      	lsrs	r3, r5, #16
 8000d86:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8a:	45a2      	cmp	sl, r4
 8000d8c:	fa02 f201 	lsl.w	r2, r2, r1
 8000d90:	fa00 f301 	lsl.w	r3, r0, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0x222>
 8000d96:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d248      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000da0:	45a2      	cmp	sl, r4
 8000da2:	d946      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	fbb4 f0fe 	udiv	r0, r4, lr
 8000db2:	fb0e 4410 	mls	r4, lr, r0, r4
 8000db6:	fb00 fa08 	mul.w	sl, r0, r8
 8000dba:	b2ad      	uxth	r5, r5
 8000dbc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc0:	45a2      	cmp	sl, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x24e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dcc:	d22d      	bcs.n	8000e2a <__udivmoddi4+0x2a2>
 8000dce:	45a2      	cmp	sl, r4
 8000dd0:	d92b      	bls.n	8000e2a <__udivmoddi4+0x2a2>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	4464      	add	r4, ip
 8000dd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dda:	fba0 8902 	umull	r8, r9, r0, r2
 8000dde:	eba4 040a 	sub.w	r4, r4, sl
 8000de2:	454c      	cmp	r4, r9
 8000de4:	46c6      	mov	lr, r8
 8000de6:	464d      	mov	r5, r9
 8000de8:	d319      	bcc.n	8000e1e <__udivmoddi4+0x296>
 8000dea:	d016      	beq.n	8000e1a <__udivmoddi4+0x292>
 8000dec:	b15e      	cbz	r6, 8000e06 <__udivmoddi4+0x27e>
 8000dee:	ebb3 020e 	subs.w	r2, r3, lr
 8000df2:	eb64 0405 	sbc.w	r4, r4, r5
 8000df6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dfa:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	40cc      	lsrs	r4, r1
 8000e02:	e9c6 7400 	strd	r7, r4, [r6]
 8000e06:	2100      	movs	r1, #0
 8000e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e70c      	b.n	8000c2c <__udivmoddi4+0xa4>
 8000e12:	468c      	mov	ip, r1
 8000e14:	e6eb      	b.n	8000bee <__udivmoddi4+0x66>
 8000e16:	4610      	mov	r0, r2
 8000e18:	e6ff      	b.n	8000c1a <__udivmoddi4+0x92>
 8000e1a:	4543      	cmp	r3, r8
 8000e1c:	d2e6      	bcs.n	8000dec <__udivmoddi4+0x264>
 8000e1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e22:	eb69 050c 	sbc.w	r5, r9, ip
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7e0      	b.n	8000dec <__udivmoddi4+0x264>
 8000e2a:	4628      	mov	r0, r5
 8000e2c:	e7d3      	b.n	8000dd6 <__udivmoddi4+0x24e>
 8000e2e:	4611      	mov	r1, r2
 8000e30:	e78c      	b.n	8000d4c <__udivmoddi4+0x1c4>
 8000e32:	4681      	mov	r9, r0
 8000e34:	e7b9      	b.n	8000daa <__udivmoddi4+0x222>
 8000e36:	4608      	mov	r0, r1
 8000e38:	e773      	b.n	8000d22 <__udivmoddi4+0x19a>
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e749      	b.n	8000cd2 <__udivmoddi4+0x14a>
 8000e3e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e42:	443d      	add	r5, r7
 8000e44:	e713      	b.n	8000c6e <__udivmoddi4+0xe6>
 8000e46:	3802      	subs	r0, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	e724      	b.n	8000c96 <__udivmoddi4+0x10e>

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <DWT_Delay_us>:

uint32_t DWT_Delay_Init(void);

// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <DWT_Delay_us+0x48>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000e5e:	f002 fce7 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <DWT_Delay_us+0x4c>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	0c9b      	lsrs	r3, r3, #18
 8000e6c:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	fb02 f303 	mul.w	r3, r2, r3
 8000e76:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8000e78:	bf00      	nop
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <DWT_Delay_us+0x48>)
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	1ad2      	subs	r2, r2, r3
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1acb      	subs	r3, r1, r3
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d3f6      	bcc.n	8000e7a <DWT_Delay_us+0x2a>
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e0001000 	.word	0xe0001000
 8000e9c:	431bde83 	.word	0x431bde83

08000ea0 <Data_Output>:
#include "HT.h"
#include "timer.h"
#include "stm32l1xx_hal.h"

void Data_Output (GPIO_TypeDef *PORT, uint16_t PIN) //direction vers le capteur
  {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
  	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]

  	GPIO_InitStruct.Pin = PIN;
 8000ebc:	887b      	ldrh	r3, [r7, #2]
 8000ebe:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; //pushpull
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	4619      	mov	r1, r3
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f001 f846 	bl	8001f5c <HAL_GPIO_Init>
  }
 8000ed0:	bf00      	nop
 8000ed2:	3720      	adds	r7, #32
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <Data_Input>:

void Data_Input (GPIO_TypeDef *PORT, uint16_t PIN) //direction vers le microcontroleur
  {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
  	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]

  	GPIO_InitStruct.Pin = PIN;
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
  	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4619      	mov	r1, r3
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f001 f82a 	bl	8001f5c <HAL_GPIO_Init>
  }
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <Read_data>:

void Read_data (uint8_t *data)
  {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  	int i, k;
  	for (i=0;i<8;i++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e053      	b.n	8000fc6 <Read_data+0xb6>
  	{
  		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000f1e:	2102      	movs	r1, #2
 8000f20:	482d      	ldr	r0, [pc, #180]	; (8000fd8 <Read_data+0xc8>)
 8000f22:	f001 f9ab 	bl	800227c <HAL_GPIO_ReadPin>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d11c      	bne.n	8000f66 <Read_data+0x56>
  		{
  			(*data)&= ~(1<<(7-i)); //data bit is 0
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b25a      	sxtb	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1c3 0307 	rsb	r3, r3, #7
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	701a      	strb	r2, [r3, #0]
  			while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 8000f4e:	bf00      	nop
 8000f50:	2102      	movs	r1, #2
 8000f52:	4821      	ldr	r0, [pc, #132]	; (8000fd8 <Read_data+0xc8>)
 8000f54:	f001 f992 	bl	800227c <HAL_GPIO_ReadPin>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f8      	beq.n	8000f50 <Read_data+0x40>
  			DWT_Delay_us(40);
 8000f5e:	2028      	movs	r0, #40	; 0x28
 8000f60:	f7ff ff76 	bl	8000e50 <DWT_Delay_us>
 8000f64:	e02c      	b.n	8000fc0 <Read_data+0xb0>
  		}
  		else                       //data bit is 1
  		{
  			(*data)|= (1<<(7-i));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b25a      	sxtb	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2101      	movs	r1, #1
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	701a      	strb	r2, [r3, #0]
  			for (k=0;k<1000;k++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	e009      	b.n	8000f9e <Read_data+0x8e>
  			{
  				if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	4812      	ldr	r0, [pc, #72]	; (8000fd8 <Read_data+0xc8>)
 8000f8e:	f001 f975 	bl	800227c <HAL_GPIO_ReadPin>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d007      	beq.n	8000fa8 <Read_data+0x98>
  			for (k=0;k<1000;k++)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fa4:	dbf1      	blt.n	8000f8a <Read_data+0x7a>
 8000fa6:	e000      	b.n	8000faa <Read_data+0x9a>
  				  {
  				  	break;
 8000fa8:	bf00      	nop
  				  }
  			}
  			while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 8000faa:	bf00      	nop
 8000fac:	2102      	movs	r1, #2
 8000fae:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <Read_data+0xc8>)
 8000fb0:	f001 f964 	bl	800227c <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f8      	beq.n	8000fac <Read_data+0x9c>
  			DWT_Delay_us(40);
 8000fba:	2028      	movs	r0, #40	; 0x28
 8000fbc:	f7ff ff48 	bl	8000e50 <DWT_Delay_us>
  	for (i=0;i<8;i++)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b07      	cmp	r3, #7
 8000fca:	dda8      	ble.n	8000f1e <Read_data+0xe>
  		}
  	 }
  }
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020000 	.word	0x40020000

08000fdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	4b27      	ldr	r3, [pc, #156]	; (8001090 <MX_GPIO_Init+0xb4>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a26      	ldr	r2, [pc, #152]	; (8001090 <MX_GPIO_Init+0xb4>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b24      	ldr	r3, [pc, #144]	; (8001090 <MX_GPIO_Init+0xb4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_GPIO_Init+0xb4>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a20      	ldr	r2, [pc, #128]	; (8001090 <MX_GPIO_Init+0xb4>)
 8001010:	f043 0320 	orr.w	r3, r3, #32
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <MX_GPIO_Init+0xb4>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 0320 	and.w	r3, r3, #32
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_GPIO_Init+0xb4>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a1a      	ldr	r2, [pc, #104]	; (8001090 <MX_GPIO_Init+0xb4>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_GPIO_Init+0xb4>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_GPIO_Init+0xb4>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <MX_GPIO_Init+0xb4>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_GPIO_Init+0xb4>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001058:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800105c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	480a      	ldr	r0, [pc, #40]	; (8001094 <MX_GPIO_Init+0xb8>)
 800106a:	f000 ff77 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800106e:	2302      	movs	r3, #2
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001072:	2303      	movs	r3, #3
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_GPIO_Init+0xbc>)
 8001082:	f000 ff6b 	bl	8001f5c <HAL_GPIO_Init>

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40020800 	.word	0x40020800
 8001098:	40020000 	.word	0x40020000

0800109c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_I2C1_Init+0x50>)
 80010a2:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <MX_I2C1_Init+0x54>)
 80010a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_I2C1_Init+0x50>)
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <MX_I2C1_Init+0x58>)
 80010aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_I2C1_Init+0x50>)
 80010da:	f001 f8ff 	bl	80022dc <HAL_I2C_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e4:	f000 fb8a 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000214 	.word	0x20000214
 80010f0:	40005400 	.word	0x40005400
 80010f4:	000186a0 	.word	0x000186a0

080010f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a17      	ldr	r2, [pc, #92]	; (8001174 <HAL_I2C_MspInit+0x7c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d128      	bne.n	800116c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_I2C_MspInit+0x80>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a16      	ldr	r2, [pc, #88]	; (8001178 <HAL_I2C_MspInit+0x80>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_I2C_MspInit+0x80>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001132:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001138:	2312      	movs	r3, #18
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001144:	2304      	movs	r3, #4
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	480b      	ldr	r0, [pc, #44]	; (800117c <HAL_I2C_MspInit+0x84>)
 8001150:	f000 ff04 	bl	8001f5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_I2C_MspInit+0x80>)
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_I2C_MspInit+0x80>)
 800115a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800115e:	6253      	str	r3, [r2, #36]	; 0x24
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <HAL_I2C_MspInit+0x80>)
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800116c:	bf00      	nop
 800116e:	3728      	adds	r7, #40	; 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40005400 	.word	0x40005400
 8001178:	40023800 	.word	0x40023800
 800117c:	40020400 	.word	0x40020400

08001180 <lcd_init>:
I2C_HandleTypeDef hi2c3;

UART_HandleTypeDef huart2;

void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af02      	add	r7, sp, #8
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	f043 030c 	orr.w	r3, r3, #12
 8001196:	b2da      	uxtb	r2, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	f043 0320 	orr.w	r3, r3, #32
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80011ac:	f107 0118 	add.w	r1, r7, #24
 80011b0:	230a      	movs	r3, #10
 80011b2:	2202      	movs	r2, #2
 80011b4:	486c      	ldr	r0, [pc, #432]	; (8001368 <lcd_init+0x1e8>)
 80011b6:	f002 fd30 	bl	8003c1a <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80011ba:	f640 230d 	movw	r3, #2573	; 0xa0d
 80011be:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80011c0:	f107 0114 	add.w	r1, r7, #20
 80011c4:	230a      	movs	r3, #10
 80011c6:	2202      	movs	r2, #2
 80011c8:	4867      	ldr	r0, [pc, #412]	; (8001368 <lcd_init+0x1e8>)
 80011ca:	f002 fd26 	bl	8003c1a <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80011ce:	2364      	movs	r3, #100	; 0x64
 80011d0:	2205      	movs	r2, #5
 80011d2:	217c      	movs	r1, #124	; 0x7c
 80011d4:	69f8      	ldr	r0, [r7, #28]
 80011d6:	f001 fac3 	bl	8002760 <HAL_I2C_IsDeviceReady>
 80011da:	4603      	mov	r3, r0
 80011dc:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80011de:	f107 0113 	add.w	r1, r7, #19
 80011e2:	230a      	movs	r3, #10
 80011e4:	2201      	movs	r2, #1
 80011e6:	4860      	ldr	r0, [pc, #384]	; (8001368 <lcd_init+0x1e8>)
 80011e8:	f002 fd17 	bl	8003c1a <HAL_UART_Transmit>
	HAL_Delay(50);
 80011ec:	2032      	movs	r0, #50	; 0x32
 80011ee:	f000 fdaf 	bl	8001d50 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80011f2:	f107 0218 	add.w	r2, r7, #24
 80011f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2302      	movs	r3, #2
 80011fe:	217c      	movs	r1, #124	; 0x7c
 8001200:	69f8      	ldr	r0, [r7, #28]
 8001202:	f001 f9af 	bl	8002564 <HAL_I2C_Master_Transmit>
 8001206:	4603      	mov	r3, r0
 8001208:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 800120a:	f107 0112 	add.w	r1, r7, #18
 800120e:	230a      	movs	r3, #10
 8001210:	2201      	movs	r2, #1
 8001212:	4855      	ldr	r0, [pc, #340]	; (8001368 <lcd_init+0x1e8>)
 8001214:	f002 fd01 	bl	8003c1a <HAL_UART_Transmit>
	HAL_Delay(50);
 8001218:	2032      	movs	r0, #50	; 0x32
 800121a:	f000 fd99 	bl	8001d50 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800121e:	f107 0218 	add.w	r2, r7, #24
 8001222:	f241 3388 	movw	r3, #5000	; 0x1388
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2302      	movs	r3, #2
 800122a:	217c      	movs	r1, #124	; 0x7c
 800122c:	69f8      	ldr	r0, [r7, #28]
 800122e:	f001 f999 	bl	8002564 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001232:	2005      	movs	r0, #5
 8001234:	f000 fd8c 	bl	8001d50 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001238:	f107 0218 	add.w	r2, r7, #24
 800123c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2302      	movs	r3, #2
 8001244:	217c      	movs	r1, #124	; 0x7c
 8001246:	69f8      	ldr	r0, [r7, #28]
 8001248:	f001 f98c 	bl	8002564 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2204      	movs	r2, #4
 8001250:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	785b      	ldrb	r3, [r3, #1]
 8001256:	f043 0308 	orr.w	r3, r3, #8
 800125a:	b2db      	uxtb	r3, r3
 800125c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800125e:	f107 0218 	add.w	r2, r7, #24
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2302      	movs	r3, #2
 800126a:	217c      	movs	r1, #124	; 0x7c
 800126c:	69f8      	ldr	r0, [r7, #28]
 800126e:	f001 f979 	bl	8002564 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8001272:	2301      	movs	r3, #1
 8001274:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001276:	f107 0218 	add.w	r2, r7, #24
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2302      	movs	r3, #2
 8001282:	217c      	movs	r1, #124	; 0x7c
 8001284:	69f8      	ldr	r0, [r7, #28]
 8001286:	f001 f96d 	bl	8002564 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800128a:	2002      	movs	r0, #2
 800128c:	f000 fd60 	bl	8001d50 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	2202      	movs	r2, #2
 8001294:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	789b      	ldrb	r3, [r3, #2]
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80012a2:	f107 0218 	add.w	r2, r7, #24
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2302      	movs	r3, #2
 80012ae:	217c      	movs	r1, #124	; 0x7c
 80012b0:	69f8      	ldr	r0, [r7, #28]
 80012b2:	f001 f957 	bl	8002564 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80012be:	f107 0210 	add.w	r2, r7, #16
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2302      	movs	r3, #2
 80012ca:	21c4      	movs	r1, #196	; 0xc4
 80012cc:	69f8      	ldr	r0, [r7, #28]
 80012ce:	f001 f949 	bl	8002564 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80012d2:	2308      	movs	r3, #8
 80012d4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80012d6:	23ff      	movs	r3, #255	; 0xff
 80012d8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80012da:	f107 0210 	add.w	r2, r7, #16
 80012de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2302      	movs	r3, #2
 80012e6:	21c4      	movs	r1, #196	; 0xc4
 80012e8:	69f8      	ldr	r0, [r7, #28]
 80012ea:	f001 f93b 	bl	8002564 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80012ee:	2301      	movs	r3, #1
 80012f0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80012f2:	2320      	movs	r3, #32
 80012f4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80012f6:	f107 0210 	add.w	r2, r7, #16
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2302      	movs	r3, #2
 8001302:	21c4      	movs	r1, #196	; 0xc4
 8001304:	69f8      	ldr	r0, [r7, #28]
 8001306:	f001 f92d 	bl	8002564 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 800130a:	2304      	movs	r3, #4
 800130c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800130e:	23ff      	movs	r3, #255	; 0xff
 8001310:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001312:	f107 020c 	add.w	r2, r7, #12
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2302      	movs	r3, #2
 800131e:	21c4      	movs	r1, #196	; 0xc4
 8001320:	69f8      	ldr	r0, [r7, #28]
 8001322:	f001 f91f 	bl	8002564 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8001326:	2303      	movs	r3, #3
 8001328:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800132a:	23ff      	movs	r3, #255	; 0xff
 800132c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800132e:	f107 020c 	add.w	r2, r7, #12
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2302      	movs	r3, #2
 800133a:	21c4      	movs	r1, #196	; 0xc4
 800133c:	69f8      	ldr	r0, [r7, #28]
 800133e:	f001 f911 	bl	8002564 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8001342:	2302      	movs	r3, #2
 8001344:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001346:	23ff      	movs	r3, #255	; 0xff
 8001348:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800134a:	f107 020c 	add.w	r2, r7, #12
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2302      	movs	r3, #2
 8001356:	21c4      	movs	r1, #196	; 0xc4
 8001358:	69f8      	ldr	r0, [r7, #28]
 800135a:	f001 f903 	bl	8002564 <HAL_I2C_Master_Transmit>


}
 800135e:	bf00      	nop
 8001360:	3720      	adds	r7, #32
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200002bc 	.word	0x200002bc

0800136c <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	lcd_position(&hi2c3,0,0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	4808      	ldr	r0, [pc, #32]	; (8001398 <clearlcd+0x2c>)
 8001376:	f000 f83c 	bl	80013f2 <lcd_position>
	lcd_print(&hi2c3,"                ");
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <clearlcd+0x30>)
 800137c:	4806      	ldr	r0, [pc, #24]	; (8001398 <clearlcd+0x2c>)
 800137e:	f000 f80f 	bl	80013a0 <lcd_print>
	lcd_position(&hi2c3,0,1);
 8001382:	2201      	movs	r2, #1
 8001384:	2100      	movs	r1, #0
 8001386:	4804      	ldr	r0, [pc, #16]	; (8001398 <clearlcd+0x2c>)
 8001388:	f000 f833 	bl	80013f2 <lcd_position>
	lcd_print(&hi2c3,"                ");
 800138c:	4903      	ldr	r1, [pc, #12]	; (800139c <clearlcd+0x30>)
 800138e:	4802      	ldr	r0, [pc, #8]	; (8001398 <clearlcd+0x2c>)
 8001390:	f000 f806 	bl	80013a0 <lcd_print>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000268 	.word	0x20000268
 800139c:	08006d50 	.word	0x08006d50

080013a0 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 80013ae:	2340      	movs	r3, #64	; 0x40
 80013b0:	733b      	strb	r3, [r7, #12]
    int i=0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80013b6:	e011      	b.n	80013dc <lcd_print+0x3c>
    {
            data[1] = str[i];
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80013c2:	f107 020c 	add.w	r2, r7, #12
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2302      	movs	r3, #2
 80013ce:	217c      	movs	r1, #124	; 0x7c
 80013d0:	6938      	ldr	r0, [r7, #16]
 80013d2:	f001 f8c7 	bl	8002564 <HAL_I2C_Master_Transmit>
            i++;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e7      	bne.n	80013b8 <lcd_print+0x18>
   }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af02      	add	r7, sp, #8
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	70fb      	strb	r3, [r7, #3]
 80013fe:	4613      	mov	r3, r2
 8001400:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8001406:	78bb      	ldrb	r3, [r7, #2]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d104      	bne.n	8001416 <lcd_position+0x24>
    {
        col = col | 0x80;
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001412:	70fb      	strb	r3, [r7, #3]
 8001414:	e003      	b.n	800141e <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800141c:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001426:	f107 0208 	add.w	r2, r7, #8
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2302      	movs	r3, #2
 8001432:	217c      	movs	r1, #124	; 0x7c
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f001 f895 	bl	8002564 <HAL_I2C_Master_Transmit>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af02      	add	r7, sp, #8
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	460b      	mov	r3, r1
 8001450:	71bb      	strb	r3, [r7, #6]
 8001452:	4613      	mov	r3, r2
 8001454:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c3;
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <reglagecouleur+0x74>)
 8001458:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 800145a:	2304      	movs	r3, #4
 800145c:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 8001462:	f107 0210 	add.w	r2, r7, #16
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2302      	movs	r3, #2
 800146e:	21c4      	movs	r1, #196	; 0xc4
 8001470:	6978      	ldr	r0, [r7, #20]
 8001472:	f001 f877 	bl	8002564 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 8001476:	2303      	movs	r3, #3
 8001478:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 800147a:	79bb      	ldrb	r3, [r7, #6]
 800147c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 800147e:	f107 020c 	add.w	r2, r7, #12
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2302      	movs	r3, #2
 800148a:	21c4      	movs	r1, #196	; 0xc4
 800148c:	6978      	ldr	r0, [r7, #20]
 800148e:	f001 f869 	bl	8002564 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 8001492:	2302      	movs	r3, #2
 8001494:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 8001496:	797b      	ldrb	r3, [r7, #5]
 8001498:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 800149a:	f107 0208 	add.w	r2, r7, #8
 800149e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2302      	movs	r3, #2
 80014a6:	21c4      	movs	r1, #196	; 0xc4
 80014a8:	6978      	ldr	r0, [r7, #20]
 80014aa:	f001 f85b 	bl	8002564 <HAL_I2C_Master_Transmit>
}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000268 	.word	0x20000268

080014bc <DWT_Delay_us>:
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <DWT_Delay_us+0x48>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80014ca:	f002 f9b1 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <DWT_Delay_us+0x4c>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	0c9b      	lsrs	r3, r3, #18
 80014d8:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80014e4:	bf00      	nop
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <DWT_Delay_us+0x48>)
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad2      	subs	r2, r2, r3
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1acb      	subs	r3, r1, r3
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d3f6      	bcc.n	80014e6 <DWT_Delay_us+0x2a>
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e0001000 	.word	0xe0001000
 8001508:	431bde83 	.word	0x431bde83

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  int k = 0; //variable pour les bloucles while
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001516:	f000 fbac 	bl	8001c72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151a:	f000 f921 	bl	8001760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151e:	f7ff fd5d 	bl	8000fdc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001522:	f000 fb13 	bl	8001b4c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001526:	f7ff fdb9 	bl	800109c <MX_I2C1_Init>
  MX_TIM2_Init();
 800152a:	f000 fa8b 	bl	8001a44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 800152e:	f000 fadd 	bl	8001aec <DWT_Delay_Init>
  lcd_init(&hi2c1, &lcdData); // initialise le lcd
 8001532:	4977      	ldr	r1, [pc, #476]	; (8001710 <main+0x204>)
 8001534:	4877      	ldr	r0, [pc, #476]	; (8001714 <main+0x208>)
 8001536:	f7ff fe23 	bl	8001180 <lcd_init>
  lcd_position(&hi2c1,0,0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	4875      	ldr	r0, [pc, #468]	; (8001714 <main+0x208>)
 8001540:	f7ff ff57 	bl	80013f2 <lcd_position>
  lcd_print(&hi2c1,"Affichage T etH");
 8001544:	4974      	ldr	r1, [pc, #464]	; (8001718 <main+0x20c>)
 8001546:	4873      	ldr	r0, [pc, #460]	; (8001714 <main+0x208>)
 8001548:	f7ff ff2a 	bl	80013a0 <lcd_print>
  reglagecouleur(0,0,255);
 800154c:	22ff      	movs	r2, #255	; 0xff
 800154e:	2100      	movs	r1, #0
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff ff77 	bl	8001444 <reglagecouleur>
  HAL_Delay(3000);
 8001556:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800155a:	f000 fbf9 	bl	8001d50 <HAL_Delay>

    /* USER CODE BEGIN 3 */

	  /*commence la communication avec le capteur*/

	  HAL_Delay(3000);
 800155e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001562:	f000 fbf5 	bl	8001d50 <HAL_Delay>
	  Data_Output(GPIOA, GPIO_PIN_1); //info vers le capteur
 8001566:	2102      	movs	r1, #2
 8001568:	486c      	ldr	r0, [pc, #432]	; (800171c <main+0x210>)
 800156a:	f7ff fc99 	bl	8000ea0 <Data_Output>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2102      	movs	r1, #2
 8001572:	486a      	ldr	r0, [pc, #424]	; (800171c <main+0x210>)
 8001574:	f000 fe99 	bl	80022aa <HAL_GPIO_WritePin>
	  DWT_Delay_us(1200); //signal de commande
 8001578:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800157c:	f7ff ff9e 	bl	80014bc <DWT_Delay_us>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	2102      	movs	r1, #2
 8001584:	4865      	ldr	r0, [pc, #404]	; (800171c <main+0x210>)
 8001586:	f000 fe90 	bl	80022aa <HAL_GPIO_WritePin>
	  DWT_Delay_us(30); //signal de commande
 800158a:	201e      	movs	r0, #30
 800158c:	f7ff ff96 	bl	80014bc <DWT_Delay_us>
	  Data_Input(GPIOA, GPIO_PIN_1); //info vers le microcontroleur
 8001590:	2102      	movs	r1, #2
 8001592:	4862      	ldr	r0, [pc, #392]	; (800171c <main+0x210>)
 8001594:	f7ff fca0 	bl	8000ed8 <Data_Input>

	  /*commence la reception de donnees*/

	  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 8001598:	bf00      	nop
 800159a:	2102      	movs	r1, #2
 800159c:	485f      	ldr	r0, [pc, #380]	; (800171c <main+0x210>)
 800159e:	f000 fe6d 	bl	800227c <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f8      	beq.n	800159a <main+0x8e>

	  for (k=0;k<1000;k++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	e009      	b.n	80015c2 <main+0xb6>
	  {
		  if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 80015ae:	2102      	movs	r1, #2
 80015b0:	485a      	ldr	r0, [pc, #360]	; (800171c <main+0x210>)
 80015b2:	f000 fe63 	bl	800227c <HAL_GPIO_ReadPin>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d007      	beq.n	80015cc <main+0xc0>
	  for (k=0;k<1000;k++)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3301      	adds	r3, #1
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015c8:	dbf1      	blt.n	80015ae <main+0xa2>
 80015ca:	e000      	b.n	80015ce <main+0xc2>
		  {
	  	  	break;
 80015cc:	bf00      	nop
	  	  }
	  }

	  while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)));
 80015ce:	bf00      	nop
 80015d0:	2102      	movs	r1, #2
 80015d2:	4852      	ldr	r0, [pc, #328]	; (800171c <main+0x210>)
 80015d4:	f000 fe52 	bl	800227c <HAL_GPIO_ReadPin>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f8      	beq.n	80015d0 <main+0xc4>
	  DWT_Delay_us(40);
 80015de:	2028      	movs	r0, #40	; 0x28
 80015e0:	f7ff ff6c 	bl	80014bc <DWT_Delay_us>

	  Read_data(&dataH1); //dans la library HT.c
 80015e4:	484e      	ldr	r0, [pc, #312]	; (8001720 <main+0x214>)
 80015e6:	f7ff fc93 	bl	8000f10 <Read_data>
	  Read_data(&dataH2);
 80015ea:	484e      	ldr	r0, [pc, #312]	; (8001724 <main+0x218>)
 80015ec:	f7ff fc90 	bl	8000f10 <Read_data>
	  Read_data(&dataT1);
 80015f0:	484d      	ldr	r0, [pc, #308]	; (8001728 <main+0x21c>)
 80015f2:	f7ff fc8d 	bl	8000f10 <Read_data>
	  Read_data(&dataT2);
 80015f6:	484d      	ldr	r0, [pc, #308]	; (800172c <main+0x220>)
 80015f8:	f7ff fc8a 	bl	8000f10 <Read_data>
	  Read_data(&SUM);
 80015fc:	484c      	ldr	r0, [pc, #304]	; (8001730 <main+0x224>)
 80015fe:	f7ff fc87 	bl	8000f10 <Read_data>

	  check = dataH1 + dataH2 + dataT1 + dataT2; //pour verifier la lecture dans le IDE
 8001602:	4b47      	ldr	r3, [pc, #284]	; (8001720 <main+0x214>)
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <main+0x218>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b46      	ldr	r3, [pc, #280]	; (8001728 <main+0x21c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b45      	ldr	r3, [pc, #276]	; (800172c <main+0x220>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4b45      	ldr	r3, [pc, #276]	; (8001734 <main+0x228>)
 8001620:	701a      	strb	r2, [r3, #0]

	  RH = (dataH1<<8) | dataH2;
 8001622:	4b3f      	ldr	r3, [pc, #252]	; (8001720 <main+0x214>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b21a      	sxth	r2, r3
 800162a:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <main+0x218>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b21b      	sxth	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b21b      	sxth	r3, r3
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b40      	ldr	r3, [pc, #256]	; (8001738 <main+0x22c>)
 8001638:	801a      	strh	r2, [r3, #0]
	  TEMP = (dataT1<<8) | dataT2;
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <main+0x21c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21a      	sxth	r2, r3
 8001642:	4b3a      	ldr	r3, [pc, #232]	; (800172c <main+0x220>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b21b      	sxth	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b21b      	sxth	r3, r3
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <main+0x230>)
 8001650:	801a      	strh	r2, [r3, #0]

	  Humidite = RH / 10.0;
 8001652:	4b39      	ldr	r3, [pc, #228]	; (8001738 <main+0x22c>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe feec 	bl	8000434 <__aeabi_i2d>
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b37      	ldr	r3, [pc, #220]	; (8001740 <main+0x234>)
 8001662:	f7ff f87b 	bl	800075c <__aeabi_ddiv>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fa23 	bl	8000ab8 <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	4a33      	ldr	r2, [pc, #204]	; (8001744 <main+0x238>)
 8001676:	6013      	str	r3, [r2, #0]
	  Temperature = TEMP / 10.0;
 8001678:	4b30      	ldr	r3, [pc, #192]	; (800173c <main+0x230>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fed9 	bl	8000434 <__aeabi_i2d>
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <main+0x234>)
 8001688:	f7ff f868 	bl	800075c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fa10 	bl	8000ab8 <__aeabi_d2f>
 8001698:	4603      	mov	r3, r0
 800169a:	4a2b      	ldr	r2, [pc, #172]	; (8001748 <main+0x23c>)
 800169c:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //pour la prochaine lecture
 800169e:	2201      	movs	r2, #1
 80016a0:	2102      	movs	r1, #2
 80016a2:	481e      	ldr	r0, [pc, #120]	; (800171c <main+0x210>)
 80016a4:	f000 fe01 	bl	80022aa <HAL_GPIO_WritePin>

	  /*commence transmission vers LCD*/
	  clearlcd();
 80016a8:	f7ff fe60 	bl	800136c <clearlcd>

	  sprintf(bufRH,"Humidite: %.1f", Humidite);
 80016ac:	4b25      	ldr	r3, [pc, #148]	; (8001744 <main+0x238>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe fed1 	bl	8000458 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4924      	ldr	r1, [pc, #144]	; (800174c <main+0x240>)
 80016bc:	4824      	ldr	r0, [pc, #144]	; (8001750 <main+0x244>)
 80016be:	f003 f8ff 	bl	80048c0 <siprintf>
	  sprintf(bufT, "Temp.: %.1f C", Temperature);
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <main+0x23c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fec6 	bl	8000458 <__aeabi_f2d>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4920      	ldr	r1, [pc, #128]	; (8001754 <main+0x248>)
 80016d2:	4821      	ldr	r0, [pc, #132]	; (8001758 <main+0x24c>)
 80016d4:	f003 f8f4 	bl	80048c0 <siprintf>
	  lcd_position(&hi2c1,0,0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <main+0x208>)
 80016de:	f7ff fe88 	bl	80013f2 <lcd_position>
	  lcd_print(&hi2c1,bufRH);
 80016e2:	491b      	ldr	r1, [pc, #108]	; (8001750 <main+0x244>)
 80016e4:	480b      	ldr	r0, [pc, #44]	; (8001714 <main+0x208>)
 80016e6:	f7ff fe5b 	bl	80013a0 <lcd_print>
	  lcd_print(&hi2c1,"%");
 80016ea:	491c      	ldr	r1, [pc, #112]	; (800175c <main+0x250>)
 80016ec:	4809      	ldr	r0, [pc, #36]	; (8001714 <main+0x208>)
 80016ee:	f7ff fe57 	bl	80013a0 <lcd_print>
	  lcd_position(&hi2c1,0,1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	2100      	movs	r1, #0
 80016f6:	4807      	ldr	r0, [pc, #28]	; (8001714 <main+0x208>)
 80016f8:	f7ff fe7b 	bl	80013f2 <lcd_position>
	  lcd_print(&hi2c1,bufT);
 80016fc:	4916      	ldr	r1, [pc, #88]	; (8001758 <main+0x24c>)
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <main+0x208>)
 8001700:	f7ff fe4e 	bl	80013a0 <lcd_print>
	  reglagecouleur(0,0,255);
 8001704:	22ff      	movs	r2, #255	; 0xff
 8001706:	2100      	movs	r1, #0
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff fe9b 	bl	8001444 <reglagecouleur>
	  HAL_Delay(3000);
 800170e:	e726      	b.n	800155e <main+0x52>
 8001710:	200001f8 	.word	0x200001f8
 8001714:	20000214 	.word	0x20000214
 8001718:	08006d64 	.word	0x08006d64
 800171c:	40020000 	.word	0x40020000
 8001720:	20000301 	.word	0x20000301
 8001724:	20000331 	.word	0x20000331
 8001728:	20000319 	.word	0x20000319
 800172c:	20000300 	.word	0x20000300
 8001730:	20000330 	.word	0x20000330
 8001734:	20000318 	.word	0x20000318
 8001738:	20000204 	.word	0x20000204
 800173c:	20000206 	.word	0x20000206
 8001740:	40240000 	.word	0x40240000
 8001744:	20000200 	.word	0x20000200
 8001748:	200001fc 	.word	0x200001fc
 800174c:	08006d74 	.word	0x08006d74
 8001750:	2000031c 	.word	0x2000031c
 8001754:	08006d84 	.word	0x08006d84
 8001758:	20000304 	.word	0x20000304
 800175c:	08006d94 	.word	0x08006d94

08001760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b092      	sub	sp, #72	; 0x48
 8001764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	2234      	movs	r2, #52	; 0x34
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f002 fc3e 	bl	8003ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001774:	463b      	mov	r3, r7
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <SystemClock_Config+0x98>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800178a:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <SystemClock_Config+0x98>)
 800178c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001790:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001792:	2302      	movs	r3, #2
 8001794:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001796:	2301      	movs	r3, #1
 8001798:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800179a:	2310      	movs	r3, #16
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179e:	2302      	movs	r3, #2
 80017a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017a2:	2300      	movs	r3, #0
 80017a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80017a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80017aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80017ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80017b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 fb08 	bl	8002dcc <HAL_RCC_OscConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017c2:	f000 f81b 	bl	80017fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c6:	230f      	movs	r3, #15
 80017c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ca:	2303      	movs	r3, #3
 80017cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017da:	463b      	mov	r3, r7
 80017dc:	2101      	movs	r1, #1
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 fe24 	bl	800342c <HAL_RCC_ClockConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80017ea:	f000 f807 	bl	80017fc <Error_Handler>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3748      	adds	r7, #72	; 0x48
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40007000 	.word	0x40007000

080017fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001804:	e7fe      	b.n	8001804 <Error_Handler+0x8>
	...

08001808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_MspInit+0x5c>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	4a14      	ldr	r2, [pc, #80]	; (8001864 <HAL_MspInit+0x5c>)
 8001814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001818:	6253      	str	r3, [r2, #36]	; 0x24
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_MspInit+0x5c>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_MspInit+0x5c>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_MspInit+0x5c>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6213      	str	r3, [r2, #32]
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_MspInit+0x5c>)
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_MspInit+0x5c>)
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	4a08      	ldr	r2, [pc, #32]	; (8001864 <HAL_MspInit+0x5c>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001848:	6253      	str	r3, [r2, #36]	; 0x24
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_MspInit+0x5c>)
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001856:	2007      	movs	r0, #7
 8001858:	f000 fb4c 	bl	8001ef4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800186c:	e7fe      	b.n	800186c <NMI_Handler+0x4>

0800186e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <MemManage_Handler+0x4>

0800187a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <UsageFault_Handler+0x4>

08001886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ae:	f000 fa33 	bl	8001d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
	return 1;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <_kill>:

int _kill(int pid, int sig)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018ce:	f002 fb65 	bl	8003f9c <__errno>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2216      	movs	r2, #22
 80018d6:	601a      	str	r2, [r3, #0]
	return -1;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_exit>:

void _exit (int status)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ffe7 	bl	80018c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018f6:	e7fe      	b.n	80018f6 <_exit+0x12>

080018f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e00a      	b.n	8001920 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800190a:	f3af 8000 	nop.w
 800190e:	4601      	mov	r1, r0
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	60ba      	str	r2, [r7, #8]
 8001916:	b2ca      	uxtb	r2, r1
 8001918:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	dbf0      	blt.n	800190a <_read+0x12>
	}

return len;
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e009      	b.n	8001958 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbf1      	blt.n	8001944 <_write+0x12>
	}
	return len;
 8001960:	687b      	ldr	r3, [r7, #4]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_close>:

int _close(int file)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
	return -1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001990:	605a      	str	r2, [r3, #4]
	return 0;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <_isatty>:

int _isatty(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
	return 1;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b085      	sub	sp, #20
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
	return 0;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
	...

080019cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <_sbrk+0x5c>)
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <_sbrk+0x60>)
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <_sbrk+0x64>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <_sbrk+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d207      	bcs.n	8001a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019fc:	f002 face 	bl	8003f9c <__errno>
 8001a00:	4603      	mov	r3, r0
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	e009      	b.n	8001a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <_sbrk+0x64>)
 8001a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20014000 	.word	0x20014000
 8001a2c:	00000400 	.word	0x00000400
 8001a30:	20000208 	.word	0x20000208
 8001a34:	20000388 	.word	0x20000388

08001a38 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <MX_TIM2_Init+0x6c>)
 8001a54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <MX_TIM2_Init+0x6c>)
 8001a5c:	224f      	movs	r2, #79	; 0x4f
 8001a5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <MX_TIM2_Init+0x6c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <MX_TIM2_Init+0x6c>)
 8001a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <MX_TIM2_Init+0x6c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_TIM2_Init+0x6c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8001a7a:	2108      	movs	r1, #8
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <MX_TIM2_Init+0x6c>)
 8001a7e:	f001 ff69 	bl	8003954 <HAL_TIM_OnePulse_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM2_Init+0x48>
  {
    Error_Handler();
 8001a88:	f7ff feb8 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a94:	463b      	mov	r3, r7
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_TIM2_Init+0x6c>)
 8001a9a:	f002 f813 	bl	8003ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001aa4:	f7ff feaa 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000334 	.word	0x20000334

08001ab4 <HAL_TIM_OnePulse_MspInit>:

void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* tim_onepulseHandle)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  if(tim_onepulseHandle->Instance==TIM2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac4:	d10b      	bne.n	8001ade <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_TIM_OnePulse_MspInit+0x34>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_TIM_OnePulse_MspInit+0x34>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6253      	str	r3, [r2, #36]	; 0x24
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_TIM_OnePulse_MspInit+0x34>)
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40023800 	.word	0x40023800

08001aec <DWT_Delay_Init>:

#include "timer.h"
#include "stm32l1xx_hal.h"

uint32_t DWT_Delay_Init(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <DWT_Delay_Init+0x58>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <DWT_Delay_Init+0x58>)
 8001af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afa:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <DWT_Delay_Init+0x58>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <DWT_Delay_Init+0x58>)
 8001b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b06:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <DWT_Delay_Init+0x5c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <DWT_Delay_Init+0x5c>)
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <DWT_Delay_Init+0x5c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <DWT_Delay_Init+0x5c>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <DWT_Delay_Init+0x5c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8001b26:	bf00      	nop
    __ASM volatile ("NOP");
 8001b28:	bf00      	nop
    __ASM volatile ("NOP");
 8001b2a:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <DWT_Delay_Init+0x5c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001b34:	2300      	movs	r3, #0
 8001b36:	e000      	b.n	8001b3a <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001b38:	2301      	movs	r3, #1
    }
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000edf0 	.word	0xe000edf0
 8001b48:	e0001000 	.word	0xe0001000

08001b4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <MX_USART2_UART_Init+0x50>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b84:	f001 fffc 	bl	8003b80 <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b8e:	f7ff fe35 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200002bc 	.word	0x200002bc
 8001b9c:	40004400 	.word	0x40004400

08001ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <HAL_UART_MspInit+0x7c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d127      	bne.n	8001c12 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_UART_MspInit+0x80>)
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_UART_MspInit+0x80>)
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bcc:	6253      	str	r3, [r2, #36]	; 0x24
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_UART_MspInit+0x80>)
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_UART_MspInit+0x80>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <HAL_UART_MspInit+0x80>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	61d3      	str	r3, [r2, #28]
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_UART_MspInit+0x80>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bf2:	230c      	movs	r3, #12
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c02:	2307      	movs	r3, #7
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <HAL_UART_MspInit+0x84>)
 8001c0e:	f000 f9a5 	bl	8001f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	; 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40004400 	.word	0x40004400
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020000 	.word	0x40020000

08001c28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c2a:	490d      	ldr	r1, [pc, #52]	; (8001c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c40:	4c0a      	ldr	r4, [pc, #40]	; (8001c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c4e:	f7ff fef3 	bl	8001a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c52:	f002 f9a9 	bl	8003fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c56:	f7ff fc59 	bl	800150c <main>
  bx lr
 8001c5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c60:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c64:	080071ac 	.word	0x080071ac
  ldr r2, =_sbss
 8001c68:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c6c:	20000388 	.word	0x20000388

08001c70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC1_IRQHandler>

08001c72 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f000 f939 	bl	8001ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c82:	2000      	movs	r0, #0
 8001c84:	f000 f80e 	bl	8001ca4 <HAL_InitTick>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	71fb      	strb	r3, [r7, #7]
 8001c92:	e001      	b.n	8001c98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c94:	f7ff fdb8 	bl	8001808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c98:	79fb      	ldrb	r3, [r7, #7]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_InitTick+0x68>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d022      	beq.n	8001cfe <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_InitTick+0x6c>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <HAL_InitTick+0x68>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 f938 	bl	8001f42 <HAL_SYSTICK_Config>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10f      	bne.n	8001cf8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b0f      	cmp	r3, #15
 8001cdc:	d809      	bhi.n	8001cf2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce6:	f000 f910 	bl	8001f0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HAL_InitTick+0x70>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	e007      	b.n	8001d02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
 8001cf6:	e004      	b.n	8001d02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	e001      	b.n	8001d02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000004 	.word	0x20000004

08001d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_IncTick+0x1c>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_IncTick+0x20>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4413      	add	r3, r2
 8001d26:	4a03      	ldr	r2, [pc, #12]	; (8001d34 <HAL_IncTick+0x1c>)
 8001d28:	6013      	str	r3, [r2, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000374 	.word	0x20000374
 8001d38:	20000008 	.word	0x20000008

08001d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d40:	4b02      	ldr	r3, [pc, #8]	; (8001d4c <HAL_GetTick+0x10>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	20000374 	.word	0x20000374

08001d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff fff0 	bl	8001d3c <HAL_GetTick>
 8001d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d004      	beq.n	8001d74 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_Delay+0x40>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4413      	add	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d74:	bf00      	nop
 8001d76:	f7ff ffe1 	bl	8001d3c <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d8f7      	bhi.n	8001d76 <HAL_Delay+0x26>
  {
  }
}
 8001d86:	bf00      	nop
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000008 	.word	0x20000008

08001d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc6:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db0a      	blt.n	8001e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	490c      	ldr	r1, [pc, #48]	; (8001e44 <__NVIC_SetPriority+0x4c>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e20:	e00a      	b.n	8001e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4908      	ldr	r1, [pc, #32]	; (8001e48 <__NVIC_SetPriority+0x50>)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	3b04      	subs	r3, #4
 8001e30:	0112      	lsls	r2, r2, #4
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	440b      	add	r3, r1
 8001e36:	761a      	strb	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000e100 	.word	0xe000e100
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f1c3 0307 	rsb	r3, r3, #7
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	bf28      	it	cs
 8001e6a:	2304      	movcs	r3, #4
 8001e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3304      	adds	r3, #4
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d902      	bls.n	8001e7c <NVIC_EncodePriority+0x30>
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3b03      	subs	r3, #3
 8001e7a:	e000      	b.n	8001e7e <NVIC_EncodePriority+0x32>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	401a      	ands	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43d9      	mvns	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	4313      	orrs	r3, r2
         );
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	; 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec0:	d301      	bcc.n	8001ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e00f      	b.n	8001ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <SysTick_Config+0x40>)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ece:	210f      	movs	r1, #15
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed4:	f7ff ff90 	bl	8001df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <SysTick_Config+0x40>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ede:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <SysTick_Config+0x40>)
 8001ee0:	2207      	movs	r2, #7
 8001ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	e000e010 	.word	0xe000e010

08001ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ff49 	bl	8001d94 <__NVIC_SetPriorityGrouping>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f1c:	f7ff ff5e 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 8001f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	6978      	ldr	r0, [r7, #20]
 8001f28:	f7ff ff90 	bl	8001e4c <NVIC_EncodePriority>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff5f 	bl	8001df8 <__NVIC_SetPriority>
}
 8001f3a:	bf00      	nop
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff ffb0 	bl	8001eb0 <SysTick_Config>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f72:	e160      	b.n	8002236 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2101      	movs	r1, #1
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8152 	beq.w	8002230 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d005      	beq.n	8001fa4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d130      	bne.n	8002006 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001fda:	2201      	movs	r2, #1
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f003 0201 	and.w	r2, r3, #1
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b03      	cmp	r3, #3
 8002010:	d017      	beq.n	8002042 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d123      	bne.n	8002096 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	08da      	lsrs	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3208      	adds	r2, #8
 8002056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	08da      	lsrs	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	6939      	ldr	r1, [r7, #16]
 8002092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0203 	and.w	r2, r3, #3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80ac 	beq.w	8002230 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d8:	4b5e      	ldr	r3, [pc, #376]	; (8002254 <HAL_GPIO_Init+0x2f8>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a5d      	ldr	r2, [pc, #372]	; (8002254 <HAL_GPIO_Init+0x2f8>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6213      	str	r3, [r2, #32]
 80020e4:	4b5b      	ldr	r3, [pc, #364]	; (8002254 <HAL_GPIO_Init+0x2f8>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80020f0:	4a59      	ldr	r2, [pc, #356]	; (8002258 <HAL_GPIO_Init+0x2fc>)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	220f      	movs	r2, #15
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a51      	ldr	r2, [pc, #324]	; (800225c <HAL_GPIO_Init+0x300>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d025      	beq.n	8002168 <HAL_GPIO_Init+0x20c>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a50      	ldr	r2, [pc, #320]	; (8002260 <HAL_GPIO_Init+0x304>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d01f      	beq.n	8002164 <HAL_GPIO_Init+0x208>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a4f      	ldr	r2, [pc, #316]	; (8002264 <HAL_GPIO_Init+0x308>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d019      	beq.n	8002160 <HAL_GPIO_Init+0x204>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a4e      	ldr	r2, [pc, #312]	; (8002268 <HAL_GPIO_Init+0x30c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <HAL_GPIO_Init+0x200>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a4d      	ldr	r2, [pc, #308]	; (800226c <HAL_GPIO_Init+0x310>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00d      	beq.n	8002158 <HAL_GPIO_Init+0x1fc>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a4c      	ldr	r2, [pc, #304]	; (8002270 <HAL_GPIO_Init+0x314>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <HAL_GPIO_Init+0x1f8>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a4b      	ldr	r2, [pc, #300]	; (8002274 <HAL_GPIO_Init+0x318>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_GPIO_Init+0x1f4>
 800214c:	2306      	movs	r3, #6
 800214e:	e00c      	b.n	800216a <HAL_GPIO_Init+0x20e>
 8002150:	2307      	movs	r3, #7
 8002152:	e00a      	b.n	800216a <HAL_GPIO_Init+0x20e>
 8002154:	2305      	movs	r3, #5
 8002156:	e008      	b.n	800216a <HAL_GPIO_Init+0x20e>
 8002158:	2304      	movs	r3, #4
 800215a:	e006      	b.n	800216a <HAL_GPIO_Init+0x20e>
 800215c:	2303      	movs	r3, #3
 800215e:	e004      	b.n	800216a <HAL_GPIO_Init+0x20e>
 8002160:	2302      	movs	r3, #2
 8002162:	e002      	b.n	800216a <HAL_GPIO_Init+0x20e>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_GPIO_Init+0x20e>
 8002168:	2300      	movs	r3, #0
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	f002 0203 	and.w	r2, r2, #3
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	4093      	lsls	r3, r2
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800217a:	4937      	ldr	r1, [pc, #220]	; (8002258 <HAL_GPIO_Init+0x2fc>)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	3302      	adds	r3, #2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002188:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <HAL_GPIO_Init+0x31c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43db      	mvns	r3, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021ac:	4a32      	ldr	r2, [pc, #200]	; (8002278 <HAL_GPIO_Init+0x31c>)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_GPIO_Init+0x31c>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021d6:	4a28      	ldr	r2, [pc, #160]	; (8002278 <HAL_GPIO_Init+0x31c>)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021dc:	4b26      	ldr	r3, [pc, #152]	; (8002278 <HAL_GPIO_Init+0x31c>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002200:	4a1d      	ldr	r2, [pc, #116]	; (8002278 <HAL_GPIO_Init+0x31c>)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002206:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <HAL_GPIO_Init+0x31c>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800222a:	4a13      	ldr	r2, [pc, #76]	; (8002278 <HAL_GPIO_Init+0x31c>)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3301      	adds	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	f47f ae97 	bne.w	8001f74 <HAL_GPIO_Init+0x18>
  }
}
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800
 8002258:	40010000 	.word	0x40010000
 800225c:	40020000 	.word	0x40020000
 8002260:	40020400 	.word	0x40020400
 8002264:	40020800 	.word	0x40020800
 8002268:	40020c00 	.word	0x40020c00
 800226c:	40021000 	.word	0x40021000
 8002270:	40021400 	.word	0x40021400
 8002274:	40021800 	.word	0x40021800
 8002278:	40010400 	.word	0x40010400

0800227c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	e001      	b.n	800229e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800229e:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	807b      	strh	r3, [r7, #2]
 80022b6:	4613      	mov	r3, r2
 80022b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022ba:	787b      	ldrb	r3, [r7, #1]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022c0:	887a      	ldrh	r2, [r7, #2]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80022c6:	e003      	b.n	80022d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80022c8:	887b      	ldrh	r3, [r7, #2]
 80022ca:	041a      	lsls	r2, r3, #16
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	619a      	str	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e12b      	b.n	8002546 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe fef8 	bl	80010f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2224      	movs	r2, #36	; 0x24
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800232e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800233e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002340:	f001 fa80 	bl	8003844 <HAL_RCC_GetPCLK1Freq>
 8002344:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4a81      	ldr	r2, [pc, #516]	; (8002550 <HAL_I2C_Init+0x274>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d807      	bhi.n	8002360 <HAL_I2C_Init+0x84>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4a80      	ldr	r2, [pc, #512]	; (8002554 <HAL_I2C_Init+0x278>)
 8002354:	4293      	cmp	r3, r2
 8002356:	bf94      	ite	ls
 8002358:	2301      	movls	r3, #1
 800235a:	2300      	movhi	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	e006      	b.n	800236e <HAL_I2C_Init+0x92>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4a7d      	ldr	r2, [pc, #500]	; (8002558 <HAL_I2C_Init+0x27c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	bf94      	ite	ls
 8002368:	2301      	movls	r3, #1
 800236a:	2300      	movhi	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e0e7      	b.n	8002546 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4a78      	ldr	r2, [pc, #480]	; (800255c <HAL_I2C_Init+0x280>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	0c9b      	lsrs	r3, r3, #18
 8002380:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4a6a      	ldr	r2, [pc, #424]	; (8002550 <HAL_I2C_Init+0x274>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d802      	bhi.n	80023b0 <HAL_I2C_Init+0xd4>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3301      	adds	r3, #1
 80023ae:	e009      	b.n	80023c4 <HAL_I2C_Init+0xe8>
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	4a69      	ldr	r2, [pc, #420]	; (8002560 <HAL_I2C_Init+0x284>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	099b      	lsrs	r3, r3, #6
 80023c2:	3301      	adds	r3, #1
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	430b      	orrs	r3, r1
 80023ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	495c      	ldr	r1, [pc, #368]	; (8002550 <HAL_I2C_Init+0x274>)
 80023e0:	428b      	cmp	r3, r1
 80023e2:	d819      	bhi.n	8002418 <HAL_I2C_Init+0x13c>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1e59      	subs	r1, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80023f2:	1c59      	adds	r1, r3, #1
 80023f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023f8:	400b      	ands	r3, r1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_I2C_Init+0x138>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1e59      	subs	r1, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fbb1 f3f3 	udiv	r3, r1, r3
 800240c:	3301      	adds	r3, #1
 800240e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002412:	e051      	b.n	80024b8 <HAL_I2C_Init+0x1dc>
 8002414:	2304      	movs	r3, #4
 8002416:	e04f      	b.n	80024b8 <HAL_I2C_Init+0x1dc>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d111      	bne.n	8002444 <HAL_I2C_Init+0x168>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1e58      	subs	r0, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	440b      	add	r3, r1
 800242e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002432:	3301      	adds	r3, #1
 8002434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e012      	b.n	800246a <HAL_I2C_Init+0x18e>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1e58      	subs	r0, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	0099      	lsls	r1, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	fbb0 f3f3 	udiv	r3, r0, r3
 800245a:	3301      	adds	r3, #1
 800245c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf0c      	ite	eq
 8002464:	2301      	moveq	r3, #1
 8002466:	2300      	movne	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_I2C_Init+0x196>
 800246e:	2301      	movs	r3, #1
 8002470:	e022      	b.n	80024b8 <HAL_I2C_Init+0x1dc>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10e      	bne.n	8002498 <HAL_I2C_Init+0x1bc>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1e58      	subs	r0, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	440b      	add	r3, r1
 8002488:	fbb0 f3f3 	udiv	r3, r0, r3
 800248c:	3301      	adds	r3, #1
 800248e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002496:	e00f      	b.n	80024b8 <HAL_I2C_Init+0x1dc>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1e58      	subs	r0, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	0099      	lsls	r1, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ae:	3301      	adds	r3, #1
 80024b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	6809      	ldr	r1, [r1, #0]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69da      	ldr	r2, [r3, #28]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6911      	ldr	r1, [r2, #16]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68d2      	ldr	r2, [r2, #12]
 80024f2:	4311      	orrs	r1, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	430b      	orrs	r3, r1
 80024fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	000186a0 	.word	0x000186a0
 8002554:	001e847f 	.word	0x001e847f
 8002558:	003d08ff 	.word	0x003d08ff
 800255c:	431bde83 	.word	0x431bde83
 8002560:	10624dd3 	.word	0x10624dd3

08002564 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	461a      	mov	r2, r3
 8002570:	460b      	mov	r3, r1
 8002572:	817b      	strh	r3, [r7, #10]
 8002574:	4613      	mov	r3, r2
 8002576:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7ff fbe0 	bl	8001d3c <HAL_GetTick>
 800257c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b20      	cmp	r3, #32
 8002588:	f040 80e0 	bne.w	800274c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2319      	movs	r3, #25
 8002592:	2201      	movs	r2, #1
 8002594:	4970      	ldr	r1, [pc, #448]	; (8002758 <HAL_I2C_Master_Transmit+0x1f4>)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fa92 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025a2:	2302      	movs	r3, #2
 80025a4:	e0d3      	b.n	800274e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_I2C_Master_Transmit+0x50>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e0cc      	b.n	800274e <HAL_I2C_Master_Transmit+0x1ea>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d007      	beq.n	80025da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2221      	movs	r2, #33	; 0x21
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2210      	movs	r2, #16
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	893a      	ldrh	r2, [r7, #8]
 800260a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4a50      	ldr	r2, [pc, #320]	; (800275c <HAL_I2C_Master_Transmit+0x1f8>)
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800261c:	8979      	ldrh	r1, [r7, #10]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	6a3a      	ldr	r2, [r7, #32]
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f9ca 	bl	80029bc <I2C_MasterRequestWrite>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e08d      	b.n	800274e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002648:	e066      	b.n	8002718 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	6a39      	ldr	r1, [r7, #32]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fb0c 	bl	8002c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00d      	beq.n	8002676 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	2b04      	cmp	r3, #4
 8002660:	d107      	bne.n	8002672 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002670:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e06b      	b.n	800274e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	781a      	ldrb	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d11b      	bne.n	80026ec <HAL_I2C_Master_Transmit+0x188>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d017      	beq.n	80026ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	6a39      	ldr	r1, [r7, #32]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fafc 	bl	8002cee <I2C_WaitOnBTFFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00d      	beq.n	8002718 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	2b04      	cmp	r3, #4
 8002702:	d107      	bne.n	8002714 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002712:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e01a      	b.n	800274e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d194      	bne.n	800264a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	e000      	b.n	800274e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800274c:	2302      	movs	r3, #2
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	00100002 	.word	0x00100002
 800275c:	ffff0000 	.word	0xffff0000

08002760 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	460b      	mov	r3, r1
 800276e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002770:	f7ff fae4 	bl	8001d3c <HAL_GetTick>
 8002774:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002776:	2301      	movs	r3, #1
 8002778:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b20      	cmp	r3, #32
 8002784:	f040 8111 	bne.w	80029aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	2319      	movs	r3, #25
 800278e:	2201      	movs	r2, #1
 8002790:	4988      	ldr	r1, [pc, #544]	; (80029b4 <HAL_I2C_IsDeviceReady+0x254>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f994 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800279e:	2302      	movs	r3, #2
 80027a0:	e104      	b.n	80029ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_I2C_IsDeviceReady+0x50>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e0fd      	b.n	80029ac <HAL_I2C_IsDeviceReady+0x24c>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d007      	beq.n	80027d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0201 	orr.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2224      	movs	r2, #36	; 0x24
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4a70      	ldr	r2, [pc, #448]	; (80029b8 <HAL_I2C_IsDeviceReady+0x258>)
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002808:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2200      	movs	r2, #0
 8002812:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f952 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00d      	beq.n	800283e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002830:	d103      	bne.n	800283a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0b6      	b.n	80029ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800283e:	897b      	ldrh	r3, [r7, #10]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800284c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800284e:	f7ff fa75 	bl	8001d3c <HAL_GetTick>
 8002852:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b02      	cmp	r3, #2
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002878:	bf0c      	ite	eq
 800287a:	2301      	moveq	r3, #1
 800287c:	2300      	movne	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002882:	e025      	b.n	80028d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002884:	f7ff fa5a 	bl	8001d3c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d302      	bcc.n	800289a <HAL_I2C_IsDeviceReady+0x13a>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	22a0      	movs	r2, #160	; 0xa0
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2ba0      	cmp	r3, #160	; 0xa0
 80028da:	d005      	beq.n	80028e8 <HAL_I2C_IsDeviceReady+0x188>
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d102      	bne.n	80028e8 <HAL_I2C_IsDeviceReady+0x188>
 80028e2:	7dbb      	ldrb	r3, [r7, #22]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0cd      	beq.n	8002884 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d129      	bne.n	8002952 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2319      	movs	r3, #25
 800292a:	2201      	movs	r2, #1
 800292c:	4921      	ldr	r1, [pc, #132]	; (80029b4 <HAL_I2C_IsDeviceReady+0x254>)
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f8c6 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e036      	b.n	80029ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e02c      	b.n	80029ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002960:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800296a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2319      	movs	r3, #25
 8002972:	2201      	movs	r2, #1
 8002974:	490f      	ldr	r1, [pc, #60]	; (80029b4 <HAL_I2C_IsDeviceReady+0x254>)
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f8a2 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e012      	b.n	80029ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	3301      	adds	r3, #1
 800298a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	f4ff af32 	bcc.w	80027fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
  }
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	00100002 	.word	0x00100002
 80029b8:	ffff0000 	.word	0xffff0000

080029bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	460b      	mov	r3, r1
 80029ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d006      	beq.n	80029e6 <I2C_MasterRequestWrite+0x2a>
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d003      	beq.n	80029e6 <I2C_MasterRequestWrite+0x2a>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029e4:	d108      	bne.n	80029f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e00b      	b.n	8002a10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	2b12      	cmp	r3, #18
 80029fe:	d107      	bne.n	8002a10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f84f 	bl	8002ac0 <I2C_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00d      	beq.n	8002a44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a36:	d103      	bne.n	8002a40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e035      	b.n	8002ab0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a4c:	d108      	bne.n	8002a60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a4e:	897b      	ldrh	r3, [r7, #10]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a5c:	611a      	str	r2, [r3, #16]
 8002a5e:	e01b      	b.n	8002a98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a60:	897b      	ldrh	r3, [r7, #10]
 8002a62:	11db      	asrs	r3, r3, #7
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	f003 0306 	and.w	r3, r3, #6
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f063 030f 	orn	r3, r3, #15
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	490e      	ldr	r1, [pc, #56]	; (8002ab8 <I2C_MasterRequestWrite+0xfc>)
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f875 	bl	8002b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e010      	b.n	8002ab0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a8e:	897b      	ldrh	r3, [r7, #10]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4907      	ldr	r1, [pc, #28]	; (8002abc <I2C_MasterRequestWrite+0x100>)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f865 	bl	8002b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	00010008 	.word	0x00010008
 8002abc:	00010002 	.word	0x00010002

08002ac0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ad0:	e025      	b.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d021      	beq.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ada:	f7ff f92f 	bl	8001d3c <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d302      	bcc.n	8002af0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d116      	bne.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f043 0220 	orr.w	r2, r3, #32
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e023      	b.n	8002b66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d10d      	bne.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4013      	ands	r3, r2
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf0c      	ite	eq
 8002b3a:	2301      	moveq	r3, #1
 8002b3c:	2300      	movne	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	e00c      	b.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	bf0c      	ite	eq
 8002b56:	2301      	moveq	r3, #1
 8002b58:	2300      	movne	r3, #0
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d0b6      	beq.n	8002ad2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b7c:	e051      	b.n	8002c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8c:	d123      	bne.n	8002bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ba6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f043 0204 	orr.w	r2, r3, #4
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e046      	b.n	8002c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d021      	beq.n	8002c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bde:	f7ff f8ad 	bl	8001d3c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d302      	bcc.n	8002bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d116      	bne.n	8002c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f043 0220 	orr.w	r2, r3, #32
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e020      	b.n	8002c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d10c      	bne.n	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4013      	ands	r3, r2
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	bf14      	ite	ne
 8002c3e:	2301      	movne	r3, #1
 8002c40:	2300      	moveq	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	e00b      	b.n	8002c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	43da      	mvns	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4013      	ands	r3, r2
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf14      	ite	ne
 8002c58:	2301      	movne	r3, #1
 8002c5a:	2300      	moveq	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d18d      	bne.n	8002b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c78:	e02d      	b.n	8002cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f878 	bl	8002d70 <I2C_IsAcknowledgeFailed>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e02d      	b.n	8002ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d021      	beq.n	8002cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c92:	f7ff f853 	bl	8001d3c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d116      	bne.n	8002cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f043 0220 	orr.w	r2, r3, #32
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e007      	b.n	8002ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	2b80      	cmp	r3, #128	; 0x80
 8002ce2:	d1ca      	bne.n	8002c7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cfa:	e02d      	b.n	8002d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f837 	bl	8002d70 <I2C_IsAcknowledgeFailed>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e02d      	b.n	8002d68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d12:	d021      	beq.n	8002d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d14:	f7ff f812 	bl	8001d3c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d302      	bcc.n	8002d2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d116      	bne.n	8002d58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	f043 0220 	orr.w	r2, r3, #32
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e007      	b.n	8002d68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d1ca      	bne.n	8002cfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d86:	d11b      	bne.n	8002dc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f043 0204 	orr.w	r2, r3, #4
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e31d      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dde:	4b94      	ldr	r3, [pc, #592]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de8:	4b91      	ldr	r3, [pc, #580]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d07b      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d006      	beq.n	8002e12 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2b0c      	cmp	r3, #12
 8002e08:	d10f      	bne.n	8002e2a <HAL_RCC_OscConfig+0x5e>
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e10:	d10b      	bne.n	8002e2a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e12:	4b87      	ldr	r3, [pc, #540]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d06a      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x128>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d166      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e2f7      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d106      	bne.n	8002e40 <HAL_RCC_OscConfig+0x74>
 8002e32:	4b7f      	ldr	r3, [pc, #508]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a7e      	ldr	r2, [pc, #504]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e02d      	b.n	8002e9c <HAL_RCC_OscConfig+0xd0>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10c      	bne.n	8002e62 <HAL_RCC_OscConfig+0x96>
 8002e48:	4b79      	ldr	r3, [pc, #484]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a78      	ldr	r2, [pc, #480]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b76      	ldr	r3, [pc, #472]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a75      	ldr	r2, [pc, #468]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	e01c      	b.n	8002e9c <HAL_RCC_OscConfig+0xd0>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b05      	cmp	r3, #5
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0xb8>
 8002e6a:	4b71      	ldr	r3, [pc, #452]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a70      	ldr	r2, [pc, #448]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b6e      	ldr	r3, [pc, #440]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a6d      	ldr	r2, [pc, #436]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	e00b      	b.n	8002e9c <HAL_RCC_OscConfig+0xd0>
 8002e84:	4b6a      	ldr	r3, [pc, #424]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a69      	ldr	r2, [pc, #420]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4b67      	ldr	r3, [pc, #412]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a66      	ldr	r2, [pc, #408]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d013      	beq.n	8002ecc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe ff4a 	bl	8001d3c <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eac:	f7fe ff46 	bl	8001d3c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e2ad      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ebe:	4b5c      	ldr	r3, [pc, #368]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0xe0>
 8002eca:	e014      	b.n	8002ef6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe ff36 	bl	8001d3c <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fe ff32 	bl	8001d3c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e299      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ee6:	4b52      	ldr	r3, [pc, #328]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x108>
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d05a      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d119      	bne.n	8002f42 <HAL_RCC_OscConfig+0x176>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d116      	bne.n	8002f42 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f14:	4b46      	ldr	r3, [pc, #280]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_OscConfig+0x160>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e276      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2c:	4b40      	ldr	r3, [pc, #256]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	493d      	ldr	r1, [pc, #244]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f40:	e03a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d020      	beq.n	8002f8c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f4a:	4b3a      	ldr	r3, [pc, #232]	; (8003034 <HAL_RCC_OscConfig+0x268>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fef4 	bl	8001d3c <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f58:	f7fe fef0 	bl	8001d3c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e257      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f6a:	4b31      	ldr	r3, [pc, #196]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	4b2e      	ldr	r3, [pc, #184]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	492a      	ldr	r1, [pc, #168]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
 8002f8a:	e015      	b.n	8002fb8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8c:	4b29      	ldr	r3, [pc, #164]	; (8003034 <HAL_RCC_OscConfig+0x268>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe fed3 	bl	8001d3c <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fe fecf 	bl	8001d3c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e236      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fac:	4b20      	ldr	r3, [pc, #128]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f0      	bne.n	8002f9a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80b8 	beq.w	8003136 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d170      	bne.n	80030ae <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fcc:	4b18      	ldr	r3, [pc, #96]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x218>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e21a      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1a      	ldr	r2, [r3, #32]
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d921      	bls.n	8003038 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fc4b 	bl	8003894 <RCC_SetFlashLatencyFromMSIRange>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e208      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003008:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4906      	ldr	r1, [pc, #24]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 8003016:	4313      	orrs	r3, r2
 8003018:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800301a:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	061b      	lsls	r3, r3, #24
 8003028:	4901      	ldr	r1, [pc, #4]	; (8003030 <HAL_RCC_OscConfig+0x264>)
 800302a:	4313      	orrs	r3, r2
 800302c:	604b      	str	r3, [r1, #4]
 800302e:	e020      	b.n	8003072 <HAL_RCC_OscConfig+0x2a6>
 8003030:	40023800 	.word	0x40023800
 8003034:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003038:	4ba4      	ldr	r3, [pc, #656]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	49a1      	ldr	r1, [pc, #644]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800304a:	4ba0      	ldr	r3, [pc, #640]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	061b      	lsls	r3, r3, #24
 8003058:	499c      	ldr	r1, [pc, #624]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fc16 	bl	8003894 <RCC_SetFlashLatencyFromMSIRange>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e1d3      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	0b5b      	lsrs	r3, r3, #13
 8003078:	3301      	adds	r3, #1
 800307a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003082:	4a92      	ldr	r2, [pc, #584]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 8003084:	6892      	ldr	r2, [r2, #8]
 8003086:	0912      	lsrs	r2, r2, #4
 8003088:	f002 020f 	and.w	r2, r2, #15
 800308c:	4990      	ldr	r1, [pc, #576]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 800308e:	5c8a      	ldrb	r2, [r1, r2]
 8003090:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003092:	4a90      	ldr	r2, [pc, #576]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 8003094:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003096:	4b90      	ldr	r3, [pc, #576]	; (80032d8 <HAL_RCC_OscConfig+0x50c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe fe02 	bl	8001ca4 <HAL_InitTick>
 80030a0:	4603      	mov	r3, r0
 80030a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d045      	beq.n	8003136 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	e1b5      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d029      	beq.n	800310a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030b6:	4b89      	ldr	r3, [pc, #548]	; (80032dc <HAL_RCC_OscConfig+0x510>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fe3e 	bl	8001d3c <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030c4:	f7fe fe3a 	bl	8001d3c <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e1a1      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80030d6:	4b7d      	ldr	r3, [pc, #500]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e2:	4b7a      	ldr	r3, [pc, #488]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4977      	ldr	r1, [pc, #476]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f4:	4b75      	ldr	r3, [pc, #468]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	061b      	lsls	r3, r3, #24
 8003102:	4972      	ldr	r1, [pc, #456]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
 8003108:	e015      	b.n	8003136 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800310a:	4b74      	ldr	r3, [pc, #464]	; (80032dc <HAL_RCC_OscConfig+0x510>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe fe14 	bl	8001d3c <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003118:	f7fe fe10 	bl	8001d3c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e177      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800312a:	4b68      	ldr	r3, [pc, #416]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d030      	beq.n	80031a4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d016      	beq.n	8003178 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314a:	4b65      	ldr	r3, [pc, #404]	; (80032e0 <HAL_RCC_OscConfig+0x514>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003150:	f7fe fdf4 	bl	8001d3c <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003158:	f7fe fdf0 	bl	8001d3c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e157      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800316a:	4b58      	ldr	r3, [pc, #352]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 800316c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x38c>
 8003176:	e015      	b.n	80031a4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003178:	4b59      	ldr	r3, [pc, #356]	; (80032e0 <HAL_RCC_OscConfig+0x514>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317e:	f7fe fddd 	bl	8001d3c <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003186:	f7fe fdd9 	bl	8001d3c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e140      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003198:	4b4c      	ldr	r3, [pc, #304]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f0      	bne.n	8003186 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80b5 	beq.w	800331c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b6:	4b45      	ldr	r3, [pc, #276]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10d      	bne.n	80031de <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	4b42      	ldr	r3, [pc, #264]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	4a41      	ldr	r2, [pc, #260]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 80031c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031cc:	6253      	str	r3, [r2, #36]	; 0x24
 80031ce:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031da:	2301      	movs	r3, #1
 80031dc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031de:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <HAL_RCC_OscConfig+0x518>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d118      	bne.n	800321c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ea:	4b3e      	ldr	r3, [pc, #248]	; (80032e4 <HAL_RCC_OscConfig+0x518>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a3d      	ldr	r2, [pc, #244]	; (80032e4 <HAL_RCC_OscConfig+0x518>)
 80031f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f6:	f7fe fda1 	bl	8001d3c <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fe:	f7fe fd9d 	bl	8001d3c <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b64      	cmp	r3, #100	; 0x64
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e104      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003210:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <HAL_RCC_OscConfig+0x518>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x466>
 8003224:	4b29      	ldr	r3, [pc, #164]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 8003226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003228:	4a28      	ldr	r2, [pc, #160]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 800322a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322e:	6353      	str	r3, [r2, #52]	; 0x34
 8003230:	e02d      	b.n	800328e <HAL_RCC_OscConfig+0x4c2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x488>
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 800323c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323e:	4a23      	ldr	r2, [pc, #140]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 8003240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003244:	6353      	str	r3, [r2, #52]	; 0x34
 8003246:	4b21      	ldr	r3, [pc, #132]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 8003248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324a:	4a20      	ldr	r2, [pc, #128]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 800324c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003250:	6353      	str	r3, [r2, #52]	; 0x34
 8003252:	e01c      	b.n	800328e <HAL_RCC_OscConfig+0x4c2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b05      	cmp	r3, #5
 800325a:	d10c      	bne.n	8003276 <HAL_RCC_OscConfig+0x4aa>
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 800325e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003260:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 8003262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003266:	6353      	str	r3, [r2, #52]	; 0x34
 8003268:	4b18      	ldr	r3, [pc, #96]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 800326a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326c:	4a17      	ldr	r2, [pc, #92]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 800326e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003272:	6353      	str	r3, [r2, #52]	; 0x34
 8003274:	e00b      	b.n	800328e <HAL_RCC_OscConfig+0x4c2>
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 8003278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327a:	4a14      	ldr	r2, [pc, #80]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 800327c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003280:	6353      	str	r3, [r2, #52]	; 0x34
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 8003284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003286:	4a11      	ldr	r2, [pc, #68]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 8003288:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800328c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d015      	beq.n	80032c2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003296:	f7fe fd51 	bl	8001d3c <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800329c:	e00a      	b.n	80032b4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329e:	f7fe fd4d 	bl	8001d3c <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e0b2      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_OscConfig+0x500>)
 80032b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0ee      	beq.n	800329e <HAL_RCC_OscConfig+0x4d2>
 80032c0:	e023      	b.n	800330a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c2:	f7fe fd3b 	bl	8001d3c <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032c8:	e019      	b.n	80032fe <HAL_RCC_OscConfig+0x532>
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800
 80032d0:	08006da4 	.word	0x08006da4
 80032d4:	20000000 	.word	0x20000000
 80032d8:	20000004 	.word	0x20000004
 80032dc:	42470020 	.word	0x42470020
 80032e0:	42470680 	.word	0x42470680
 80032e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fe fd28 	bl	8001d3c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e08d      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032fe:	4b49      	ldr	r3, [pc, #292]	; (8003424 <HAL_RCC_OscConfig+0x658>)
 8003300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ee      	bne.n	80032e8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800330a:	7ffb      	ldrb	r3, [r7, #31]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003310:	4b44      	ldr	r3, [pc, #272]	; (8003424 <HAL_RCC_OscConfig+0x658>)
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	4a43      	ldr	r2, [pc, #268]	; (8003424 <HAL_RCC_OscConfig+0x658>)
 8003316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	2b00      	cmp	r3, #0
 8003322:	d079      	beq.n	8003418 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d056      	beq.n	80033d8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	2b02      	cmp	r3, #2
 8003330:	d13b      	bne.n	80033aa <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003332:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <HAL_RCC_OscConfig+0x65c>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fd00 	bl	8001d3c <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003340:	f7fe fcfc 	bl	8001d3c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e063      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003352:	4b34      	ldr	r3, [pc, #208]	; (8003424 <HAL_RCC_OscConfig+0x658>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800335e:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_RCC_OscConfig+0x658>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	4319      	orrs	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	430b      	orrs	r3, r1
 8003376:	492b      	ldr	r1, [pc, #172]	; (8003424 <HAL_RCC_OscConfig+0x658>)
 8003378:	4313      	orrs	r3, r2
 800337a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800337c:	4b2a      	ldr	r3, [pc, #168]	; (8003428 <HAL_RCC_OscConfig+0x65c>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003382:	f7fe fcdb 	bl	8001d3c <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800338a:	f7fe fcd7 	bl	8001d3c <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e03e      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800339c:	4b21      	ldr	r3, [pc, #132]	; (8003424 <HAL_RCC_OscConfig+0x658>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x5be>
 80033a8:	e036      	b.n	8003418 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033aa:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <HAL_RCC_OscConfig+0x65c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe fcc4 	bl	8001d3c <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b8:	f7fe fcc0 	bl	8001d3c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e027      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033ca:	4b16      	ldr	r3, [pc, #88]	; (8003424 <HAL_RCC_OscConfig+0x658>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x5ec>
 80033d6:	e01f      	b.n	8003418 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e01a      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <HAL_RCC_OscConfig+0x658>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d10d      	bne.n	8003414 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d106      	bne.n	8003414 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800
 8003428:	42470060 	.word	0x42470060

0800342c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e11a      	b.n	8003676 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003440:	4b8f      	ldr	r3, [pc, #572]	; (8003680 <HAL_RCC_ClockConfig+0x254>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d919      	bls.n	8003482 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d105      	bne.n	8003460 <HAL_RCC_ClockConfig+0x34>
 8003454:	4b8a      	ldr	r3, [pc, #552]	; (8003680 <HAL_RCC_ClockConfig+0x254>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a89      	ldr	r2, [pc, #548]	; (8003680 <HAL_RCC_ClockConfig+0x254>)
 800345a:	f043 0304 	orr.w	r3, r3, #4
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	4b87      	ldr	r3, [pc, #540]	; (8003680 <HAL_RCC_ClockConfig+0x254>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 0201 	bic.w	r2, r3, #1
 8003468:	4985      	ldr	r1, [pc, #532]	; (8003680 <HAL_RCC_ClockConfig+0x254>)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	4313      	orrs	r3, r2
 800346e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003470:	4b83      	ldr	r3, [pc, #524]	; (8003680 <HAL_RCC_ClockConfig+0x254>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d001      	beq.n	8003482 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0f9      	b.n	8003676 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d008      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800348e:	4b7d      	ldr	r3, [pc, #500]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	497a      	ldr	r1, [pc, #488]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 800349c:	4313      	orrs	r3, r2
 800349e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 808e 	beq.w	80035ca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d107      	bne.n	80034c6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034b6:	4b73      	ldr	r3, [pc, #460]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d121      	bne.n	8003506 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e0d7      	b.n	8003676 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d107      	bne.n	80034de <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034ce:	4b6d      	ldr	r3, [pc, #436]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d115      	bne.n	8003506 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e0cb      	b.n	8003676 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034e6:	4b67      	ldr	r3, [pc, #412]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e0bf      	b.n	8003676 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80034f6:	4b63      	ldr	r3, [pc, #396]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0b7      	b.n	8003676 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003506:	4b5f      	ldr	r3, [pc, #380]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f023 0203 	bic.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	495c      	ldr	r1, [pc, #368]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 8003514:	4313      	orrs	r3, r2
 8003516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003518:	f7fe fc10 	bl	8001d3c <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d112      	bne.n	800354c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003526:	e00a      	b.n	800353e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003528:	f7fe fc08 	bl	8001d3c <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	; 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e09b      	b.n	8003676 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800353e:	4b51      	ldr	r3, [pc, #324]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b08      	cmp	r3, #8
 8003548:	d1ee      	bne.n	8003528 <HAL_RCC_ClockConfig+0xfc>
 800354a:	e03e      	b.n	80035ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d112      	bne.n	800357a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003554:	e00a      	b.n	800356c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003556:	f7fe fbf1 	bl	8001d3c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f241 3288 	movw	r2, #5000	; 0x1388
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e084      	b.n	8003676 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800356c:	4b45      	ldr	r3, [pc, #276]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b0c      	cmp	r3, #12
 8003576:	d1ee      	bne.n	8003556 <HAL_RCC_ClockConfig+0x12a>
 8003578:	e027      	b.n	80035ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d11d      	bne.n	80035be <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003582:	e00a      	b.n	800359a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003584:	f7fe fbda 	bl	8001d3c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e06d      	b.n	8003676 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800359a:	4b3a      	ldr	r3, [pc, #232]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d1ee      	bne.n	8003584 <HAL_RCC_ClockConfig+0x158>
 80035a6:	e010      	b.n	80035ca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a8:	f7fe fbc8 	bl	8001d3c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e05b      	b.n	8003676 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80035be:	4b31      	ldr	r3, [pc, #196]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1ee      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ca:	4b2d      	ldr	r3, [pc, #180]	; (8003680 <HAL_RCC_ClockConfig+0x254>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d219      	bcs.n	800360c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d105      	bne.n	80035ea <HAL_RCC_ClockConfig+0x1be>
 80035de:	4b28      	ldr	r3, [pc, #160]	; (8003680 <HAL_RCC_ClockConfig+0x254>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a27      	ldr	r2, [pc, #156]	; (8003680 <HAL_RCC_ClockConfig+0x254>)
 80035e4:	f043 0304 	orr.w	r3, r3, #4
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b25      	ldr	r3, [pc, #148]	; (8003680 <HAL_RCC_ClockConfig+0x254>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 0201 	bic.w	r2, r3, #1
 80035f2:	4923      	ldr	r1, [pc, #140]	; (8003680 <HAL_RCC_ClockConfig+0x254>)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b21      	ldr	r3, [pc, #132]	; (8003680 <HAL_RCC_ClockConfig+0x254>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e034      	b.n	8003676 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003618:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4917      	ldr	r1, [pc, #92]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003636:	4b13      	ldr	r3, [pc, #76]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	490f      	ldr	r1, [pc, #60]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800364a:	f000 f823 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 800364e:	4602      	mov	r2, r0
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <HAL_RCC_ClockConfig+0x258>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	490b      	ldr	r1, [pc, #44]	; (8003688 <HAL_RCC_ClockConfig+0x25c>)
 800365c:	5ccb      	ldrb	r3, [r1, r3]
 800365e:	fa22 f303 	lsr.w	r3, r2, r3
 8003662:	4a0a      	ldr	r2, [pc, #40]	; (800368c <HAL_RCC_ClockConfig+0x260>)
 8003664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003666:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <HAL_RCC_ClockConfig+0x264>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fb1a 	bl	8001ca4 <HAL_InitTick>
 8003670:	4603      	mov	r3, r0
 8003672:	72fb      	strb	r3, [r7, #11]

  return status;
 8003674:	7afb      	ldrb	r3, [r7, #11]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40023c00 	.word	0x40023c00
 8003684:	40023800 	.word	0x40023800
 8003688:	08006da4 	.word	0x08006da4
 800368c:	20000000 	.word	0x20000000
 8003690:	20000004 	.word	0x20000004

08003694 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003694:	b5b0      	push	{r4, r5, r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800369a:	4b61      	ldr	r3, [pc, #388]	; (8003820 <HAL_RCC_GetSysClockFreq+0x18c>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d00d      	beq.n	80036c6 <HAL_RCC_GetSysClockFreq+0x32>
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	f200 80a4 	bhi.w	80037f8 <HAL_RCC_GetSysClockFreq+0x164>
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d002      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0x26>
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d003      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x2c>
 80036b8:	e09e      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036ba:	4b5a      	ldr	r3, [pc, #360]	; (8003824 <HAL_RCC_GetSysClockFreq+0x190>)
 80036bc:	613b      	str	r3, [r7, #16]
      break;
 80036be:	e0a9      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036c0:	4b59      	ldr	r3, [pc, #356]	; (8003828 <HAL_RCC_GetSysClockFreq+0x194>)
 80036c2:	613b      	str	r3, [r7, #16]
      break;
 80036c4:	e0a6      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	0c9b      	lsrs	r3, r3, #18
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	4a57      	ldr	r2, [pc, #348]	; (800382c <HAL_RCC_GetSysClockFreq+0x198>)
 80036d0:	5cd3      	ldrb	r3, [r2, r3]
 80036d2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	0d9b      	lsrs	r3, r3, #22
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	3301      	adds	r3, #1
 80036de:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036e0:	4b4f      	ldr	r3, [pc, #316]	; (8003820 <HAL_RCC_GetSysClockFreq+0x18c>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d041      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	461c      	mov	r4, r3
 80036f0:	f04f 0500 	mov.w	r5, #0
 80036f4:	4620      	mov	r0, r4
 80036f6:	4629      	mov	r1, r5
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	014b      	lsls	r3, r1, #5
 8003702:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003706:	0142      	lsls	r2, r0, #5
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	1b00      	subs	r0, r0, r4
 800370e:	eb61 0105 	sbc.w	r1, r1, r5
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	018b      	lsls	r3, r1, #6
 800371c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003720:	0182      	lsls	r2, r0, #6
 8003722:	1a12      	subs	r2, r2, r0
 8003724:	eb63 0301 	sbc.w	r3, r3, r1
 8003728:	f04f 0000 	mov.w	r0, #0
 800372c:	f04f 0100 	mov.w	r1, #0
 8003730:	00d9      	lsls	r1, r3, #3
 8003732:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003736:	00d0      	lsls	r0, r2, #3
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	1912      	adds	r2, r2, r4
 800373e:	eb45 0303 	adc.w	r3, r5, r3
 8003742:	f04f 0000 	mov.w	r0, #0
 8003746:	f04f 0100 	mov.w	r1, #0
 800374a:	0259      	lsls	r1, r3, #9
 800374c:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003750:	0250      	lsls	r0, r2, #9
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4610      	mov	r0, r2
 8003758:	4619      	mov	r1, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	461a      	mov	r2, r3
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	f7fd f9f9 	bl	8000b58 <__aeabi_uldivmod>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4613      	mov	r3, r2
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	e040      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	461c      	mov	r4, r3
 8003774:	f04f 0500 	mov.w	r5, #0
 8003778:	4620      	mov	r0, r4
 800377a:	4629      	mov	r1, r5
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	014b      	lsls	r3, r1, #5
 8003786:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800378a:	0142      	lsls	r2, r0, #5
 800378c:	4610      	mov	r0, r2
 800378e:	4619      	mov	r1, r3
 8003790:	1b00      	subs	r0, r0, r4
 8003792:	eb61 0105 	sbc.w	r1, r1, r5
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	018b      	lsls	r3, r1, #6
 80037a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037a4:	0182      	lsls	r2, r0, #6
 80037a6:	1a12      	subs	r2, r2, r0
 80037a8:	eb63 0301 	sbc.w	r3, r3, r1
 80037ac:	f04f 0000 	mov.w	r0, #0
 80037b0:	f04f 0100 	mov.w	r1, #0
 80037b4:	00d9      	lsls	r1, r3, #3
 80037b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037ba:	00d0      	lsls	r0, r2, #3
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	1912      	adds	r2, r2, r4
 80037c2:	eb45 0303 	adc.w	r3, r5, r3
 80037c6:	f04f 0000 	mov.w	r0, #0
 80037ca:	f04f 0100 	mov.w	r1, #0
 80037ce:	0299      	lsls	r1, r3, #10
 80037d0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037d4:	0290      	lsls	r0, r2, #10
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	461a      	mov	r2, r3
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	f7fd f9b7 	bl	8000b58 <__aeabi_uldivmod>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4613      	mov	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	613b      	str	r3, [r7, #16]
      break;
 80037f6:	e00d      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_GetSysClockFreq+0x18c>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	0b5b      	lsrs	r3, r3, #13
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	3301      	adds	r3, #1
 8003808:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	613b      	str	r3, [r7, #16]
      break;
 8003812:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003814:	693b      	ldr	r3, [r7, #16]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bdb0      	pop	{r4, r5, r7, pc}
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	00f42400 	.word	0x00f42400
 8003828:	007a1200 	.word	0x007a1200
 800382c:	08006d98 	.word	0x08006d98

08003830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003834:	4b02      	ldr	r3, [pc, #8]	; (8003840 <HAL_RCC_GetHCLKFreq+0x10>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	20000000 	.word	0x20000000

08003844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003848:	f7ff fff2 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4903      	ldr	r1, [pc, #12]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	08006db4 	.word	0x08006db4

0800386c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003870:	f7ff ffde 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	0adb      	lsrs	r3, r3, #11
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4903      	ldr	r1, [pc, #12]	; (8003890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003888:	4618      	mov	r0, r3
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40023800 	.word	0x40023800
 8003890:	08006db4 	.word	0x08006db4

08003894 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800389c:	2300      	movs	r3, #0
 800389e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038a0:	4b29      	ldr	r3, [pc, #164]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d12c      	bne.n	8003906 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038ac:	4b26      	ldr	r3, [pc, #152]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80038b8:	4b24      	ldr	r3, [pc, #144]	; (800394c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	e016      	b.n	80038f2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c4:	4b20      	ldr	r3, [pc, #128]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	4a1f      	ldr	r2, [pc, #124]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ce:	6253      	str	r3, [r2, #36]	; 0x24
 80038d0:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80038dc:	4b1b      	ldr	r3, [pc, #108]	; (800394c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80038e4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e6:	4b18      	ldr	r3, [pc, #96]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	4a17      	ldr	r2, [pc, #92]	; (8003948 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80038ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80038f8:	d105      	bne.n	8003906 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003900:	d101      	bne.n	8003906 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003902:	2301      	movs	r3, #1
 8003904:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d105      	bne.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800390c:	4b10      	ldr	r3, [pc, #64]	; (8003950 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0f      	ldr	r2, [pc, #60]	; (8003950 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003912:	f043 0304 	orr.w	r3, r3, #4
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f023 0201 	bic.w	r2, r3, #1
 8003920:	490b      	ldr	r1, [pc, #44]	; (8003950 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	429a      	cmp	r2, r3
 8003934:	d001      	beq.n	800393a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800
 800394c:	40007000 	.word	0x40007000
 8003950:	40023c00 	.word	0x40023c00

08003954 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e039      	b.n	80039dc <HAL_TIM_OnePulse_Init+0x88>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d106      	bne.n	8003982 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7fe f899 	bl	8001ab4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2202      	movs	r2, #2
 8003986:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3304      	adds	r3, #4
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f000 f825 	bl	80039e4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0208 	bic.w	r2, r2, #8
 80039a8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6819      	ldr	r1, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fa:	d00f      	beq.n	8003a1c <TIM_Base_SetConfig+0x38>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a2b      	ldr	r2, [pc, #172]	; (8003aac <TIM_Base_SetConfig+0xc8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00b      	beq.n	8003a1c <TIM_Base_SetConfig+0x38>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a2a      	ldr	r2, [pc, #168]	; (8003ab0 <TIM_Base_SetConfig+0xcc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d007      	beq.n	8003a1c <TIM_Base_SetConfig+0x38>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a29      	ldr	r2, [pc, #164]	; (8003ab4 <TIM_Base_SetConfig+0xd0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d003      	beq.n	8003a1c <TIM_Base_SetConfig+0x38>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a28      	ldr	r2, [pc, #160]	; (8003ab8 <TIM_Base_SetConfig+0xd4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d108      	bne.n	8003a2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a34:	d017      	beq.n	8003a66 <TIM_Base_SetConfig+0x82>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a1c      	ldr	r2, [pc, #112]	; (8003aac <TIM_Base_SetConfig+0xc8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <TIM_Base_SetConfig+0x82>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <TIM_Base_SetConfig+0xcc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00f      	beq.n	8003a66 <TIM_Base_SetConfig+0x82>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1a      	ldr	r2, [pc, #104]	; (8003ab4 <TIM_Base_SetConfig+0xd0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00b      	beq.n	8003a66 <TIM_Base_SetConfig+0x82>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a19      	ldr	r2, [pc, #100]	; (8003ab8 <TIM_Base_SetConfig+0xd4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d007      	beq.n	8003a66 <TIM_Base_SetConfig+0x82>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a18      	ldr	r2, [pc, #96]	; (8003abc <TIM_Base_SetConfig+0xd8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <TIM_Base_SetConfig+0x82>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a17      	ldr	r2, [pc, #92]	; (8003ac0 <TIM_Base_SetConfig+0xdc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d108      	bne.n	8003a78 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	615a      	str	r2, [r3, #20]
}
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40000c00 	.word	0x40000c00
 8003ab8:	40010800 	.word	0x40010800
 8003abc:	40010c00 	.word	0x40010c00
 8003ac0:	40011000 	.word	0x40011000

08003ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e046      	b.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1e:	d00e      	beq.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a13      	ldr	r2, [pc, #76]	; (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d009      	beq.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d004      	beq.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a10      	ldr	r2, [pc, #64]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d10c      	bne.n	8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	40000400 	.word	0x40000400
 8003b78:	40000800 	.word	0x40000800
 8003b7c:	40010800 	.word	0x40010800

08003b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e03f      	b.n	8003c12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fd fffa 	bl	8001ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2224      	movs	r2, #36	; 0x24
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f905 	bl	8003dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695a      	ldr	r2, [r3, #20]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b08a      	sub	sp, #40	; 0x28
 8003c1e:	af02      	add	r7, sp, #8
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d17c      	bne.n	8003d34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <HAL_UART_Transmit+0x2c>
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e075      	b.n	8003d36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_UART_Transmit+0x3e>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e06e      	b.n	8003d36 <HAL_UART_Transmit+0x11c>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2221      	movs	r2, #33	; 0x21
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c6e:	f7fe f865 	bl	8001d3c <HAL_GetTick>
 8003c72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	88fa      	ldrh	r2, [r7, #6]
 8003c78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	88fa      	ldrh	r2, [r7, #6]
 8003c7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c88:	d108      	bne.n	8003c9c <HAL_UART_Transmit+0x82>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d104      	bne.n	8003c9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	e003      	b.n	8003ca4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cac:	e02a      	b.n	8003d04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2180      	movs	r1, #128	; 0x80
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f840 	bl	8003d3e <UART_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e036      	b.n	8003d36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10b      	bne.n	8003ce6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	e007      	b.n	8003cf6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1cf      	bne.n	8003cae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2200      	movs	r2, #0
 8003d16:	2140      	movs	r1, #64	; 0x40
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f810 	bl	8003d3e <UART_WaitOnFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e006      	b.n	8003d36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e000      	b.n	8003d36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d34:	2302      	movs	r3, #2
  }
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3720      	adds	r7, #32
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d4e:	e02c      	b.n	8003daa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d56:	d028      	beq.n	8003daa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <UART_WaitOnFlagUntilTimeout+0x30>
 8003d5e:	f7fd ffed 	bl	8001d3c <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d21d      	bcs.n	8003daa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d7c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0201 	bic.w	r2, r2, #1
 8003d8c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e00f      	b.n	8003dca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4013      	ands	r3, r2
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	bf0c      	ite	eq
 8003dba:	2301      	moveq	r3, #1
 8003dbc:	2300      	movne	r3, #0
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d0c3      	beq.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e14:	f023 030c 	bic.w	r3, r3, #12
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699a      	ldr	r2, [r3, #24]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a55      	ldr	r2, [pc, #340]	; (8003f94 <UART_SetConfig+0x1c0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d103      	bne.n	8003e4a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e42:	f7ff fd13 	bl	800386c <HAL_RCC_GetPCLK2Freq>
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	e002      	b.n	8003e50 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e4a:	f7ff fcfb 	bl	8003844 <HAL_RCC_GetPCLK1Freq>
 8003e4e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e58:	d14c      	bne.n	8003ef4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	009a      	lsls	r2, r3, #2
 8003e64:	441a      	add	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	4a49      	ldr	r2, [pc, #292]	; (8003f98 <UART_SetConfig+0x1c4>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	0119      	lsls	r1, r3, #4
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	009a      	lsls	r2, r3, #2
 8003e84:	441a      	add	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e90:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <UART_SetConfig+0x1c4>)
 8003e92:	fba3 0302 	umull	r0, r3, r3, r2
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	2064      	movs	r0, #100	; 0x64
 8003e9a:	fb00 f303 	mul.w	r3, r0, r3
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	3332      	adds	r3, #50	; 0x32
 8003ea4:	4a3c      	ldr	r2, [pc, #240]	; (8003f98 <UART_SetConfig+0x1c4>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003eb2:	4419      	add	r1, r3
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	009a      	lsls	r2, r3, #2
 8003ebe:	441a      	add	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eca:	4b33      	ldr	r3, [pc, #204]	; (8003f98 <UART_SetConfig+0x1c4>)
 8003ecc:	fba3 0302 	umull	r0, r3, r3, r2
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	2064      	movs	r0, #100	; 0x64
 8003ed4:	fb00 f303 	mul.w	r3, r0, r3
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	3332      	adds	r3, #50	; 0x32
 8003ede:	4a2e      	ldr	r2, [pc, #184]	; (8003f98 <UART_SetConfig+0x1c4>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	f003 0207 	and.w	r2, r3, #7
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	440a      	add	r2, r1
 8003ef0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ef2:	e04a      	b.n	8003f8a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	009a      	lsls	r2, r3, #2
 8003efe:	441a      	add	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	4a23      	ldr	r2, [pc, #140]	; (8003f98 <UART_SetConfig+0x1c4>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	0119      	lsls	r1, r3, #4
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009a      	lsls	r2, r3, #2
 8003f1e:	441a      	add	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f2a:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <UART_SetConfig+0x1c4>)
 8003f2c:	fba3 0302 	umull	r0, r3, r3, r2
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	2064      	movs	r0, #100	; 0x64
 8003f34:	fb00 f303 	mul.w	r3, r0, r3
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	3332      	adds	r3, #50	; 0x32
 8003f3e:	4a16      	ldr	r2, [pc, #88]	; (8003f98 <UART_SetConfig+0x1c4>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f4a:	4419      	add	r1, r3
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009a      	lsls	r2, r3, #2
 8003f56:	441a      	add	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f62:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <UART_SetConfig+0x1c4>)
 8003f64:	fba3 0302 	umull	r0, r3, r3, r2
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	2064      	movs	r0, #100	; 0x64
 8003f6c:	fb00 f303 	mul.w	r3, r0, r3
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	3332      	adds	r3, #50	; 0x32
 8003f76:	4a08      	ldr	r2, [pc, #32]	; (8003f98 <UART_SetConfig+0x1c4>)
 8003f78:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	f003 020f 	and.w	r2, r3, #15
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	440a      	add	r2, r1
 8003f88:	609a      	str	r2, [r3, #8]
}
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40013800 	.word	0x40013800
 8003f98:	51eb851f 	.word	0x51eb851f

08003f9c <__errno>:
 8003f9c:	4b01      	ldr	r3, [pc, #4]	; (8003fa4 <__errno+0x8>)
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	2000000c 	.word	0x2000000c

08003fa8 <__libc_init_array>:
 8003fa8:	b570      	push	{r4, r5, r6, lr}
 8003faa:	2600      	movs	r6, #0
 8003fac:	4d0c      	ldr	r5, [pc, #48]	; (8003fe0 <__libc_init_array+0x38>)
 8003fae:	4c0d      	ldr	r4, [pc, #52]	; (8003fe4 <__libc_init_array+0x3c>)
 8003fb0:	1b64      	subs	r4, r4, r5
 8003fb2:	10a4      	asrs	r4, r4, #2
 8003fb4:	42a6      	cmp	r6, r4
 8003fb6:	d109      	bne.n	8003fcc <__libc_init_array+0x24>
 8003fb8:	f002 febc 	bl	8006d34 <_init>
 8003fbc:	2600      	movs	r6, #0
 8003fbe:	4d0a      	ldr	r5, [pc, #40]	; (8003fe8 <__libc_init_array+0x40>)
 8003fc0:	4c0a      	ldr	r4, [pc, #40]	; (8003fec <__libc_init_array+0x44>)
 8003fc2:	1b64      	subs	r4, r4, r5
 8003fc4:	10a4      	asrs	r4, r4, #2
 8003fc6:	42a6      	cmp	r6, r4
 8003fc8:	d105      	bne.n	8003fd6 <__libc_init_array+0x2e>
 8003fca:	bd70      	pop	{r4, r5, r6, pc}
 8003fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd0:	4798      	blx	r3
 8003fd2:	3601      	adds	r6, #1
 8003fd4:	e7ee      	b.n	8003fb4 <__libc_init_array+0xc>
 8003fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fda:	4798      	blx	r3
 8003fdc:	3601      	adds	r6, #1
 8003fde:	e7f2      	b.n	8003fc6 <__libc_init_array+0x1e>
 8003fe0:	080071a4 	.word	0x080071a4
 8003fe4:	080071a4 	.word	0x080071a4
 8003fe8:	080071a4 	.word	0x080071a4
 8003fec:	080071a8 	.word	0x080071a8

08003ff0 <memset>:
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	4402      	add	r2, r0
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d100      	bne.n	8003ffa <memset+0xa>
 8003ff8:	4770      	bx	lr
 8003ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8003ffe:	e7f9      	b.n	8003ff4 <memset+0x4>

08004000 <__cvt>:
 8004000:	2b00      	cmp	r3, #0
 8004002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004006:	461f      	mov	r7, r3
 8004008:	bfbb      	ittet	lt
 800400a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800400e:	461f      	movlt	r7, r3
 8004010:	2300      	movge	r3, #0
 8004012:	232d      	movlt	r3, #45	; 0x2d
 8004014:	b088      	sub	sp, #32
 8004016:	4614      	mov	r4, r2
 8004018:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800401a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800401c:	7013      	strb	r3, [r2, #0]
 800401e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004020:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004024:	f023 0820 	bic.w	r8, r3, #32
 8004028:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800402c:	d005      	beq.n	800403a <__cvt+0x3a>
 800402e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004032:	d100      	bne.n	8004036 <__cvt+0x36>
 8004034:	3501      	adds	r5, #1
 8004036:	2302      	movs	r3, #2
 8004038:	e000      	b.n	800403c <__cvt+0x3c>
 800403a:	2303      	movs	r3, #3
 800403c:	aa07      	add	r2, sp, #28
 800403e:	9204      	str	r2, [sp, #16]
 8004040:	aa06      	add	r2, sp, #24
 8004042:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004046:	e9cd 3500 	strd	r3, r5, [sp]
 800404a:	4622      	mov	r2, r4
 800404c:	463b      	mov	r3, r7
 800404e:	f000 fce7 	bl	8004a20 <_dtoa_r>
 8004052:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004056:	4606      	mov	r6, r0
 8004058:	d102      	bne.n	8004060 <__cvt+0x60>
 800405a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800405c:	07db      	lsls	r3, r3, #31
 800405e:	d522      	bpl.n	80040a6 <__cvt+0xa6>
 8004060:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004064:	eb06 0905 	add.w	r9, r6, r5
 8004068:	d110      	bne.n	800408c <__cvt+0x8c>
 800406a:	7833      	ldrb	r3, [r6, #0]
 800406c:	2b30      	cmp	r3, #48	; 0x30
 800406e:	d10a      	bne.n	8004086 <__cvt+0x86>
 8004070:	2200      	movs	r2, #0
 8004072:	2300      	movs	r3, #0
 8004074:	4620      	mov	r0, r4
 8004076:	4639      	mov	r1, r7
 8004078:	f7fc fcae 	bl	80009d8 <__aeabi_dcmpeq>
 800407c:	b918      	cbnz	r0, 8004086 <__cvt+0x86>
 800407e:	f1c5 0501 	rsb	r5, r5, #1
 8004082:	f8ca 5000 	str.w	r5, [sl]
 8004086:	f8da 3000 	ldr.w	r3, [sl]
 800408a:	4499      	add	r9, r3
 800408c:	2200      	movs	r2, #0
 800408e:	2300      	movs	r3, #0
 8004090:	4620      	mov	r0, r4
 8004092:	4639      	mov	r1, r7
 8004094:	f7fc fca0 	bl	80009d8 <__aeabi_dcmpeq>
 8004098:	b108      	cbz	r0, 800409e <__cvt+0x9e>
 800409a:	f8cd 901c 	str.w	r9, [sp, #28]
 800409e:	2230      	movs	r2, #48	; 0x30
 80040a0:	9b07      	ldr	r3, [sp, #28]
 80040a2:	454b      	cmp	r3, r9
 80040a4:	d307      	bcc.n	80040b6 <__cvt+0xb6>
 80040a6:	4630      	mov	r0, r6
 80040a8:	9b07      	ldr	r3, [sp, #28]
 80040aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80040ac:	1b9b      	subs	r3, r3, r6
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	b008      	add	sp, #32
 80040b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b6:	1c59      	adds	r1, r3, #1
 80040b8:	9107      	str	r1, [sp, #28]
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	e7f0      	b.n	80040a0 <__cvt+0xa0>

080040be <__exponent>:
 80040be:	4603      	mov	r3, r0
 80040c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040c2:	2900      	cmp	r1, #0
 80040c4:	f803 2b02 	strb.w	r2, [r3], #2
 80040c8:	bfb6      	itet	lt
 80040ca:	222d      	movlt	r2, #45	; 0x2d
 80040cc:	222b      	movge	r2, #43	; 0x2b
 80040ce:	4249      	neglt	r1, r1
 80040d0:	2909      	cmp	r1, #9
 80040d2:	7042      	strb	r2, [r0, #1]
 80040d4:	dd2b      	ble.n	800412e <__exponent+0x70>
 80040d6:	f10d 0407 	add.w	r4, sp, #7
 80040da:	46a4      	mov	ip, r4
 80040dc:	270a      	movs	r7, #10
 80040de:	fb91 f6f7 	sdiv	r6, r1, r7
 80040e2:	460a      	mov	r2, r1
 80040e4:	46a6      	mov	lr, r4
 80040e6:	fb07 1516 	mls	r5, r7, r6, r1
 80040ea:	2a63      	cmp	r2, #99	; 0x63
 80040ec:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80040f0:	4631      	mov	r1, r6
 80040f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80040f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80040fa:	dcf0      	bgt.n	80040de <__exponent+0x20>
 80040fc:	3130      	adds	r1, #48	; 0x30
 80040fe:	f1ae 0502 	sub.w	r5, lr, #2
 8004102:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004106:	4629      	mov	r1, r5
 8004108:	1c44      	adds	r4, r0, #1
 800410a:	4561      	cmp	r1, ip
 800410c:	d30a      	bcc.n	8004124 <__exponent+0x66>
 800410e:	f10d 0209 	add.w	r2, sp, #9
 8004112:	eba2 020e 	sub.w	r2, r2, lr
 8004116:	4565      	cmp	r5, ip
 8004118:	bf88      	it	hi
 800411a:	2200      	movhi	r2, #0
 800411c:	4413      	add	r3, r2
 800411e:	1a18      	subs	r0, r3, r0
 8004120:	b003      	add	sp, #12
 8004122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004124:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004128:	f804 2f01 	strb.w	r2, [r4, #1]!
 800412c:	e7ed      	b.n	800410a <__exponent+0x4c>
 800412e:	2330      	movs	r3, #48	; 0x30
 8004130:	3130      	adds	r1, #48	; 0x30
 8004132:	7083      	strb	r3, [r0, #2]
 8004134:	70c1      	strb	r1, [r0, #3]
 8004136:	1d03      	adds	r3, r0, #4
 8004138:	e7f1      	b.n	800411e <__exponent+0x60>
	...

0800413c <_printf_float>:
 800413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004140:	b091      	sub	sp, #68	; 0x44
 8004142:	460c      	mov	r4, r1
 8004144:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004148:	4616      	mov	r6, r2
 800414a:	461f      	mov	r7, r3
 800414c:	4605      	mov	r5, r0
 800414e:	f001 fa55 	bl	80055fc <_localeconv_r>
 8004152:	6803      	ldr	r3, [r0, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	9309      	str	r3, [sp, #36]	; 0x24
 8004158:	f7fc f812 	bl	8000180 <strlen>
 800415c:	2300      	movs	r3, #0
 800415e:	930e      	str	r3, [sp, #56]	; 0x38
 8004160:	f8d8 3000 	ldr.w	r3, [r8]
 8004164:	900a      	str	r0, [sp, #40]	; 0x28
 8004166:	3307      	adds	r3, #7
 8004168:	f023 0307 	bic.w	r3, r3, #7
 800416c:	f103 0208 	add.w	r2, r3, #8
 8004170:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004174:	f8d4 b000 	ldr.w	fp, [r4]
 8004178:	f8c8 2000 	str.w	r2, [r8]
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004184:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004188:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800418c:	930b      	str	r3, [sp, #44]	; 0x2c
 800418e:	f04f 32ff 	mov.w	r2, #4294967295
 8004192:	4640      	mov	r0, r8
 8004194:	4b9c      	ldr	r3, [pc, #624]	; (8004408 <_printf_float+0x2cc>)
 8004196:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004198:	f7fc fc50 	bl	8000a3c <__aeabi_dcmpun>
 800419c:	bb70      	cbnz	r0, 80041fc <_printf_float+0xc0>
 800419e:	f04f 32ff 	mov.w	r2, #4294967295
 80041a2:	4640      	mov	r0, r8
 80041a4:	4b98      	ldr	r3, [pc, #608]	; (8004408 <_printf_float+0x2cc>)
 80041a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041a8:	f7fc fc2a 	bl	8000a00 <__aeabi_dcmple>
 80041ac:	bb30      	cbnz	r0, 80041fc <_printf_float+0xc0>
 80041ae:	2200      	movs	r2, #0
 80041b0:	2300      	movs	r3, #0
 80041b2:	4640      	mov	r0, r8
 80041b4:	4651      	mov	r1, sl
 80041b6:	f7fc fc19 	bl	80009ec <__aeabi_dcmplt>
 80041ba:	b110      	cbz	r0, 80041c2 <_printf_float+0x86>
 80041bc:	232d      	movs	r3, #45	; 0x2d
 80041be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c2:	4b92      	ldr	r3, [pc, #584]	; (800440c <_printf_float+0x2d0>)
 80041c4:	4892      	ldr	r0, [pc, #584]	; (8004410 <_printf_float+0x2d4>)
 80041c6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80041ca:	bf94      	ite	ls
 80041cc:	4698      	movls	r8, r3
 80041ce:	4680      	movhi	r8, r0
 80041d0:	2303      	movs	r3, #3
 80041d2:	f04f 0a00 	mov.w	sl, #0
 80041d6:	6123      	str	r3, [r4, #16]
 80041d8:	f02b 0304 	bic.w	r3, fp, #4
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	4633      	mov	r3, r6
 80041e0:	4621      	mov	r1, r4
 80041e2:	4628      	mov	r0, r5
 80041e4:	9700      	str	r7, [sp, #0]
 80041e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80041e8:	f000 f9d4 	bl	8004594 <_printf_common>
 80041ec:	3001      	adds	r0, #1
 80041ee:	f040 8090 	bne.w	8004312 <_printf_float+0x1d6>
 80041f2:	f04f 30ff 	mov.w	r0, #4294967295
 80041f6:	b011      	add	sp, #68	; 0x44
 80041f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041fc:	4642      	mov	r2, r8
 80041fe:	4653      	mov	r3, sl
 8004200:	4640      	mov	r0, r8
 8004202:	4651      	mov	r1, sl
 8004204:	f7fc fc1a 	bl	8000a3c <__aeabi_dcmpun>
 8004208:	b148      	cbz	r0, 800421e <_printf_float+0xe2>
 800420a:	f1ba 0f00 	cmp.w	sl, #0
 800420e:	bfb8      	it	lt
 8004210:	232d      	movlt	r3, #45	; 0x2d
 8004212:	4880      	ldr	r0, [pc, #512]	; (8004414 <_printf_float+0x2d8>)
 8004214:	bfb8      	it	lt
 8004216:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800421a:	4b7f      	ldr	r3, [pc, #508]	; (8004418 <_printf_float+0x2dc>)
 800421c:	e7d3      	b.n	80041c6 <_printf_float+0x8a>
 800421e:	6863      	ldr	r3, [r4, #4]
 8004220:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	d142      	bne.n	80042ae <_printf_float+0x172>
 8004228:	2306      	movs	r3, #6
 800422a:	6063      	str	r3, [r4, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	9206      	str	r2, [sp, #24]
 8004230:	aa0e      	add	r2, sp, #56	; 0x38
 8004232:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004236:	aa0d      	add	r2, sp, #52	; 0x34
 8004238:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800423c:	9203      	str	r2, [sp, #12]
 800423e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004242:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004246:	6023      	str	r3, [r4, #0]
 8004248:	6863      	ldr	r3, [r4, #4]
 800424a:	4642      	mov	r2, r8
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	4628      	mov	r0, r5
 8004250:	4653      	mov	r3, sl
 8004252:	910b      	str	r1, [sp, #44]	; 0x2c
 8004254:	f7ff fed4 	bl	8004000 <__cvt>
 8004258:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800425a:	4680      	mov	r8, r0
 800425c:	2947      	cmp	r1, #71	; 0x47
 800425e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004260:	d108      	bne.n	8004274 <_printf_float+0x138>
 8004262:	1cc8      	adds	r0, r1, #3
 8004264:	db02      	blt.n	800426c <_printf_float+0x130>
 8004266:	6863      	ldr	r3, [r4, #4]
 8004268:	4299      	cmp	r1, r3
 800426a:	dd40      	ble.n	80042ee <_printf_float+0x1b2>
 800426c:	f1a9 0902 	sub.w	r9, r9, #2
 8004270:	fa5f f989 	uxtb.w	r9, r9
 8004274:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004278:	d81f      	bhi.n	80042ba <_printf_float+0x17e>
 800427a:	464a      	mov	r2, r9
 800427c:	3901      	subs	r1, #1
 800427e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004282:	910d      	str	r1, [sp, #52]	; 0x34
 8004284:	f7ff ff1b 	bl	80040be <__exponent>
 8004288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800428a:	4682      	mov	sl, r0
 800428c:	1813      	adds	r3, r2, r0
 800428e:	2a01      	cmp	r2, #1
 8004290:	6123      	str	r3, [r4, #16]
 8004292:	dc02      	bgt.n	800429a <_printf_float+0x15e>
 8004294:	6822      	ldr	r2, [r4, #0]
 8004296:	07d2      	lsls	r2, r2, #31
 8004298:	d501      	bpl.n	800429e <_printf_float+0x162>
 800429a:	3301      	adds	r3, #1
 800429c:	6123      	str	r3, [r4, #16]
 800429e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d09b      	beq.n	80041de <_printf_float+0xa2>
 80042a6:	232d      	movs	r3, #45	; 0x2d
 80042a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ac:	e797      	b.n	80041de <_printf_float+0xa2>
 80042ae:	2947      	cmp	r1, #71	; 0x47
 80042b0:	d1bc      	bne.n	800422c <_printf_float+0xf0>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1ba      	bne.n	800422c <_printf_float+0xf0>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e7b7      	b.n	800422a <_printf_float+0xee>
 80042ba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80042be:	d118      	bne.n	80042f2 <_printf_float+0x1b6>
 80042c0:	2900      	cmp	r1, #0
 80042c2:	6863      	ldr	r3, [r4, #4]
 80042c4:	dd0b      	ble.n	80042de <_printf_float+0x1a2>
 80042c6:	6121      	str	r1, [r4, #16]
 80042c8:	b913      	cbnz	r3, 80042d0 <_printf_float+0x194>
 80042ca:	6822      	ldr	r2, [r4, #0]
 80042cc:	07d0      	lsls	r0, r2, #31
 80042ce:	d502      	bpl.n	80042d6 <_printf_float+0x19a>
 80042d0:	3301      	adds	r3, #1
 80042d2:	440b      	add	r3, r1
 80042d4:	6123      	str	r3, [r4, #16]
 80042d6:	f04f 0a00 	mov.w	sl, #0
 80042da:	65a1      	str	r1, [r4, #88]	; 0x58
 80042dc:	e7df      	b.n	800429e <_printf_float+0x162>
 80042de:	b913      	cbnz	r3, 80042e6 <_printf_float+0x1aa>
 80042e0:	6822      	ldr	r2, [r4, #0]
 80042e2:	07d2      	lsls	r2, r2, #31
 80042e4:	d501      	bpl.n	80042ea <_printf_float+0x1ae>
 80042e6:	3302      	adds	r3, #2
 80042e8:	e7f4      	b.n	80042d4 <_printf_float+0x198>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e7f2      	b.n	80042d4 <_printf_float+0x198>
 80042ee:	f04f 0967 	mov.w	r9, #103	; 0x67
 80042f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042f4:	4299      	cmp	r1, r3
 80042f6:	db05      	blt.n	8004304 <_printf_float+0x1c8>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	6121      	str	r1, [r4, #16]
 80042fc:	07d8      	lsls	r0, r3, #31
 80042fe:	d5ea      	bpl.n	80042d6 <_printf_float+0x19a>
 8004300:	1c4b      	adds	r3, r1, #1
 8004302:	e7e7      	b.n	80042d4 <_printf_float+0x198>
 8004304:	2900      	cmp	r1, #0
 8004306:	bfcc      	ite	gt
 8004308:	2201      	movgt	r2, #1
 800430a:	f1c1 0202 	rsble	r2, r1, #2
 800430e:	4413      	add	r3, r2
 8004310:	e7e0      	b.n	80042d4 <_printf_float+0x198>
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	055a      	lsls	r2, r3, #21
 8004316:	d407      	bmi.n	8004328 <_printf_float+0x1ec>
 8004318:	6923      	ldr	r3, [r4, #16]
 800431a:	4642      	mov	r2, r8
 800431c:	4631      	mov	r1, r6
 800431e:	4628      	mov	r0, r5
 8004320:	47b8      	blx	r7
 8004322:	3001      	adds	r0, #1
 8004324:	d12b      	bne.n	800437e <_printf_float+0x242>
 8004326:	e764      	b.n	80041f2 <_printf_float+0xb6>
 8004328:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800432c:	f240 80dd 	bls.w	80044ea <_printf_float+0x3ae>
 8004330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004334:	2200      	movs	r2, #0
 8004336:	2300      	movs	r3, #0
 8004338:	f7fc fb4e 	bl	80009d8 <__aeabi_dcmpeq>
 800433c:	2800      	cmp	r0, #0
 800433e:	d033      	beq.n	80043a8 <_printf_float+0x26c>
 8004340:	2301      	movs	r3, #1
 8004342:	4631      	mov	r1, r6
 8004344:	4628      	mov	r0, r5
 8004346:	4a35      	ldr	r2, [pc, #212]	; (800441c <_printf_float+0x2e0>)
 8004348:	47b8      	blx	r7
 800434a:	3001      	adds	r0, #1
 800434c:	f43f af51 	beq.w	80041f2 <_printf_float+0xb6>
 8004350:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004354:	429a      	cmp	r2, r3
 8004356:	db02      	blt.n	800435e <_printf_float+0x222>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	07d8      	lsls	r0, r3, #31
 800435c:	d50f      	bpl.n	800437e <_printf_float+0x242>
 800435e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004362:	4631      	mov	r1, r6
 8004364:	4628      	mov	r0, r5
 8004366:	47b8      	blx	r7
 8004368:	3001      	adds	r0, #1
 800436a:	f43f af42 	beq.w	80041f2 <_printf_float+0xb6>
 800436e:	f04f 0800 	mov.w	r8, #0
 8004372:	f104 091a 	add.w	r9, r4, #26
 8004376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004378:	3b01      	subs	r3, #1
 800437a:	4543      	cmp	r3, r8
 800437c:	dc09      	bgt.n	8004392 <_printf_float+0x256>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	079b      	lsls	r3, r3, #30
 8004382:	f100 8102 	bmi.w	800458a <_printf_float+0x44e>
 8004386:	68e0      	ldr	r0, [r4, #12]
 8004388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800438a:	4298      	cmp	r0, r3
 800438c:	bfb8      	it	lt
 800438e:	4618      	movlt	r0, r3
 8004390:	e731      	b.n	80041f6 <_printf_float+0xba>
 8004392:	2301      	movs	r3, #1
 8004394:	464a      	mov	r2, r9
 8004396:	4631      	mov	r1, r6
 8004398:	4628      	mov	r0, r5
 800439a:	47b8      	blx	r7
 800439c:	3001      	adds	r0, #1
 800439e:	f43f af28 	beq.w	80041f2 <_printf_float+0xb6>
 80043a2:	f108 0801 	add.w	r8, r8, #1
 80043a6:	e7e6      	b.n	8004376 <_printf_float+0x23a>
 80043a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	dc38      	bgt.n	8004420 <_printf_float+0x2e4>
 80043ae:	2301      	movs	r3, #1
 80043b0:	4631      	mov	r1, r6
 80043b2:	4628      	mov	r0, r5
 80043b4:	4a19      	ldr	r2, [pc, #100]	; (800441c <_printf_float+0x2e0>)
 80043b6:	47b8      	blx	r7
 80043b8:	3001      	adds	r0, #1
 80043ba:	f43f af1a 	beq.w	80041f2 <_printf_float+0xb6>
 80043be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043c2:	4313      	orrs	r3, r2
 80043c4:	d102      	bne.n	80043cc <_printf_float+0x290>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	07d9      	lsls	r1, r3, #31
 80043ca:	d5d8      	bpl.n	800437e <_printf_float+0x242>
 80043cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043d0:	4631      	mov	r1, r6
 80043d2:	4628      	mov	r0, r5
 80043d4:	47b8      	blx	r7
 80043d6:	3001      	adds	r0, #1
 80043d8:	f43f af0b 	beq.w	80041f2 <_printf_float+0xb6>
 80043dc:	f04f 0900 	mov.w	r9, #0
 80043e0:	f104 0a1a 	add.w	sl, r4, #26
 80043e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043e6:	425b      	negs	r3, r3
 80043e8:	454b      	cmp	r3, r9
 80043ea:	dc01      	bgt.n	80043f0 <_printf_float+0x2b4>
 80043ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043ee:	e794      	b.n	800431a <_printf_float+0x1de>
 80043f0:	2301      	movs	r3, #1
 80043f2:	4652      	mov	r2, sl
 80043f4:	4631      	mov	r1, r6
 80043f6:	4628      	mov	r0, r5
 80043f8:	47b8      	blx	r7
 80043fa:	3001      	adds	r0, #1
 80043fc:	f43f aef9 	beq.w	80041f2 <_printf_float+0xb6>
 8004400:	f109 0901 	add.w	r9, r9, #1
 8004404:	e7ee      	b.n	80043e4 <_printf_float+0x2a8>
 8004406:	bf00      	nop
 8004408:	7fefffff 	.word	0x7fefffff
 800440c:	08006dc0 	.word	0x08006dc0
 8004410:	08006dc4 	.word	0x08006dc4
 8004414:	08006dcc 	.word	0x08006dcc
 8004418:	08006dc8 	.word	0x08006dc8
 800441c:	08006dd0 	.word	0x08006dd0
 8004420:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004424:	429a      	cmp	r2, r3
 8004426:	bfa8      	it	ge
 8004428:	461a      	movge	r2, r3
 800442a:	2a00      	cmp	r2, #0
 800442c:	4691      	mov	r9, r2
 800442e:	dc37      	bgt.n	80044a0 <_printf_float+0x364>
 8004430:	f04f 0b00 	mov.w	fp, #0
 8004434:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004438:	f104 021a 	add.w	r2, r4, #26
 800443c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004440:	ebaa 0309 	sub.w	r3, sl, r9
 8004444:	455b      	cmp	r3, fp
 8004446:	dc33      	bgt.n	80044b0 <_printf_float+0x374>
 8004448:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800444c:	429a      	cmp	r2, r3
 800444e:	db3b      	blt.n	80044c8 <_printf_float+0x38c>
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	07da      	lsls	r2, r3, #31
 8004454:	d438      	bmi.n	80044c8 <_printf_float+0x38c>
 8004456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004458:	990d      	ldr	r1, [sp, #52]	; 0x34
 800445a:	eba2 030a 	sub.w	r3, r2, sl
 800445e:	eba2 0901 	sub.w	r9, r2, r1
 8004462:	4599      	cmp	r9, r3
 8004464:	bfa8      	it	ge
 8004466:	4699      	movge	r9, r3
 8004468:	f1b9 0f00 	cmp.w	r9, #0
 800446c:	dc34      	bgt.n	80044d8 <_printf_float+0x39c>
 800446e:	f04f 0800 	mov.w	r8, #0
 8004472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004476:	f104 0a1a 	add.w	sl, r4, #26
 800447a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800447e:	1a9b      	subs	r3, r3, r2
 8004480:	eba3 0309 	sub.w	r3, r3, r9
 8004484:	4543      	cmp	r3, r8
 8004486:	f77f af7a 	ble.w	800437e <_printf_float+0x242>
 800448a:	2301      	movs	r3, #1
 800448c:	4652      	mov	r2, sl
 800448e:	4631      	mov	r1, r6
 8004490:	4628      	mov	r0, r5
 8004492:	47b8      	blx	r7
 8004494:	3001      	adds	r0, #1
 8004496:	f43f aeac 	beq.w	80041f2 <_printf_float+0xb6>
 800449a:	f108 0801 	add.w	r8, r8, #1
 800449e:	e7ec      	b.n	800447a <_printf_float+0x33e>
 80044a0:	4613      	mov	r3, r2
 80044a2:	4631      	mov	r1, r6
 80044a4:	4642      	mov	r2, r8
 80044a6:	4628      	mov	r0, r5
 80044a8:	47b8      	blx	r7
 80044aa:	3001      	adds	r0, #1
 80044ac:	d1c0      	bne.n	8004430 <_printf_float+0x2f4>
 80044ae:	e6a0      	b.n	80041f2 <_printf_float+0xb6>
 80044b0:	2301      	movs	r3, #1
 80044b2:	4631      	mov	r1, r6
 80044b4:	4628      	mov	r0, r5
 80044b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80044b8:	47b8      	blx	r7
 80044ba:	3001      	adds	r0, #1
 80044bc:	f43f ae99 	beq.w	80041f2 <_printf_float+0xb6>
 80044c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044c2:	f10b 0b01 	add.w	fp, fp, #1
 80044c6:	e7b9      	b.n	800443c <_printf_float+0x300>
 80044c8:	4631      	mov	r1, r6
 80044ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044ce:	4628      	mov	r0, r5
 80044d0:	47b8      	blx	r7
 80044d2:	3001      	adds	r0, #1
 80044d4:	d1bf      	bne.n	8004456 <_printf_float+0x31a>
 80044d6:	e68c      	b.n	80041f2 <_printf_float+0xb6>
 80044d8:	464b      	mov	r3, r9
 80044da:	4631      	mov	r1, r6
 80044dc:	4628      	mov	r0, r5
 80044de:	eb08 020a 	add.w	r2, r8, sl
 80044e2:	47b8      	blx	r7
 80044e4:	3001      	adds	r0, #1
 80044e6:	d1c2      	bne.n	800446e <_printf_float+0x332>
 80044e8:	e683      	b.n	80041f2 <_printf_float+0xb6>
 80044ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044ec:	2a01      	cmp	r2, #1
 80044ee:	dc01      	bgt.n	80044f4 <_printf_float+0x3b8>
 80044f0:	07db      	lsls	r3, r3, #31
 80044f2:	d537      	bpl.n	8004564 <_printf_float+0x428>
 80044f4:	2301      	movs	r3, #1
 80044f6:	4642      	mov	r2, r8
 80044f8:	4631      	mov	r1, r6
 80044fa:	4628      	mov	r0, r5
 80044fc:	47b8      	blx	r7
 80044fe:	3001      	adds	r0, #1
 8004500:	f43f ae77 	beq.w	80041f2 <_printf_float+0xb6>
 8004504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004508:	4631      	mov	r1, r6
 800450a:	4628      	mov	r0, r5
 800450c:	47b8      	blx	r7
 800450e:	3001      	adds	r0, #1
 8004510:	f43f ae6f 	beq.w	80041f2 <_printf_float+0xb6>
 8004514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004518:	2200      	movs	r2, #0
 800451a:	2300      	movs	r3, #0
 800451c:	f7fc fa5c 	bl	80009d8 <__aeabi_dcmpeq>
 8004520:	b9d8      	cbnz	r0, 800455a <_printf_float+0x41e>
 8004522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004524:	f108 0201 	add.w	r2, r8, #1
 8004528:	3b01      	subs	r3, #1
 800452a:	4631      	mov	r1, r6
 800452c:	4628      	mov	r0, r5
 800452e:	47b8      	blx	r7
 8004530:	3001      	adds	r0, #1
 8004532:	d10e      	bne.n	8004552 <_printf_float+0x416>
 8004534:	e65d      	b.n	80041f2 <_printf_float+0xb6>
 8004536:	2301      	movs	r3, #1
 8004538:	464a      	mov	r2, r9
 800453a:	4631      	mov	r1, r6
 800453c:	4628      	mov	r0, r5
 800453e:	47b8      	blx	r7
 8004540:	3001      	adds	r0, #1
 8004542:	f43f ae56 	beq.w	80041f2 <_printf_float+0xb6>
 8004546:	f108 0801 	add.w	r8, r8, #1
 800454a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800454c:	3b01      	subs	r3, #1
 800454e:	4543      	cmp	r3, r8
 8004550:	dcf1      	bgt.n	8004536 <_printf_float+0x3fa>
 8004552:	4653      	mov	r3, sl
 8004554:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004558:	e6e0      	b.n	800431c <_printf_float+0x1e0>
 800455a:	f04f 0800 	mov.w	r8, #0
 800455e:	f104 091a 	add.w	r9, r4, #26
 8004562:	e7f2      	b.n	800454a <_printf_float+0x40e>
 8004564:	2301      	movs	r3, #1
 8004566:	4642      	mov	r2, r8
 8004568:	e7df      	b.n	800452a <_printf_float+0x3ee>
 800456a:	2301      	movs	r3, #1
 800456c:	464a      	mov	r2, r9
 800456e:	4631      	mov	r1, r6
 8004570:	4628      	mov	r0, r5
 8004572:	47b8      	blx	r7
 8004574:	3001      	adds	r0, #1
 8004576:	f43f ae3c 	beq.w	80041f2 <_printf_float+0xb6>
 800457a:	f108 0801 	add.w	r8, r8, #1
 800457e:	68e3      	ldr	r3, [r4, #12]
 8004580:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004582:	1a5b      	subs	r3, r3, r1
 8004584:	4543      	cmp	r3, r8
 8004586:	dcf0      	bgt.n	800456a <_printf_float+0x42e>
 8004588:	e6fd      	b.n	8004386 <_printf_float+0x24a>
 800458a:	f04f 0800 	mov.w	r8, #0
 800458e:	f104 0919 	add.w	r9, r4, #25
 8004592:	e7f4      	b.n	800457e <_printf_float+0x442>

08004594 <_printf_common>:
 8004594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004598:	4616      	mov	r6, r2
 800459a:	4699      	mov	r9, r3
 800459c:	688a      	ldr	r2, [r1, #8]
 800459e:	690b      	ldr	r3, [r1, #16]
 80045a0:	4607      	mov	r7, r0
 80045a2:	4293      	cmp	r3, r2
 80045a4:	bfb8      	it	lt
 80045a6:	4613      	movlt	r3, r2
 80045a8:	6033      	str	r3, [r6, #0]
 80045aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045ae:	460c      	mov	r4, r1
 80045b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045b4:	b10a      	cbz	r2, 80045ba <_printf_common+0x26>
 80045b6:	3301      	adds	r3, #1
 80045b8:	6033      	str	r3, [r6, #0]
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	0699      	lsls	r1, r3, #26
 80045be:	bf42      	ittt	mi
 80045c0:	6833      	ldrmi	r3, [r6, #0]
 80045c2:	3302      	addmi	r3, #2
 80045c4:	6033      	strmi	r3, [r6, #0]
 80045c6:	6825      	ldr	r5, [r4, #0]
 80045c8:	f015 0506 	ands.w	r5, r5, #6
 80045cc:	d106      	bne.n	80045dc <_printf_common+0x48>
 80045ce:	f104 0a19 	add.w	sl, r4, #25
 80045d2:	68e3      	ldr	r3, [r4, #12]
 80045d4:	6832      	ldr	r2, [r6, #0]
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	42ab      	cmp	r3, r5
 80045da:	dc28      	bgt.n	800462e <_printf_common+0x9a>
 80045dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045e0:	1e13      	subs	r3, r2, #0
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	bf18      	it	ne
 80045e6:	2301      	movne	r3, #1
 80045e8:	0692      	lsls	r2, r2, #26
 80045ea:	d42d      	bmi.n	8004648 <_printf_common+0xb4>
 80045ec:	4649      	mov	r1, r9
 80045ee:	4638      	mov	r0, r7
 80045f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045f4:	47c0      	blx	r8
 80045f6:	3001      	adds	r0, #1
 80045f8:	d020      	beq.n	800463c <_printf_common+0xa8>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	68e5      	ldr	r5, [r4, #12]
 80045fe:	f003 0306 	and.w	r3, r3, #6
 8004602:	2b04      	cmp	r3, #4
 8004604:	bf18      	it	ne
 8004606:	2500      	movne	r5, #0
 8004608:	6832      	ldr	r2, [r6, #0]
 800460a:	f04f 0600 	mov.w	r6, #0
 800460e:	68a3      	ldr	r3, [r4, #8]
 8004610:	bf08      	it	eq
 8004612:	1aad      	subeq	r5, r5, r2
 8004614:	6922      	ldr	r2, [r4, #16]
 8004616:	bf08      	it	eq
 8004618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800461c:	4293      	cmp	r3, r2
 800461e:	bfc4      	itt	gt
 8004620:	1a9b      	subgt	r3, r3, r2
 8004622:	18ed      	addgt	r5, r5, r3
 8004624:	341a      	adds	r4, #26
 8004626:	42b5      	cmp	r5, r6
 8004628:	d11a      	bne.n	8004660 <_printf_common+0xcc>
 800462a:	2000      	movs	r0, #0
 800462c:	e008      	b.n	8004640 <_printf_common+0xac>
 800462e:	2301      	movs	r3, #1
 8004630:	4652      	mov	r2, sl
 8004632:	4649      	mov	r1, r9
 8004634:	4638      	mov	r0, r7
 8004636:	47c0      	blx	r8
 8004638:	3001      	adds	r0, #1
 800463a:	d103      	bne.n	8004644 <_printf_common+0xb0>
 800463c:	f04f 30ff 	mov.w	r0, #4294967295
 8004640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004644:	3501      	adds	r5, #1
 8004646:	e7c4      	b.n	80045d2 <_printf_common+0x3e>
 8004648:	2030      	movs	r0, #48	; 0x30
 800464a:	18e1      	adds	r1, r4, r3
 800464c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004656:	4422      	add	r2, r4
 8004658:	3302      	adds	r3, #2
 800465a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800465e:	e7c5      	b.n	80045ec <_printf_common+0x58>
 8004660:	2301      	movs	r3, #1
 8004662:	4622      	mov	r2, r4
 8004664:	4649      	mov	r1, r9
 8004666:	4638      	mov	r0, r7
 8004668:	47c0      	blx	r8
 800466a:	3001      	adds	r0, #1
 800466c:	d0e6      	beq.n	800463c <_printf_common+0xa8>
 800466e:	3601      	adds	r6, #1
 8004670:	e7d9      	b.n	8004626 <_printf_common+0x92>
	...

08004674 <_printf_i>:
 8004674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004678:	460c      	mov	r4, r1
 800467a:	7e27      	ldrb	r7, [r4, #24]
 800467c:	4691      	mov	r9, r2
 800467e:	2f78      	cmp	r7, #120	; 0x78
 8004680:	4680      	mov	r8, r0
 8004682:	469a      	mov	sl, r3
 8004684:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004686:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800468a:	d807      	bhi.n	800469c <_printf_i+0x28>
 800468c:	2f62      	cmp	r7, #98	; 0x62
 800468e:	d80a      	bhi.n	80046a6 <_printf_i+0x32>
 8004690:	2f00      	cmp	r7, #0
 8004692:	f000 80d9 	beq.w	8004848 <_printf_i+0x1d4>
 8004696:	2f58      	cmp	r7, #88	; 0x58
 8004698:	f000 80a4 	beq.w	80047e4 <_printf_i+0x170>
 800469c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046a4:	e03a      	b.n	800471c <_printf_i+0xa8>
 80046a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046aa:	2b15      	cmp	r3, #21
 80046ac:	d8f6      	bhi.n	800469c <_printf_i+0x28>
 80046ae:	a001      	add	r0, pc, #4	; (adr r0, 80046b4 <_printf_i+0x40>)
 80046b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80046b4:	0800470d 	.word	0x0800470d
 80046b8:	08004721 	.word	0x08004721
 80046bc:	0800469d 	.word	0x0800469d
 80046c0:	0800469d 	.word	0x0800469d
 80046c4:	0800469d 	.word	0x0800469d
 80046c8:	0800469d 	.word	0x0800469d
 80046cc:	08004721 	.word	0x08004721
 80046d0:	0800469d 	.word	0x0800469d
 80046d4:	0800469d 	.word	0x0800469d
 80046d8:	0800469d 	.word	0x0800469d
 80046dc:	0800469d 	.word	0x0800469d
 80046e0:	0800482f 	.word	0x0800482f
 80046e4:	08004751 	.word	0x08004751
 80046e8:	08004811 	.word	0x08004811
 80046ec:	0800469d 	.word	0x0800469d
 80046f0:	0800469d 	.word	0x0800469d
 80046f4:	08004851 	.word	0x08004851
 80046f8:	0800469d 	.word	0x0800469d
 80046fc:	08004751 	.word	0x08004751
 8004700:	0800469d 	.word	0x0800469d
 8004704:	0800469d 	.word	0x0800469d
 8004708:	08004819 	.word	0x08004819
 800470c:	680b      	ldr	r3, [r1, #0]
 800470e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004712:	1d1a      	adds	r2, r3, #4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	600a      	str	r2, [r1, #0]
 8004718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800471c:	2301      	movs	r3, #1
 800471e:	e0a4      	b.n	800486a <_printf_i+0x1f6>
 8004720:	6825      	ldr	r5, [r4, #0]
 8004722:	6808      	ldr	r0, [r1, #0]
 8004724:	062e      	lsls	r6, r5, #24
 8004726:	f100 0304 	add.w	r3, r0, #4
 800472a:	d50a      	bpl.n	8004742 <_printf_i+0xce>
 800472c:	6805      	ldr	r5, [r0, #0]
 800472e:	600b      	str	r3, [r1, #0]
 8004730:	2d00      	cmp	r5, #0
 8004732:	da03      	bge.n	800473c <_printf_i+0xc8>
 8004734:	232d      	movs	r3, #45	; 0x2d
 8004736:	426d      	negs	r5, r5
 8004738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800473c:	230a      	movs	r3, #10
 800473e:	485e      	ldr	r0, [pc, #376]	; (80048b8 <_printf_i+0x244>)
 8004740:	e019      	b.n	8004776 <_printf_i+0x102>
 8004742:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004746:	6805      	ldr	r5, [r0, #0]
 8004748:	600b      	str	r3, [r1, #0]
 800474a:	bf18      	it	ne
 800474c:	b22d      	sxthne	r5, r5
 800474e:	e7ef      	b.n	8004730 <_printf_i+0xbc>
 8004750:	680b      	ldr	r3, [r1, #0]
 8004752:	6825      	ldr	r5, [r4, #0]
 8004754:	1d18      	adds	r0, r3, #4
 8004756:	6008      	str	r0, [r1, #0]
 8004758:	0628      	lsls	r0, r5, #24
 800475a:	d501      	bpl.n	8004760 <_printf_i+0xec>
 800475c:	681d      	ldr	r5, [r3, #0]
 800475e:	e002      	b.n	8004766 <_printf_i+0xf2>
 8004760:	0669      	lsls	r1, r5, #25
 8004762:	d5fb      	bpl.n	800475c <_printf_i+0xe8>
 8004764:	881d      	ldrh	r5, [r3, #0]
 8004766:	2f6f      	cmp	r7, #111	; 0x6f
 8004768:	bf0c      	ite	eq
 800476a:	2308      	moveq	r3, #8
 800476c:	230a      	movne	r3, #10
 800476e:	4852      	ldr	r0, [pc, #328]	; (80048b8 <_printf_i+0x244>)
 8004770:	2100      	movs	r1, #0
 8004772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004776:	6866      	ldr	r6, [r4, #4]
 8004778:	2e00      	cmp	r6, #0
 800477a:	bfa8      	it	ge
 800477c:	6821      	ldrge	r1, [r4, #0]
 800477e:	60a6      	str	r6, [r4, #8]
 8004780:	bfa4      	itt	ge
 8004782:	f021 0104 	bicge.w	r1, r1, #4
 8004786:	6021      	strge	r1, [r4, #0]
 8004788:	b90d      	cbnz	r5, 800478e <_printf_i+0x11a>
 800478a:	2e00      	cmp	r6, #0
 800478c:	d04d      	beq.n	800482a <_printf_i+0x1b6>
 800478e:	4616      	mov	r6, r2
 8004790:	fbb5 f1f3 	udiv	r1, r5, r3
 8004794:	fb03 5711 	mls	r7, r3, r1, r5
 8004798:	5dc7      	ldrb	r7, [r0, r7]
 800479a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800479e:	462f      	mov	r7, r5
 80047a0:	42bb      	cmp	r3, r7
 80047a2:	460d      	mov	r5, r1
 80047a4:	d9f4      	bls.n	8004790 <_printf_i+0x11c>
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d10b      	bne.n	80047c2 <_printf_i+0x14e>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	07df      	lsls	r7, r3, #31
 80047ae:	d508      	bpl.n	80047c2 <_printf_i+0x14e>
 80047b0:	6923      	ldr	r3, [r4, #16]
 80047b2:	6861      	ldr	r1, [r4, #4]
 80047b4:	4299      	cmp	r1, r3
 80047b6:	bfde      	ittt	le
 80047b8:	2330      	movle	r3, #48	; 0x30
 80047ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047c2:	1b92      	subs	r2, r2, r6
 80047c4:	6122      	str	r2, [r4, #16]
 80047c6:	464b      	mov	r3, r9
 80047c8:	4621      	mov	r1, r4
 80047ca:	4640      	mov	r0, r8
 80047cc:	f8cd a000 	str.w	sl, [sp]
 80047d0:	aa03      	add	r2, sp, #12
 80047d2:	f7ff fedf 	bl	8004594 <_printf_common>
 80047d6:	3001      	adds	r0, #1
 80047d8:	d14c      	bne.n	8004874 <_printf_i+0x200>
 80047da:	f04f 30ff 	mov.w	r0, #4294967295
 80047de:	b004      	add	sp, #16
 80047e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e4:	4834      	ldr	r0, [pc, #208]	; (80048b8 <_printf_i+0x244>)
 80047e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047ea:	680e      	ldr	r6, [r1, #0]
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80047f2:	061f      	lsls	r7, r3, #24
 80047f4:	600e      	str	r6, [r1, #0]
 80047f6:	d514      	bpl.n	8004822 <_printf_i+0x1ae>
 80047f8:	07d9      	lsls	r1, r3, #31
 80047fa:	bf44      	itt	mi
 80047fc:	f043 0320 	orrmi.w	r3, r3, #32
 8004800:	6023      	strmi	r3, [r4, #0]
 8004802:	b91d      	cbnz	r5, 800480c <_printf_i+0x198>
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	f023 0320 	bic.w	r3, r3, #32
 800480a:	6023      	str	r3, [r4, #0]
 800480c:	2310      	movs	r3, #16
 800480e:	e7af      	b.n	8004770 <_printf_i+0xfc>
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	f043 0320 	orr.w	r3, r3, #32
 8004816:	6023      	str	r3, [r4, #0]
 8004818:	2378      	movs	r3, #120	; 0x78
 800481a:	4828      	ldr	r0, [pc, #160]	; (80048bc <_printf_i+0x248>)
 800481c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004820:	e7e3      	b.n	80047ea <_printf_i+0x176>
 8004822:	065e      	lsls	r6, r3, #25
 8004824:	bf48      	it	mi
 8004826:	b2ad      	uxthmi	r5, r5
 8004828:	e7e6      	b.n	80047f8 <_printf_i+0x184>
 800482a:	4616      	mov	r6, r2
 800482c:	e7bb      	b.n	80047a6 <_printf_i+0x132>
 800482e:	680b      	ldr	r3, [r1, #0]
 8004830:	6826      	ldr	r6, [r4, #0]
 8004832:	1d1d      	adds	r5, r3, #4
 8004834:	6960      	ldr	r0, [r4, #20]
 8004836:	600d      	str	r5, [r1, #0]
 8004838:	0635      	lsls	r5, r6, #24
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	d501      	bpl.n	8004842 <_printf_i+0x1ce>
 800483e:	6018      	str	r0, [r3, #0]
 8004840:	e002      	b.n	8004848 <_printf_i+0x1d4>
 8004842:	0671      	lsls	r1, r6, #25
 8004844:	d5fb      	bpl.n	800483e <_printf_i+0x1ca>
 8004846:	8018      	strh	r0, [r3, #0]
 8004848:	2300      	movs	r3, #0
 800484a:	4616      	mov	r6, r2
 800484c:	6123      	str	r3, [r4, #16]
 800484e:	e7ba      	b.n	80047c6 <_printf_i+0x152>
 8004850:	680b      	ldr	r3, [r1, #0]
 8004852:	1d1a      	adds	r2, r3, #4
 8004854:	600a      	str	r2, [r1, #0]
 8004856:	681e      	ldr	r6, [r3, #0]
 8004858:	2100      	movs	r1, #0
 800485a:	4630      	mov	r0, r6
 800485c:	6862      	ldr	r2, [r4, #4]
 800485e:	f000 fed9 	bl	8005614 <memchr>
 8004862:	b108      	cbz	r0, 8004868 <_printf_i+0x1f4>
 8004864:	1b80      	subs	r0, r0, r6
 8004866:	6060      	str	r0, [r4, #4]
 8004868:	6863      	ldr	r3, [r4, #4]
 800486a:	6123      	str	r3, [r4, #16]
 800486c:	2300      	movs	r3, #0
 800486e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004872:	e7a8      	b.n	80047c6 <_printf_i+0x152>
 8004874:	4632      	mov	r2, r6
 8004876:	4649      	mov	r1, r9
 8004878:	4640      	mov	r0, r8
 800487a:	6923      	ldr	r3, [r4, #16]
 800487c:	47d0      	blx	sl
 800487e:	3001      	adds	r0, #1
 8004880:	d0ab      	beq.n	80047da <_printf_i+0x166>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	079b      	lsls	r3, r3, #30
 8004886:	d413      	bmi.n	80048b0 <_printf_i+0x23c>
 8004888:	68e0      	ldr	r0, [r4, #12]
 800488a:	9b03      	ldr	r3, [sp, #12]
 800488c:	4298      	cmp	r0, r3
 800488e:	bfb8      	it	lt
 8004890:	4618      	movlt	r0, r3
 8004892:	e7a4      	b.n	80047de <_printf_i+0x16a>
 8004894:	2301      	movs	r3, #1
 8004896:	4632      	mov	r2, r6
 8004898:	4649      	mov	r1, r9
 800489a:	4640      	mov	r0, r8
 800489c:	47d0      	blx	sl
 800489e:	3001      	adds	r0, #1
 80048a0:	d09b      	beq.n	80047da <_printf_i+0x166>
 80048a2:	3501      	adds	r5, #1
 80048a4:	68e3      	ldr	r3, [r4, #12]
 80048a6:	9903      	ldr	r1, [sp, #12]
 80048a8:	1a5b      	subs	r3, r3, r1
 80048aa:	42ab      	cmp	r3, r5
 80048ac:	dcf2      	bgt.n	8004894 <_printf_i+0x220>
 80048ae:	e7eb      	b.n	8004888 <_printf_i+0x214>
 80048b0:	2500      	movs	r5, #0
 80048b2:	f104 0619 	add.w	r6, r4, #25
 80048b6:	e7f5      	b.n	80048a4 <_printf_i+0x230>
 80048b8:	08006dd2 	.word	0x08006dd2
 80048bc:	08006de3 	.word	0x08006de3

080048c0 <siprintf>:
 80048c0:	b40e      	push	{r1, r2, r3}
 80048c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048c6:	b500      	push	{lr}
 80048c8:	b09c      	sub	sp, #112	; 0x70
 80048ca:	ab1d      	add	r3, sp, #116	; 0x74
 80048cc:	9002      	str	r0, [sp, #8]
 80048ce:	9006      	str	r0, [sp, #24]
 80048d0:	9107      	str	r1, [sp, #28]
 80048d2:	9104      	str	r1, [sp, #16]
 80048d4:	4808      	ldr	r0, [pc, #32]	; (80048f8 <siprintf+0x38>)
 80048d6:	4909      	ldr	r1, [pc, #36]	; (80048fc <siprintf+0x3c>)
 80048d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80048dc:	9105      	str	r1, [sp, #20]
 80048de:	6800      	ldr	r0, [r0, #0]
 80048e0:	a902      	add	r1, sp, #8
 80048e2:	9301      	str	r3, [sp, #4]
 80048e4:	f001 fb44 	bl	8005f70 <_svfiprintf_r>
 80048e8:	2200      	movs	r2, #0
 80048ea:	9b02      	ldr	r3, [sp, #8]
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	b01c      	add	sp, #112	; 0x70
 80048f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048f4:	b003      	add	sp, #12
 80048f6:	4770      	bx	lr
 80048f8:	2000000c 	.word	0x2000000c
 80048fc:	ffff0208 	.word	0xffff0208

08004900 <quorem>:
 8004900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004904:	6903      	ldr	r3, [r0, #16]
 8004906:	690c      	ldr	r4, [r1, #16]
 8004908:	4607      	mov	r7, r0
 800490a:	42a3      	cmp	r3, r4
 800490c:	f2c0 8083 	blt.w	8004a16 <quorem+0x116>
 8004910:	3c01      	subs	r4, #1
 8004912:	f100 0514 	add.w	r5, r0, #20
 8004916:	f101 0814 	add.w	r8, r1, #20
 800491a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800491e:	9301      	str	r3, [sp, #4]
 8004920:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004924:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004928:	3301      	adds	r3, #1
 800492a:	429a      	cmp	r2, r3
 800492c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004930:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004934:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004938:	d332      	bcc.n	80049a0 <quorem+0xa0>
 800493a:	f04f 0e00 	mov.w	lr, #0
 800493e:	4640      	mov	r0, r8
 8004940:	46ac      	mov	ip, r5
 8004942:	46f2      	mov	sl, lr
 8004944:	f850 2b04 	ldr.w	r2, [r0], #4
 8004948:	b293      	uxth	r3, r2
 800494a:	fb06 e303 	mla	r3, r6, r3, lr
 800494e:	0c12      	lsrs	r2, r2, #16
 8004950:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004954:	fb06 e202 	mla	r2, r6, r2, lr
 8004958:	b29b      	uxth	r3, r3
 800495a:	ebaa 0303 	sub.w	r3, sl, r3
 800495e:	f8dc a000 	ldr.w	sl, [ip]
 8004962:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004966:	fa1f fa8a 	uxth.w	sl, sl
 800496a:	4453      	add	r3, sl
 800496c:	fa1f fa82 	uxth.w	sl, r2
 8004970:	f8dc 2000 	ldr.w	r2, [ip]
 8004974:	4581      	cmp	r9, r0
 8004976:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800497a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800497e:	b29b      	uxth	r3, r3
 8004980:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004984:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004988:	f84c 3b04 	str.w	r3, [ip], #4
 800498c:	d2da      	bcs.n	8004944 <quorem+0x44>
 800498e:	f855 300b 	ldr.w	r3, [r5, fp]
 8004992:	b92b      	cbnz	r3, 80049a0 <quorem+0xa0>
 8004994:	9b01      	ldr	r3, [sp, #4]
 8004996:	3b04      	subs	r3, #4
 8004998:	429d      	cmp	r5, r3
 800499a:	461a      	mov	r2, r3
 800499c:	d32f      	bcc.n	80049fe <quorem+0xfe>
 800499e:	613c      	str	r4, [r7, #16]
 80049a0:	4638      	mov	r0, r7
 80049a2:	f001 f8cd 	bl	8005b40 <__mcmp>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	db25      	blt.n	80049f6 <quorem+0xf6>
 80049aa:	4628      	mov	r0, r5
 80049ac:	f04f 0c00 	mov.w	ip, #0
 80049b0:	3601      	adds	r6, #1
 80049b2:	f858 1b04 	ldr.w	r1, [r8], #4
 80049b6:	f8d0 e000 	ldr.w	lr, [r0]
 80049ba:	b28b      	uxth	r3, r1
 80049bc:	ebac 0303 	sub.w	r3, ip, r3
 80049c0:	fa1f f28e 	uxth.w	r2, lr
 80049c4:	4413      	add	r3, r2
 80049c6:	0c0a      	lsrs	r2, r1, #16
 80049c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80049cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049d6:	45c1      	cmp	r9, r8
 80049d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80049dc:	f840 3b04 	str.w	r3, [r0], #4
 80049e0:	d2e7      	bcs.n	80049b2 <quorem+0xb2>
 80049e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049ea:	b922      	cbnz	r2, 80049f6 <quorem+0xf6>
 80049ec:	3b04      	subs	r3, #4
 80049ee:	429d      	cmp	r5, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	d30a      	bcc.n	8004a0a <quorem+0x10a>
 80049f4:	613c      	str	r4, [r7, #16]
 80049f6:	4630      	mov	r0, r6
 80049f8:	b003      	add	sp, #12
 80049fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049fe:	6812      	ldr	r2, [r2, #0]
 8004a00:	3b04      	subs	r3, #4
 8004a02:	2a00      	cmp	r2, #0
 8004a04:	d1cb      	bne.n	800499e <quorem+0x9e>
 8004a06:	3c01      	subs	r4, #1
 8004a08:	e7c6      	b.n	8004998 <quorem+0x98>
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	3b04      	subs	r3, #4
 8004a0e:	2a00      	cmp	r2, #0
 8004a10:	d1f0      	bne.n	80049f4 <quorem+0xf4>
 8004a12:	3c01      	subs	r4, #1
 8004a14:	e7eb      	b.n	80049ee <quorem+0xee>
 8004a16:	2000      	movs	r0, #0
 8004a18:	e7ee      	b.n	80049f8 <quorem+0xf8>
 8004a1a:	0000      	movs	r0, r0
 8004a1c:	0000      	movs	r0, r0
	...

08004a20 <_dtoa_r>:
 8004a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a24:	4616      	mov	r6, r2
 8004a26:	461f      	mov	r7, r3
 8004a28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004a2a:	b099      	sub	sp, #100	; 0x64
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004a36:	b974      	cbnz	r4, 8004a56 <_dtoa_r+0x36>
 8004a38:	2010      	movs	r0, #16
 8004a3a:	f000 fde3 	bl	8005604 <malloc>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	6268      	str	r0, [r5, #36]	; 0x24
 8004a42:	b920      	cbnz	r0, 8004a4e <_dtoa_r+0x2e>
 8004a44:	21ea      	movs	r1, #234	; 0xea
 8004a46:	4bae      	ldr	r3, [pc, #696]	; (8004d00 <_dtoa_r+0x2e0>)
 8004a48:	48ae      	ldr	r0, [pc, #696]	; (8004d04 <_dtoa_r+0x2e4>)
 8004a4a:	f001 fba1 	bl	8006190 <__assert_func>
 8004a4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a52:	6004      	str	r4, [r0, #0]
 8004a54:	60c4      	str	r4, [r0, #12]
 8004a56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a58:	6819      	ldr	r1, [r3, #0]
 8004a5a:	b151      	cbz	r1, 8004a72 <_dtoa_r+0x52>
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	2301      	movs	r3, #1
 8004a60:	4093      	lsls	r3, r2
 8004a62:	604a      	str	r2, [r1, #4]
 8004a64:	608b      	str	r3, [r1, #8]
 8004a66:	4628      	mov	r0, r5
 8004a68:	f000 fe30 	bl	80056cc <_Bfree>
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	1e3b      	subs	r3, r7, #0
 8004a74:	bfaf      	iteee	ge
 8004a76:	2300      	movge	r3, #0
 8004a78:	2201      	movlt	r2, #1
 8004a7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004a7e:	9305      	strlt	r3, [sp, #20]
 8004a80:	bfa8      	it	ge
 8004a82:	f8c8 3000 	strge.w	r3, [r8]
 8004a86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004a8a:	4b9f      	ldr	r3, [pc, #636]	; (8004d08 <_dtoa_r+0x2e8>)
 8004a8c:	bfb8      	it	lt
 8004a8e:	f8c8 2000 	strlt.w	r2, [r8]
 8004a92:	ea33 0309 	bics.w	r3, r3, r9
 8004a96:	d119      	bne.n	8004acc <_dtoa_r+0xac>
 8004a98:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004aa4:	4333      	orrs	r3, r6
 8004aa6:	f000 8580 	beq.w	80055aa <_dtoa_r+0xb8a>
 8004aaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004aac:	b953      	cbnz	r3, 8004ac4 <_dtoa_r+0xa4>
 8004aae:	4b97      	ldr	r3, [pc, #604]	; (8004d0c <_dtoa_r+0x2ec>)
 8004ab0:	e022      	b.n	8004af8 <_dtoa_r+0xd8>
 8004ab2:	4b97      	ldr	r3, [pc, #604]	; (8004d10 <_dtoa_r+0x2f0>)
 8004ab4:	9308      	str	r3, [sp, #32]
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	9808      	ldr	r0, [sp, #32]
 8004abe:	b019      	add	sp, #100	; 0x64
 8004ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac4:	4b91      	ldr	r3, [pc, #580]	; (8004d0c <_dtoa_r+0x2ec>)
 8004ac6:	9308      	str	r3, [sp, #32]
 8004ac8:	3303      	adds	r3, #3
 8004aca:	e7f5      	b.n	8004ab8 <_dtoa_r+0x98>
 8004acc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004ad0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004ad4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2300      	movs	r3, #0
 8004adc:	f7fb ff7c 	bl	80009d8 <__aeabi_dcmpeq>
 8004ae0:	4680      	mov	r8, r0
 8004ae2:	b158      	cbz	r0, 8004afc <_dtoa_r+0xdc>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 8559 	beq.w	80055a4 <_dtoa_r+0xb84>
 8004af2:	4888      	ldr	r0, [pc, #544]	; (8004d14 <_dtoa_r+0x2f4>)
 8004af4:	6018      	str	r0, [r3, #0]
 8004af6:	1e43      	subs	r3, r0, #1
 8004af8:	9308      	str	r3, [sp, #32]
 8004afa:	e7df      	b.n	8004abc <_dtoa_r+0x9c>
 8004afc:	ab16      	add	r3, sp, #88	; 0x58
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	ab17      	add	r3, sp, #92	; 0x5c
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	4628      	mov	r0, r5
 8004b06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004b0a:	f001 f8c5 	bl	8005c98 <__d2b>
 8004b0e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004b12:	4682      	mov	sl, r0
 8004b14:	2c00      	cmp	r4, #0
 8004b16:	d07e      	beq.n	8004c16 <_dtoa_r+0x1f6>
 8004b18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b1e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004b22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b26:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004b2a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004b2e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004b32:	2200      	movs	r2, #0
 8004b34:	4b78      	ldr	r3, [pc, #480]	; (8004d18 <_dtoa_r+0x2f8>)
 8004b36:	f7fb fb2f 	bl	8000198 <__aeabi_dsub>
 8004b3a:	a36b      	add	r3, pc, #428	; (adr r3, 8004ce8 <_dtoa_r+0x2c8>)
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	f7fb fce2 	bl	8000508 <__aeabi_dmul>
 8004b44:	a36a      	add	r3, pc, #424	; (adr r3, 8004cf0 <_dtoa_r+0x2d0>)
 8004b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4a:	f7fb fb27 	bl	800019c <__adddf3>
 8004b4e:	4606      	mov	r6, r0
 8004b50:	4620      	mov	r0, r4
 8004b52:	460f      	mov	r7, r1
 8004b54:	f7fb fc6e 	bl	8000434 <__aeabi_i2d>
 8004b58:	a367      	add	r3, pc, #412	; (adr r3, 8004cf8 <_dtoa_r+0x2d8>)
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	f7fb fcd3 	bl	8000508 <__aeabi_dmul>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4630      	mov	r0, r6
 8004b68:	4639      	mov	r1, r7
 8004b6a:	f7fb fb17 	bl	800019c <__adddf3>
 8004b6e:	4606      	mov	r6, r0
 8004b70:	460f      	mov	r7, r1
 8004b72:	f7fb ff79 	bl	8000a68 <__aeabi_d2iz>
 8004b76:	2200      	movs	r2, #0
 8004b78:	4681      	mov	r9, r0
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	4639      	mov	r1, r7
 8004b80:	f7fb ff34 	bl	80009ec <__aeabi_dcmplt>
 8004b84:	b148      	cbz	r0, 8004b9a <_dtoa_r+0x17a>
 8004b86:	4648      	mov	r0, r9
 8004b88:	f7fb fc54 	bl	8000434 <__aeabi_i2d>
 8004b8c:	4632      	mov	r2, r6
 8004b8e:	463b      	mov	r3, r7
 8004b90:	f7fb ff22 	bl	80009d8 <__aeabi_dcmpeq>
 8004b94:	b908      	cbnz	r0, 8004b9a <_dtoa_r+0x17a>
 8004b96:	f109 39ff 	add.w	r9, r9, #4294967295
 8004b9a:	f1b9 0f16 	cmp.w	r9, #22
 8004b9e:	d857      	bhi.n	8004c50 <_dtoa_r+0x230>
 8004ba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ba4:	4b5d      	ldr	r3, [pc, #372]	; (8004d1c <_dtoa_r+0x2fc>)
 8004ba6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f7fb ff1d 	bl	80009ec <__aeabi_dcmplt>
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	d04e      	beq.n	8004c54 <_dtoa_r+0x234>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f109 39ff 	add.w	r9, r9, #4294967295
 8004bbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004bbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004bc0:	1b1c      	subs	r4, r3, r4
 8004bc2:	1e63      	subs	r3, r4, #1
 8004bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004bc6:	bf49      	itett	mi
 8004bc8:	f1c4 0301 	rsbmi	r3, r4, #1
 8004bcc:	2300      	movpl	r3, #0
 8004bce:	9306      	strmi	r3, [sp, #24]
 8004bd0:	2300      	movmi	r3, #0
 8004bd2:	bf54      	ite	pl
 8004bd4:	9306      	strpl	r3, [sp, #24]
 8004bd6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004bd8:	f1b9 0f00 	cmp.w	r9, #0
 8004bdc:	db3c      	blt.n	8004c58 <_dtoa_r+0x238>
 8004bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004be4:	444b      	add	r3, r9
 8004be6:	9309      	str	r3, [sp, #36]	; 0x24
 8004be8:	2300      	movs	r3, #0
 8004bea:	930a      	str	r3, [sp, #40]	; 0x28
 8004bec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bee:	2b09      	cmp	r3, #9
 8004bf0:	d86c      	bhi.n	8004ccc <_dtoa_r+0x2ac>
 8004bf2:	2b05      	cmp	r3, #5
 8004bf4:	bfc4      	itt	gt
 8004bf6:	3b04      	subgt	r3, #4
 8004bf8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004bfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bfc:	bfc8      	it	gt
 8004bfe:	2400      	movgt	r4, #0
 8004c00:	f1a3 0302 	sub.w	r3, r3, #2
 8004c04:	bfd8      	it	le
 8004c06:	2401      	movle	r4, #1
 8004c08:	2b03      	cmp	r3, #3
 8004c0a:	f200 808b 	bhi.w	8004d24 <_dtoa_r+0x304>
 8004c0e:	e8df f003 	tbb	[pc, r3]
 8004c12:	4f2d      	.short	0x4f2d
 8004c14:	5b4d      	.short	0x5b4d
 8004c16:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004c1a:	441c      	add	r4, r3
 8004c1c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	bfc3      	ittte	gt
 8004c24:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c28:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004c2c:	fa09 f303 	lslgt.w	r3, r9, r3
 8004c30:	f1c3 0320 	rsble	r3, r3, #32
 8004c34:	bfc6      	itte	gt
 8004c36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004c3a:	4318      	orrgt	r0, r3
 8004c3c:	fa06 f003 	lslle.w	r0, r6, r3
 8004c40:	f7fb fbe8 	bl	8000414 <__aeabi_ui2d>
 8004c44:	2301      	movs	r3, #1
 8004c46:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004c4a:	3c01      	subs	r4, #1
 8004c4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004c4e:	e770      	b.n	8004b32 <_dtoa_r+0x112>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e7b3      	b.n	8004bbc <_dtoa_r+0x19c>
 8004c54:	900f      	str	r0, [sp, #60]	; 0x3c
 8004c56:	e7b2      	b.n	8004bbe <_dtoa_r+0x19e>
 8004c58:	9b06      	ldr	r3, [sp, #24]
 8004c5a:	eba3 0309 	sub.w	r3, r3, r9
 8004c5e:	9306      	str	r3, [sp, #24]
 8004c60:	f1c9 0300 	rsb	r3, r9, #0
 8004c64:	930a      	str	r3, [sp, #40]	; 0x28
 8004c66:	2300      	movs	r3, #0
 8004c68:	930e      	str	r3, [sp, #56]	; 0x38
 8004c6a:	e7bf      	b.n	8004bec <_dtoa_r+0x1cc>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	dc59      	bgt.n	8004d2a <_dtoa_r+0x30a>
 8004c76:	f04f 0b01 	mov.w	fp, #1
 8004c7a:	465b      	mov	r3, fp
 8004c7c:	f8cd b008 	str.w	fp, [sp, #8]
 8004c80:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004c84:	2200      	movs	r2, #0
 8004c86:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004c88:	6042      	str	r2, [r0, #4]
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	f102 0614 	add.w	r6, r2, #20
 8004c90:	429e      	cmp	r6, r3
 8004c92:	6841      	ldr	r1, [r0, #4]
 8004c94:	d94f      	bls.n	8004d36 <_dtoa_r+0x316>
 8004c96:	4628      	mov	r0, r5
 8004c98:	f000 fcd8 	bl	800564c <_Balloc>
 8004c9c:	9008      	str	r0, [sp, #32]
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d14d      	bne.n	8004d3e <_dtoa_r+0x31e>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <_dtoa_r+0x300>)
 8004caa:	e6cd      	b.n	8004a48 <_dtoa_r+0x28>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e7de      	b.n	8004c6e <_dtoa_r+0x24e>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cb6:	eb09 0b03 	add.w	fp, r9, r3
 8004cba:	f10b 0301 	add.w	r3, fp, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	9302      	str	r3, [sp, #8]
 8004cc2:	bfb8      	it	lt
 8004cc4:	2301      	movlt	r3, #1
 8004cc6:	e7dd      	b.n	8004c84 <_dtoa_r+0x264>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e7f2      	b.n	8004cb2 <_dtoa_r+0x292>
 8004ccc:	2401      	movs	r4, #1
 8004cce:	2300      	movs	r3, #0
 8004cd0:	940b      	str	r4, [sp, #44]	; 0x2c
 8004cd2:	9322      	str	r3, [sp, #136]	; 0x88
 8004cd4:	f04f 3bff 	mov.w	fp, #4294967295
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2312      	movs	r3, #18
 8004cdc:	f8cd b008 	str.w	fp, [sp, #8]
 8004ce0:	9223      	str	r2, [sp, #140]	; 0x8c
 8004ce2:	e7cf      	b.n	8004c84 <_dtoa_r+0x264>
 8004ce4:	f3af 8000 	nop.w
 8004ce8:	636f4361 	.word	0x636f4361
 8004cec:	3fd287a7 	.word	0x3fd287a7
 8004cf0:	8b60c8b3 	.word	0x8b60c8b3
 8004cf4:	3fc68a28 	.word	0x3fc68a28
 8004cf8:	509f79fb 	.word	0x509f79fb
 8004cfc:	3fd34413 	.word	0x3fd34413
 8004d00:	08006e01 	.word	0x08006e01
 8004d04:	08006e18 	.word	0x08006e18
 8004d08:	7ff00000 	.word	0x7ff00000
 8004d0c:	08006dfd 	.word	0x08006dfd
 8004d10:	08006df4 	.word	0x08006df4
 8004d14:	08006dd1 	.word	0x08006dd1
 8004d18:	3ff80000 	.word	0x3ff80000
 8004d1c:	08006f10 	.word	0x08006f10
 8004d20:	08006e77 	.word	0x08006e77
 8004d24:	2301      	movs	r3, #1
 8004d26:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d28:	e7d4      	b.n	8004cd4 <_dtoa_r+0x2b4>
 8004d2a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004d2e:	465b      	mov	r3, fp
 8004d30:	f8cd b008 	str.w	fp, [sp, #8]
 8004d34:	e7a6      	b.n	8004c84 <_dtoa_r+0x264>
 8004d36:	3101      	adds	r1, #1
 8004d38:	6041      	str	r1, [r0, #4]
 8004d3a:	0052      	lsls	r2, r2, #1
 8004d3c:	e7a6      	b.n	8004c8c <_dtoa_r+0x26c>
 8004d3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d40:	9a08      	ldr	r2, [sp, #32]
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	9b02      	ldr	r3, [sp, #8]
 8004d46:	2b0e      	cmp	r3, #14
 8004d48:	f200 80a8 	bhi.w	8004e9c <_dtoa_r+0x47c>
 8004d4c:	2c00      	cmp	r4, #0
 8004d4e:	f000 80a5 	beq.w	8004e9c <_dtoa_r+0x47c>
 8004d52:	f1b9 0f00 	cmp.w	r9, #0
 8004d56:	dd34      	ble.n	8004dc2 <_dtoa_r+0x3a2>
 8004d58:	4a9a      	ldr	r2, [pc, #616]	; (8004fc4 <_dtoa_r+0x5a4>)
 8004d5a:	f009 030f 	and.w	r3, r9, #15
 8004d5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d62:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004d66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004d6e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004d72:	d016      	beq.n	8004da2 <_dtoa_r+0x382>
 8004d74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d78:	4b93      	ldr	r3, [pc, #588]	; (8004fc8 <_dtoa_r+0x5a8>)
 8004d7a:	2703      	movs	r7, #3
 8004d7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d80:	f7fb fcec 	bl	800075c <__aeabi_ddiv>
 8004d84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d88:	f004 040f 	and.w	r4, r4, #15
 8004d8c:	4e8e      	ldr	r6, [pc, #568]	; (8004fc8 <_dtoa_r+0x5a8>)
 8004d8e:	b954      	cbnz	r4, 8004da6 <_dtoa_r+0x386>
 8004d90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d98:	f7fb fce0 	bl	800075c <__aeabi_ddiv>
 8004d9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004da0:	e029      	b.n	8004df6 <_dtoa_r+0x3d6>
 8004da2:	2702      	movs	r7, #2
 8004da4:	e7f2      	b.n	8004d8c <_dtoa_r+0x36c>
 8004da6:	07e1      	lsls	r1, r4, #31
 8004da8:	d508      	bpl.n	8004dbc <_dtoa_r+0x39c>
 8004daa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dae:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004db2:	f7fb fba9 	bl	8000508 <__aeabi_dmul>
 8004db6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004dba:	3701      	adds	r7, #1
 8004dbc:	1064      	asrs	r4, r4, #1
 8004dbe:	3608      	adds	r6, #8
 8004dc0:	e7e5      	b.n	8004d8e <_dtoa_r+0x36e>
 8004dc2:	f000 80a5 	beq.w	8004f10 <_dtoa_r+0x4f0>
 8004dc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dca:	f1c9 0400 	rsb	r4, r9, #0
 8004dce:	4b7d      	ldr	r3, [pc, #500]	; (8004fc4 <_dtoa_r+0x5a4>)
 8004dd0:	f004 020f 	and.w	r2, r4, #15
 8004dd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	f7fb fb94 	bl	8000508 <__aeabi_dmul>
 8004de0:	2702      	movs	r7, #2
 8004de2:	2300      	movs	r3, #0
 8004de4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004de8:	4e77      	ldr	r6, [pc, #476]	; (8004fc8 <_dtoa_r+0x5a8>)
 8004dea:	1124      	asrs	r4, r4, #4
 8004dec:	2c00      	cmp	r4, #0
 8004dee:	f040 8084 	bne.w	8004efa <_dtoa_r+0x4da>
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1d2      	bne.n	8004d9c <_dtoa_r+0x37c>
 8004df6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 808b 	beq.w	8004f14 <_dtoa_r+0x4f4>
 8004dfe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	4b6f      	ldr	r3, [pc, #444]	; (8004fcc <_dtoa_r+0x5ac>)
 8004e0e:	f7fb fded 	bl	80009ec <__aeabi_dcmplt>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d07e      	beq.n	8004f14 <_dtoa_r+0x4f4>
 8004e16:	9b02      	ldr	r3, [sp, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d07b      	beq.n	8004f14 <_dtoa_r+0x4f4>
 8004e1c:	f1bb 0f00 	cmp.w	fp, #0
 8004e20:	dd38      	ble.n	8004e94 <_dtoa_r+0x474>
 8004e22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e26:	2200      	movs	r2, #0
 8004e28:	4b69      	ldr	r3, [pc, #420]	; (8004fd0 <_dtoa_r+0x5b0>)
 8004e2a:	f7fb fb6d 	bl	8000508 <__aeabi_dmul>
 8004e2e:	465c      	mov	r4, fp
 8004e30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e34:	f109 38ff 	add.w	r8, r9, #4294967295
 8004e38:	3701      	adds	r7, #1
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	f7fb fafa 	bl	8000434 <__aeabi_i2d>
 8004e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e44:	f7fb fb60 	bl	8000508 <__aeabi_dmul>
 8004e48:	2200      	movs	r2, #0
 8004e4a:	4b62      	ldr	r3, [pc, #392]	; (8004fd4 <_dtoa_r+0x5b4>)
 8004e4c:	f7fb f9a6 	bl	800019c <__adddf3>
 8004e50:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004e54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e58:	9611      	str	r6, [sp, #68]	; 0x44
 8004e5a:	2c00      	cmp	r4, #0
 8004e5c:	d15d      	bne.n	8004f1a <_dtoa_r+0x4fa>
 8004e5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e62:	2200      	movs	r2, #0
 8004e64:	4b5c      	ldr	r3, [pc, #368]	; (8004fd8 <_dtoa_r+0x5b8>)
 8004e66:	f7fb f997 	bl	8000198 <__aeabi_dsub>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e72:	4633      	mov	r3, r6
 8004e74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e76:	f7fb fdd7 	bl	8000a28 <__aeabi_dcmpgt>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	f040 829e 	bne.w	80053bc <_dtoa_r+0x99c>
 8004e80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e86:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004e8a:	f7fb fdaf 	bl	80009ec <__aeabi_dcmplt>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	f040 8292 	bne.w	80053b8 <_dtoa_r+0x998>
 8004e94:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004e98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004e9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f2c0 8153 	blt.w	800514a <_dtoa_r+0x72a>
 8004ea4:	f1b9 0f0e 	cmp.w	r9, #14
 8004ea8:	f300 814f 	bgt.w	800514a <_dtoa_r+0x72a>
 8004eac:	4b45      	ldr	r3, [pc, #276]	; (8004fc4 <_dtoa_r+0x5a4>)
 8004eae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004eb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004eb6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004eba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f280 80db 	bge.w	8005078 <_dtoa_r+0x658>
 8004ec2:	9b02      	ldr	r3, [sp, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f300 80d7 	bgt.w	8005078 <_dtoa_r+0x658>
 8004eca:	f040 8274 	bne.w	80053b6 <_dtoa_r+0x996>
 8004ece:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	4b40      	ldr	r3, [pc, #256]	; (8004fd8 <_dtoa_r+0x5b8>)
 8004ed6:	f7fb fb17 	bl	8000508 <__aeabi_dmul>
 8004eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ede:	f7fb fd99 	bl	8000a14 <__aeabi_dcmpge>
 8004ee2:	9c02      	ldr	r4, [sp, #8]
 8004ee4:	4626      	mov	r6, r4
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	f040 824a 	bne.w	8005380 <_dtoa_r+0x960>
 8004eec:	2331      	movs	r3, #49	; 0x31
 8004eee:	9f08      	ldr	r7, [sp, #32]
 8004ef0:	f109 0901 	add.w	r9, r9, #1
 8004ef4:	f807 3b01 	strb.w	r3, [r7], #1
 8004ef8:	e246      	b.n	8005388 <_dtoa_r+0x968>
 8004efa:	07e2      	lsls	r2, r4, #31
 8004efc:	d505      	bpl.n	8004f0a <_dtoa_r+0x4ea>
 8004efe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f02:	f7fb fb01 	bl	8000508 <__aeabi_dmul>
 8004f06:	2301      	movs	r3, #1
 8004f08:	3701      	adds	r7, #1
 8004f0a:	1064      	asrs	r4, r4, #1
 8004f0c:	3608      	adds	r6, #8
 8004f0e:	e76d      	b.n	8004dec <_dtoa_r+0x3cc>
 8004f10:	2702      	movs	r7, #2
 8004f12:	e770      	b.n	8004df6 <_dtoa_r+0x3d6>
 8004f14:	46c8      	mov	r8, r9
 8004f16:	9c02      	ldr	r4, [sp, #8]
 8004f18:	e78f      	b.n	8004e3a <_dtoa_r+0x41a>
 8004f1a:	9908      	ldr	r1, [sp, #32]
 8004f1c:	4b29      	ldr	r3, [pc, #164]	; (8004fc4 <_dtoa_r+0x5a4>)
 8004f1e:	4421      	add	r1, r4
 8004f20:	9112      	str	r1, [sp, #72]	; 0x48
 8004f22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f28:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004f2c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f30:	2900      	cmp	r1, #0
 8004f32:	d055      	beq.n	8004fe0 <_dtoa_r+0x5c0>
 8004f34:	2000      	movs	r0, #0
 8004f36:	4929      	ldr	r1, [pc, #164]	; (8004fdc <_dtoa_r+0x5bc>)
 8004f38:	f7fb fc10 	bl	800075c <__aeabi_ddiv>
 8004f3c:	463b      	mov	r3, r7
 8004f3e:	4632      	mov	r2, r6
 8004f40:	f7fb f92a 	bl	8000198 <__aeabi_dsub>
 8004f44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f48:	9f08      	ldr	r7, [sp, #32]
 8004f4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f4e:	f7fb fd8b 	bl	8000a68 <__aeabi_d2iz>
 8004f52:	4604      	mov	r4, r0
 8004f54:	f7fb fa6e 	bl	8000434 <__aeabi_i2d>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f60:	f7fb f91a 	bl	8000198 <__aeabi_dsub>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	3430      	adds	r4, #48	; 0x30
 8004f6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f72:	f807 4b01 	strb.w	r4, [r7], #1
 8004f76:	f7fb fd39 	bl	80009ec <__aeabi_dcmplt>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d174      	bne.n	8005068 <_dtoa_r+0x648>
 8004f7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f82:	2000      	movs	r0, #0
 8004f84:	4911      	ldr	r1, [pc, #68]	; (8004fcc <_dtoa_r+0x5ac>)
 8004f86:	f7fb f907 	bl	8000198 <__aeabi_dsub>
 8004f8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f8e:	f7fb fd2d 	bl	80009ec <__aeabi_dcmplt>
 8004f92:	2800      	cmp	r0, #0
 8004f94:	f040 80b6 	bne.w	8005104 <_dtoa_r+0x6e4>
 8004f98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f9a:	429f      	cmp	r7, r3
 8004f9c:	f43f af7a 	beq.w	8004e94 <_dtoa_r+0x474>
 8004fa0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <_dtoa_r+0x5b0>)
 8004fa8:	f7fb faae 	bl	8000508 <__aeabi_dmul>
 8004fac:	2200      	movs	r2, #0
 8004fae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <_dtoa_r+0x5b0>)
 8004fb8:	f7fb faa6 	bl	8000508 <__aeabi_dmul>
 8004fbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fc0:	e7c3      	b.n	8004f4a <_dtoa_r+0x52a>
 8004fc2:	bf00      	nop
 8004fc4:	08006f10 	.word	0x08006f10
 8004fc8:	08006ee8 	.word	0x08006ee8
 8004fcc:	3ff00000 	.word	0x3ff00000
 8004fd0:	40240000 	.word	0x40240000
 8004fd4:	401c0000 	.word	0x401c0000
 8004fd8:	40140000 	.word	0x40140000
 8004fdc:	3fe00000 	.word	0x3fe00000
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	4639      	mov	r1, r7
 8004fe4:	f7fb fa90 	bl	8000508 <__aeabi_dmul>
 8004fe8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fee:	9c08      	ldr	r4, [sp, #32]
 8004ff0:	9314      	str	r3, [sp, #80]	; 0x50
 8004ff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ff6:	f7fb fd37 	bl	8000a68 <__aeabi_d2iz>
 8004ffa:	9015      	str	r0, [sp, #84]	; 0x54
 8004ffc:	f7fb fa1a 	bl	8000434 <__aeabi_i2d>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005008:	f7fb f8c6 	bl	8000198 <__aeabi_dsub>
 800500c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800500e:	4606      	mov	r6, r0
 8005010:	3330      	adds	r3, #48	; 0x30
 8005012:	f804 3b01 	strb.w	r3, [r4], #1
 8005016:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005018:	460f      	mov	r7, r1
 800501a:	429c      	cmp	r4, r3
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	d124      	bne.n	800506c <_dtoa_r+0x64c>
 8005022:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005026:	4bb3      	ldr	r3, [pc, #716]	; (80052f4 <_dtoa_r+0x8d4>)
 8005028:	f7fb f8b8 	bl	800019c <__adddf3>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4630      	mov	r0, r6
 8005032:	4639      	mov	r1, r7
 8005034:	f7fb fcf8 	bl	8000a28 <__aeabi_dcmpgt>
 8005038:	2800      	cmp	r0, #0
 800503a:	d162      	bne.n	8005102 <_dtoa_r+0x6e2>
 800503c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005040:	2000      	movs	r0, #0
 8005042:	49ac      	ldr	r1, [pc, #688]	; (80052f4 <_dtoa_r+0x8d4>)
 8005044:	f7fb f8a8 	bl	8000198 <__aeabi_dsub>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4630      	mov	r0, r6
 800504e:	4639      	mov	r1, r7
 8005050:	f7fb fccc 	bl	80009ec <__aeabi_dcmplt>
 8005054:	2800      	cmp	r0, #0
 8005056:	f43f af1d 	beq.w	8004e94 <_dtoa_r+0x474>
 800505a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800505c:	1e7b      	subs	r3, r7, #1
 800505e:	9314      	str	r3, [sp, #80]	; 0x50
 8005060:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005064:	2b30      	cmp	r3, #48	; 0x30
 8005066:	d0f8      	beq.n	800505a <_dtoa_r+0x63a>
 8005068:	46c1      	mov	r9, r8
 800506a:	e03a      	b.n	80050e2 <_dtoa_r+0x6c2>
 800506c:	4ba2      	ldr	r3, [pc, #648]	; (80052f8 <_dtoa_r+0x8d8>)
 800506e:	f7fb fa4b 	bl	8000508 <__aeabi_dmul>
 8005072:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005076:	e7bc      	b.n	8004ff2 <_dtoa_r+0x5d2>
 8005078:	9f08      	ldr	r7, [sp, #32]
 800507a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800507e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005082:	f7fb fb6b 	bl	800075c <__aeabi_ddiv>
 8005086:	f7fb fcef 	bl	8000a68 <__aeabi_d2iz>
 800508a:	4604      	mov	r4, r0
 800508c:	f7fb f9d2 	bl	8000434 <__aeabi_i2d>
 8005090:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005094:	f7fb fa38 	bl	8000508 <__aeabi_dmul>
 8005098:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800509c:	460b      	mov	r3, r1
 800509e:	4602      	mov	r2, r0
 80050a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050a4:	f7fb f878 	bl	8000198 <__aeabi_dsub>
 80050a8:	f807 6b01 	strb.w	r6, [r7], #1
 80050ac:	9e08      	ldr	r6, [sp, #32]
 80050ae:	9b02      	ldr	r3, [sp, #8]
 80050b0:	1bbe      	subs	r6, r7, r6
 80050b2:	42b3      	cmp	r3, r6
 80050b4:	d13a      	bne.n	800512c <_dtoa_r+0x70c>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	f7fb f86f 	bl	800019c <__adddf3>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050ca:	f7fb fcad 	bl	8000a28 <__aeabi_dcmpgt>
 80050ce:	bb58      	cbnz	r0, 8005128 <_dtoa_r+0x708>
 80050d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050d8:	f7fb fc7e 	bl	80009d8 <__aeabi_dcmpeq>
 80050dc:	b108      	cbz	r0, 80050e2 <_dtoa_r+0x6c2>
 80050de:	07e1      	lsls	r1, r4, #31
 80050e0:	d422      	bmi.n	8005128 <_dtoa_r+0x708>
 80050e2:	4628      	mov	r0, r5
 80050e4:	4651      	mov	r1, sl
 80050e6:	f000 faf1 	bl	80056cc <_Bfree>
 80050ea:	2300      	movs	r3, #0
 80050ec:	703b      	strb	r3, [r7, #0]
 80050ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80050f0:	f109 0001 	add.w	r0, r9, #1
 80050f4:	6018      	str	r0, [r3, #0]
 80050f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f43f acdf 	beq.w	8004abc <_dtoa_r+0x9c>
 80050fe:	601f      	str	r7, [r3, #0]
 8005100:	e4dc      	b.n	8004abc <_dtoa_r+0x9c>
 8005102:	4627      	mov	r7, r4
 8005104:	463b      	mov	r3, r7
 8005106:	461f      	mov	r7, r3
 8005108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800510c:	2a39      	cmp	r2, #57	; 0x39
 800510e:	d107      	bne.n	8005120 <_dtoa_r+0x700>
 8005110:	9a08      	ldr	r2, [sp, #32]
 8005112:	429a      	cmp	r2, r3
 8005114:	d1f7      	bne.n	8005106 <_dtoa_r+0x6e6>
 8005116:	2230      	movs	r2, #48	; 0x30
 8005118:	9908      	ldr	r1, [sp, #32]
 800511a:	f108 0801 	add.w	r8, r8, #1
 800511e:	700a      	strb	r2, [r1, #0]
 8005120:	781a      	ldrb	r2, [r3, #0]
 8005122:	3201      	adds	r2, #1
 8005124:	701a      	strb	r2, [r3, #0]
 8005126:	e79f      	b.n	8005068 <_dtoa_r+0x648>
 8005128:	46c8      	mov	r8, r9
 800512a:	e7eb      	b.n	8005104 <_dtoa_r+0x6e4>
 800512c:	2200      	movs	r2, #0
 800512e:	4b72      	ldr	r3, [pc, #456]	; (80052f8 <_dtoa_r+0x8d8>)
 8005130:	f7fb f9ea 	bl	8000508 <__aeabi_dmul>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800513c:	2200      	movs	r2, #0
 800513e:	2300      	movs	r3, #0
 8005140:	f7fb fc4a 	bl	80009d8 <__aeabi_dcmpeq>
 8005144:	2800      	cmp	r0, #0
 8005146:	d098      	beq.n	800507a <_dtoa_r+0x65a>
 8005148:	e7cb      	b.n	80050e2 <_dtoa_r+0x6c2>
 800514a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800514c:	2a00      	cmp	r2, #0
 800514e:	f000 80cd 	beq.w	80052ec <_dtoa_r+0x8cc>
 8005152:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005154:	2a01      	cmp	r2, #1
 8005156:	f300 80af 	bgt.w	80052b8 <_dtoa_r+0x898>
 800515a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800515c:	2a00      	cmp	r2, #0
 800515e:	f000 80a7 	beq.w	80052b0 <_dtoa_r+0x890>
 8005162:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005166:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005168:	9f06      	ldr	r7, [sp, #24]
 800516a:	9a06      	ldr	r2, [sp, #24]
 800516c:	2101      	movs	r1, #1
 800516e:	441a      	add	r2, r3
 8005170:	9206      	str	r2, [sp, #24]
 8005172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005174:	4628      	mov	r0, r5
 8005176:	441a      	add	r2, r3
 8005178:	9209      	str	r2, [sp, #36]	; 0x24
 800517a:	f000 fb61 	bl	8005840 <__i2b>
 800517e:	4606      	mov	r6, r0
 8005180:	2f00      	cmp	r7, #0
 8005182:	dd0c      	ble.n	800519e <_dtoa_r+0x77e>
 8005184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005186:	2b00      	cmp	r3, #0
 8005188:	dd09      	ble.n	800519e <_dtoa_r+0x77e>
 800518a:	42bb      	cmp	r3, r7
 800518c:	bfa8      	it	ge
 800518e:	463b      	movge	r3, r7
 8005190:	9a06      	ldr	r2, [sp, #24]
 8005192:	1aff      	subs	r7, r7, r3
 8005194:	1ad2      	subs	r2, r2, r3
 8005196:	9206      	str	r2, [sp, #24]
 8005198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	9309      	str	r3, [sp, #36]	; 0x24
 800519e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a0:	b1f3      	cbz	r3, 80051e0 <_dtoa_r+0x7c0>
 80051a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80a9 	beq.w	80052fc <_dtoa_r+0x8dc>
 80051aa:	2c00      	cmp	r4, #0
 80051ac:	dd10      	ble.n	80051d0 <_dtoa_r+0x7b0>
 80051ae:	4631      	mov	r1, r6
 80051b0:	4622      	mov	r2, r4
 80051b2:	4628      	mov	r0, r5
 80051b4:	f000 fbfe 	bl	80059b4 <__pow5mult>
 80051b8:	4652      	mov	r2, sl
 80051ba:	4601      	mov	r1, r0
 80051bc:	4606      	mov	r6, r0
 80051be:	4628      	mov	r0, r5
 80051c0:	f000 fb54 	bl	800586c <__multiply>
 80051c4:	4680      	mov	r8, r0
 80051c6:	4651      	mov	r1, sl
 80051c8:	4628      	mov	r0, r5
 80051ca:	f000 fa7f 	bl	80056cc <_Bfree>
 80051ce:	46c2      	mov	sl, r8
 80051d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051d2:	1b1a      	subs	r2, r3, r4
 80051d4:	d004      	beq.n	80051e0 <_dtoa_r+0x7c0>
 80051d6:	4651      	mov	r1, sl
 80051d8:	4628      	mov	r0, r5
 80051da:	f000 fbeb 	bl	80059b4 <__pow5mult>
 80051de:	4682      	mov	sl, r0
 80051e0:	2101      	movs	r1, #1
 80051e2:	4628      	mov	r0, r5
 80051e4:	f000 fb2c 	bl	8005840 <__i2b>
 80051e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051ea:	4604      	mov	r4, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f340 8087 	ble.w	8005300 <_dtoa_r+0x8e0>
 80051f2:	461a      	mov	r2, r3
 80051f4:	4601      	mov	r1, r0
 80051f6:	4628      	mov	r0, r5
 80051f8:	f000 fbdc 	bl	80059b4 <__pow5mult>
 80051fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051fe:	4604      	mov	r4, r0
 8005200:	2b01      	cmp	r3, #1
 8005202:	f340 8080 	ble.w	8005306 <_dtoa_r+0x8e6>
 8005206:	f04f 0800 	mov.w	r8, #0
 800520a:	6923      	ldr	r3, [r4, #16]
 800520c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005210:	6918      	ldr	r0, [r3, #16]
 8005212:	f000 fac7 	bl	80057a4 <__hi0bits>
 8005216:	f1c0 0020 	rsb	r0, r0, #32
 800521a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800521c:	4418      	add	r0, r3
 800521e:	f010 001f 	ands.w	r0, r0, #31
 8005222:	f000 8092 	beq.w	800534a <_dtoa_r+0x92a>
 8005226:	f1c0 0320 	rsb	r3, r0, #32
 800522a:	2b04      	cmp	r3, #4
 800522c:	f340 808a 	ble.w	8005344 <_dtoa_r+0x924>
 8005230:	f1c0 001c 	rsb	r0, r0, #28
 8005234:	9b06      	ldr	r3, [sp, #24]
 8005236:	4407      	add	r7, r0
 8005238:	4403      	add	r3, r0
 800523a:	9306      	str	r3, [sp, #24]
 800523c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800523e:	4403      	add	r3, r0
 8005240:	9309      	str	r3, [sp, #36]	; 0x24
 8005242:	9b06      	ldr	r3, [sp, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	dd05      	ble.n	8005254 <_dtoa_r+0x834>
 8005248:	4651      	mov	r1, sl
 800524a:	461a      	mov	r2, r3
 800524c:	4628      	mov	r0, r5
 800524e:	f000 fc0b 	bl	8005a68 <__lshift>
 8005252:	4682      	mov	sl, r0
 8005254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	dd05      	ble.n	8005266 <_dtoa_r+0x846>
 800525a:	4621      	mov	r1, r4
 800525c:	461a      	mov	r2, r3
 800525e:	4628      	mov	r0, r5
 8005260:	f000 fc02 	bl	8005a68 <__lshift>
 8005264:	4604      	mov	r4, r0
 8005266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d070      	beq.n	800534e <_dtoa_r+0x92e>
 800526c:	4621      	mov	r1, r4
 800526e:	4650      	mov	r0, sl
 8005270:	f000 fc66 	bl	8005b40 <__mcmp>
 8005274:	2800      	cmp	r0, #0
 8005276:	da6a      	bge.n	800534e <_dtoa_r+0x92e>
 8005278:	2300      	movs	r3, #0
 800527a:	4651      	mov	r1, sl
 800527c:	220a      	movs	r2, #10
 800527e:	4628      	mov	r0, r5
 8005280:	f000 fa46 	bl	8005710 <__multadd>
 8005284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005286:	4682      	mov	sl, r0
 8005288:	f109 39ff 	add.w	r9, r9, #4294967295
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 8193 	beq.w	80055b8 <_dtoa_r+0xb98>
 8005292:	4631      	mov	r1, r6
 8005294:	2300      	movs	r3, #0
 8005296:	220a      	movs	r2, #10
 8005298:	4628      	mov	r0, r5
 800529a:	f000 fa39 	bl	8005710 <__multadd>
 800529e:	f1bb 0f00 	cmp.w	fp, #0
 80052a2:	4606      	mov	r6, r0
 80052a4:	f300 8093 	bgt.w	80053ce <_dtoa_r+0x9ae>
 80052a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	dc57      	bgt.n	800535e <_dtoa_r+0x93e>
 80052ae:	e08e      	b.n	80053ce <_dtoa_r+0x9ae>
 80052b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80052b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052b6:	e756      	b.n	8005166 <_dtoa_r+0x746>
 80052b8:	9b02      	ldr	r3, [sp, #8]
 80052ba:	1e5c      	subs	r4, r3, #1
 80052bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052be:	42a3      	cmp	r3, r4
 80052c0:	bfb7      	itett	lt
 80052c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80052c4:	1b1c      	subge	r4, r3, r4
 80052c6:	1ae2      	sublt	r2, r4, r3
 80052c8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80052ca:	bfbe      	ittt	lt
 80052cc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80052ce:	189b      	addlt	r3, r3, r2
 80052d0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80052d2:	9b02      	ldr	r3, [sp, #8]
 80052d4:	bfb8      	it	lt
 80052d6:	2400      	movlt	r4, #0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bfbb      	ittet	lt
 80052dc:	9b06      	ldrlt	r3, [sp, #24]
 80052de:	9a02      	ldrlt	r2, [sp, #8]
 80052e0:	9f06      	ldrge	r7, [sp, #24]
 80052e2:	1a9f      	sublt	r7, r3, r2
 80052e4:	bfac      	ite	ge
 80052e6:	9b02      	ldrge	r3, [sp, #8]
 80052e8:	2300      	movlt	r3, #0
 80052ea:	e73e      	b.n	800516a <_dtoa_r+0x74a>
 80052ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80052ee:	9f06      	ldr	r7, [sp, #24]
 80052f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80052f2:	e745      	b.n	8005180 <_dtoa_r+0x760>
 80052f4:	3fe00000 	.word	0x3fe00000
 80052f8:	40240000 	.word	0x40240000
 80052fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052fe:	e76a      	b.n	80051d6 <_dtoa_r+0x7b6>
 8005300:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005302:	2b01      	cmp	r3, #1
 8005304:	dc19      	bgt.n	800533a <_dtoa_r+0x91a>
 8005306:	9b04      	ldr	r3, [sp, #16]
 8005308:	b9bb      	cbnz	r3, 800533a <_dtoa_r+0x91a>
 800530a:	9b05      	ldr	r3, [sp, #20]
 800530c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005310:	b99b      	cbnz	r3, 800533a <_dtoa_r+0x91a>
 8005312:	9b05      	ldr	r3, [sp, #20]
 8005314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005318:	0d1b      	lsrs	r3, r3, #20
 800531a:	051b      	lsls	r3, r3, #20
 800531c:	b183      	cbz	r3, 8005340 <_dtoa_r+0x920>
 800531e:	f04f 0801 	mov.w	r8, #1
 8005322:	9b06      	ldr	r3, [sp, #24]
 8005324:	3301      	adds	r3, #1
 8005326:	9306      	str	r3, [sp, #24]
 8005328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800532a:	3301      	adds	r3, #1
 800532c:	9309      	str	r3, [sp, #36]	; 0x24
 800532e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	f47f af6a 	bne.w	800520a <_dtoa_r+0x7ea>
 8005336:	2001      	movs	r0, #1
 8005338:	e76f      	b.n	800521a <_dtoa_r+0x7fa>
 800533a:	f04f 0800 	mov.w	r8, #0
 800533e:	e7f6      	b.n	800532e <_dtoa_r+0x90e>
 8005340:	4698      	mov	r8, r3
 8005342:	e7f4      	b.n	800532e <_dtoa_r+0x90e>
 8005344:	f43f af7d 	beq.w	8005242 <_dtoa_r+0x822>
 8005348:	4618      	mov	r0, r3
 800534a:	301c      	adds	r0, #28
 800534c:	e772      	b.n	8005234 <_dtoa_r+0x814>
 800534e:	9b02      	ldr	r3, [sp, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	dc36      	bgt.n	80053c2 <_dtoa_r+0x9a2>
 8005354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005356:	2b02      	cmp	r3, #2
 8005358:	dd33      	ble.n	80053c2 <_dtoa_r+0x9a2>
 800535a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800535e:	f1bb 0f00 	cmp.w	fp, #0
 8005362:	d10d      	bne.n	8005380 <_dtoa_r+0x960>
 8005364:	4621      	mov	r1, r4
 8005366:	465b      	mov	r3, fp
 8005368:	2205      	movs	r2, #5
 800536a:	4628      	mov	r0, r5
 800536c:	f000 f9d0 	bl	8005710 <__multadd>
 8005370:	4601      	mov	r1, r0
 8005372:	4604      	mov	r4, r0
 8005374:	4650      	mov	r0, sl
 8005376:	f000 fbe3 	bl	8005b40 <__mcmp>
 800537a:	2800      	cmp	r0, #0
 800537c:	f73f adb6 	bgt.w	8004eec <_dtoa_r+0x4cc>
 8005380:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005382:	9f08      	ldr	r7, [sp, #32]
 8005384:	ea6f 0903 	mvn.w	r9, r3
 8005388:	f04f 0800 	mov.w	r8, #0
 800538c:	4621      	mov	r1, r4
 800538e:	4628      	mov	r0, r5
 8005390:	f000 f99c 	bl	80056cc <_Bfree>
 8005394:	2e00      	cmp	r6, #0
 8005396:	f43f aea4 	beq.w	80050e2 <_dtoa_r+0x6c2>
 800539a:	f1b8 0f00 	cmp.w	r8, #0
 800539e:	d005      	beq.n	80053ac <_dtoa_r+0x98c>
 80053a0:	45b0      	cmp	r8, r6
 80053a2:	d003      	beq.n	80053ac <_dtoa_r+0x98c>
 80053a4:	4641      	mov	r1, r8
 80053a6:	4628      	mov	r0, r5
 80053a8:	f000 f990 	bl	80056cc <_Bfree>
 80053ac:	4631      	mov	r1, r6
 80053ae:	4628      	mov	r0, r5
 80053b0:	f000 f98c 	bl	80056cc <_Bfree>
 80053b4:	e695      	b.n	80050e2 <_dtoa_r+0x6c2>
 80053b6:	2400      	movs	r4, #0
 80053b8:	4626      	mov	r6, r4
 80053ba:	e7e1      	b.n	8005380 <_dtoa_r+0x960>
 80053bc:	46c1      	mov	r9, r8
 80053be:	4626      	mov	r6, r4
 80053c0:	e594      	b.n	8004eec <_dtoa_r+0x4cc>
 80053c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 80fc 	beq.w	80055c6 <_dtoa_r+0xba6>
 80053ce:	2f00      	cmp	r7, #0
 80053d0:	dd05      	ble.n	80053de <_dtoa_r+0x9be>
 80053d2:	4631      	mov	r1, r6
 80053d4:	463a      	mov	r2, r7
 80053d6:	4628      	mov	r0, r5
 80053d8:	f000 fb46 	bl	8005a68 <__lshift>
 80053dc:	4606      	mov	r6, r0
 80053de:	f1b8 0f00 	cmp.w	r8, #0
 80053e2:	d05c      	beq.n	800549e <_dtoa_r+0xa7e>
 80053e4:	4628      	mov	r0, r5
 80053e6:	6871      	ldr	r1, [r6, #4]
 80053e8:	f000 f930 	bl	800564c <_Balloc>
 80053ec:	4607      	mov	r7, r0
 80053ee:	b928      	cbnz	r0, 80053fc <_dtoa_r+0x9dc>
 80053f0:	4602      	mov	r2, r0
 80053f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80053f6:	4b7e      	ldr	r3, [pc, #504]	; (80055f0 <_dtoa_r+0xbd0>)
 80053f8:	f7ff bb26 	b.w	8004a48 <_dtoa_r+0x28>
 80053fc:	6932      	ldr	r2, [r6, #16]
 80053fe:	f106 010c 	add.w	r1, r6, #12
 8005402:	3202      	adds	r2, #2
 8005404:	0092      	lsls	r2, r2, #2
 8005406:	300c      	adds	r0, #12
 8005408:	f000 f912 	bl	8005630 <memcpy>
 800540c:	2201      	movs	r2, #1
 800540e:	4639      	mov	r1, r7
 8005410:	4628      	mov	r0, r5
 8005412:	f000 fb29 	bl	8005a68 <__lshift>
 8005416:	46b0      	mov	r8, r6
 8005418:	4606      	mov	r6, r0
 800541a:	9b08      	ldr	r3, [sp, #32]
 800541c:	3301      	adds	r3, #1
 800541e:	9302      	str	r3, [sp, #8]
 8005420:	9b08      	ldr	r3, [sp, #32]
 8005422:	445b      	add	r3, fp
 8005424:	930a      	str	r3, [sp, #40]	; 0x28
 8005426:	9b04      	ldr	r3, [sp, #16]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	9309      	str	r3, [sp, #36]	; 0x24
 800542e:	9b02      	ldr	r3, [sp, #8]
 8005430:	4621      	mov	r1, r4
 8005432:	4650      	mov	r0, sl
 8005434:	f103 3bff 	add.w	fp, r3, #4294967295
 8005438:	f7ff fa62 	bl	8004900 <quorem>
 800543c:	4603      	mov	r3, r0
 800543e:	4641      	mov	r1, r8
 8005440:	3330      	adds	r3, #48	; 0x30
 8005442:	9004      	str	r0, [sp, #16]
 8005444:	4650      	mov	r0, sl
 8005446:	930b      	str	r3, [sp, #44]	; 0x2c
 8005448:	f000 fb7a 	bl	8005b40 <__mcmp>
 800544c:	4632      	mov	r2, r6
 800544e:	9006      	str	r0, [sp, #24]
 8005450:	4621      	mov	r1, r4
 8005452:	4628      	mov	r0, r5
 8005454:	f000 fb90 	bl	8005b78 <__mdiff>
 8005458:	68c2      	ldr	r2, [r0, #12]
 800545a:	4607      	mov	r7, r0
 800545c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800545e:	bb02      	cbnz	r2, 80054a2 <_dtoa_r+0xa82>
 8005460:	4601      	mov	r1, r0
 8005462:	4650      	mov	r0, sl
 8005464:	f000 fb6c 	bl	8005b40 <__mcmp>
 8005468:	4602      	mov	r2, r0
 800546a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800546c:	4639      	mov	r1, r7
 800546e:	4628      	mov	r0, r5
 8005470:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005474:	f000 f92a 	bl	80056cc <_Bfree>
 8005478:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800547a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800547c:	9f02      	ldr	r7, [sp, #8]
 800547e:	ea43 0102 	orr.w	r1, r3, r2
 8005482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005484:	430b      	orrs	r3, r1
 8005486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005488:	d10d      	bne.n	80054a6 <_dtoa_r+0xa86>
 800548a:	2b39      	cmp	r3, #57	; 0x39
 800548c:	d027      	beq.n	80054de <_dtoa_r+0xabe>
 800548e:	9a06      	ldr	r2, [sp, #24]
 8005490:	2a00      	cmp	r2, #0
 8005492:	dd01      	ble.n	8005498 <_dtoa_r+0xa78>
 8005494:	9b04      	ldr	r3, [sp, #16]
 8005496:	3331      	adds	r3, #49	; 0x31
 8005498:	f88b 3000 	strb.w	r3, [fp]
 800549c:	e776      	b.n	800538c <_dtoa_r+0x96c>
 800549e:	4630      	mov	r0, r6
 80054a0:	e7b9      	b.n	8005416 <_dtoa_r+0x9f6>
 80054a2:	2201      	movs	r2, #1
 80054a4:	e7e2      	b.n	800546c <_dtoa_r+0xa4c>
 80054a6:	9906      	ldr	r1, [sp, #24]
 80054a8:	2900      	cmp	r1, #0
 80054aa:	db04      	blt.n	80054b6 <_dtoa_r+0xa96>
 80054ac:	9822      	ldr	r0, [sp, #136]	; 0x88
 80054ae:	4301      	orrs	r1, r0
 80054b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054b2:	4301      	orrs	r1, r0
 80054b4:	d120      	bne.n	80054f8 <_dtoa_r+0xad8>
 80054b6:	2a00      	cmp	r2, #0
 80054b8:	ddee      	ble.n	8005498 <_dtoa_r+0xa78>
 80054ba:	4651      	mov	r1, sl
 80054bc:	2201      	movs	r2, #1
 80054be:	4628      	mov	r0, r5
 80054c0:	9302      	str	r3, [sp, #8]
 80054c2:	f000 fad1 	bl	8005a68 <__lshift>
 80054c6:	4621      	mov	r1, r4
 80054c8:	4682      	mov	sl, r0
 80054ca:	f000 fb39 	bl	8005b40 <__mcmp>
 80054ce:	2800      	cmp	r0, #0
 80054d0:	9b02      	ldr	r3, [sp, #8]
 80054d2:	dc02      	bgt.n	80054da <_dtoa_r+0xaba>
 80054d4:	d1e0      	bne.n	8005498 <_dtoa_r+0xa78>
 80054d6:	07da      	lsls	r2, r3, #31
 80054d8:	d5de      	bpl.n	8005498 <_dtoa_r+0xa78>
 80054da:	2b39      	cmp	r3, #57	; 0x39
 80054dc:	d1da      	bne.n	8005494 <_dtoa_r+0xa74>
 80054de:	2339      	movs	r3, #57	; 0x39
 80054e0:	f88b 3000 	strb.w	r3, [fp]
 80054e4:	463b      	mov	r3, r7
 80054e6:	461f      	mov	r7, r3
 80054e8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80054ec:	3b01      	subs	r3, #1
 80054ee:	2a39      	cmp	r2, #57	; 0x39
 80054f0:	d050      	beq.n	8005594 <_dtoa_r+0xb74>
 80054f2:	3201      	adds	r2, #1
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	e749      	b.n	800538c <_dtoa_r+0x96c>
 80054f8:	2a00      	cmp	r2, #0
 80054fa:	dd03      	ble.n	8005504 <_dtoa_r+0xae4>
 80054fc:	2b39      	cmp	r3, #57	; 0x39
 80054fe:	d0ee      	beq.n	80054de <_dtoa_r+0xabe>
 8005500:	3301      	adds	r3, #1
 8005502:	e7c9      	b.n	8005498 <_dtoa_r+0xa78>
 8005504:	9a02      	ldr	r2, [sp, #8]
 8005506:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005508:	f802 3c01 	strb.w	r3, [r2, #-1]
 800550c:	428a      	cmp	r2, r1
 800550e:	d02a      	beq.n	8005566 <_dtoa_r+0xb46>
 8005510:	4651      	mov	r1, sl
 8005512:	2300      	movs	r3, #0
 8005514:	220a      	movs	r2, #10
 8005516:	4628      	mov	r0, r5
 8005518:	f000 f8fa 	bl	8005710 <__multadd>
 800551c:	45b0      	cmp	r8, r6
 800551e:	4682      	mov	sl, r0
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	f04f 020a 	mov.w	r2, #10
 8005528:	4641      	mov	r1, r8
 800552a:	4628      	mov	r0, r5
 800552c:	d107      	bne.n	800553e <_dtoa_r+0xb1e>
 800552e:	f000 f8ef 	bl	8005710 <__multadd>
 8005532:	4680      	mov	r8, r0
 8005534:	4606      	mov	r6, r0
 8005536:	9b02      	ldr	r3, [sp, #8]
 8005538:	3301      	adds	r3, #1
 800553a:	9302      	str	r3, [sp, #8]
 800553c:	e777      	b.n	800542e <_dtoa_r+0xa0e>
 800553e:	f000 f8e7 	bl	8005710 <__multadd>
 8005542:	4631      	mov	r1, r6
 8005544:	4680      	mov	r8, r0
 8005546:	2300      	movs	r3, #0
 8005548:	220a      	movs	r2, #10
 800554a:	4628      	mov	r0, r5
 800554c:	f000 f8e0 	bl	8005710 <__multadd>
 8005550:	4606      	mov	r6, r0
 8005552:	e7f0      	b.n	8005536 <_dtoa_r+0xb16>
 8005554:	f1bb 0f00 	cmp.w	fp, #0
 8005558:	bfcc      	ite	gt
 800555a:	465f      	movgt	r7, fp
 800555c:	2701      	movle	r7, #1
 800555e:	f04f 0800 	mov.w	r8, #0
 8005562:	9a08      	ldr	r2, [sp, #32]
 8005564:	4417      	add	r7, r2
 8005566:	4651      	mov	r1, sl
 8005568:	2201      	movs	r2, #1
 800556a:	4628      	mov	r0, r5
 800556c:	9302      	str	r3, [sp, #8]
 800556e:	f000 fa7b 	bl	8005a68 <__lshift>
 8005572:	4621      	mov	r1, r4
 8005574:	4682      	mov	sl, r0
 8005576:	f000 fae3 	bl	8005b40 <__mcmp>
 800557a:	2800      	cmp	r0, #0
 800557c:	dcb2      	bgt.n	80054e4 <_dtoa_r+0xac4>
 800557e:	d102      	bne.n	8005586 <_dtoa_r+0xb66>
 8005580:	9b02      	ldr	r3, [sp, #8]
 8005582:	07db      	lsls	r3, r3, #31
 8005584:	d4ae      	bmi.n	80054e4 <_dtoa_r+0xac4>
 8005586:	463b      	mov	r3, r7
 8005588:	461f      	mov	r7, r3
 800558a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800558e:	2a30      	cmp	r2, #48	; 0x30
 8005590:	d0fa      	beq.n	8005588 <_dtoa_r+0xb68>
 8005592:	e6fb      	b.n	800538c <_dtoa_r+0x96c>
 8005594:	9a08      	ldr	r2, [sp, #32]
 8005596:	429a      	cmp	r2, r3
 8005598:	d1a5      	bne.n	80054e6 <_dtoa_r+0xac6>
 800559a:	2331      	movs	r3, #49	; 0x31
 800559c:	f109 0901 	add.w	r9, r9, #1
 80055a0:	7013      	strb	r3, [r2, #0]
 80055a2:	e6f3      	b.n	800538c <_dtoa_r+0x96c>
 80055a4:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <_dtoa_r+0xbd4>)
 80055a6:	f7ff baa7 	b.w	8004af8 <_dtoa_r+0xd8>
 80055aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f47f aa80 	bne.w	8004ab2 <_dtoa_r+0x92>
 80055b2:	4b11      	ldr	r3, [pc, #68]	; (80055f8 <_dtoa_r+0xbd8>)
 80055b4:	f7ff baa0 	b.w	8004af8 <_dtoa_r+0xd8>
 80055b8:	f1bb 0f00 	cmp.w	fp, #0
 80055bc:	dc03      	bgt.n	80055c6 <_dtoa_r+0xba6>
 80055be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	f73f aecc 	bgt.w	800535e <_dtoa_r+0x93e>
 80055c6:	9f08      	ldr	r7, [sp, #32]
 80055c8:	4621      	mov	r1, r4
 80055ca:	4650      	mov	r0, sl
 80055cc:	f7ff f998 	bl	8004900 <quorem>
 80055d0:	9a08      	ldr	r2, [sp, #32]
 80055d2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80055d6:	f807 3b01 	strb.w	r3, [r7], #1
 80055da:	1aba      	subs	r2, r7, r2
 80055dc:	4593      	cmp	fp, r2
 80055de:	ddb9      	ble.n	8005554 <_dtoa_r+0xb34>
 80055e0:	4651      	mov	r1, sl
 80055e2:	2300      	movs	r3, #0
 80055e4:	220a      	movs	r2, #10
 80055e6:	4628      	mov	r0, r5
 80055e8:	f000 f892 	bl	8005710 <__multadd>
 80055ec:	4682      	mov	sl, r0
 80055ee:	e7eb      	b.n	80055c8 <_dtoa_r+0xba8>
 80055f0:	08006e77 	.word	0x08006e77
 80055f4:	08006dd0 	.word	0x08006dd0
 80055f8:	08006df4 	.word	0x08006df4

080055fc <_localeconv_r>:
 80055fc:	4800      	ldr	r0, [pc, #0]	; (8005600 <_localeconv_r+0x4>)
 80055fe:	4770      	bx	lr
 8005600:	20000160 	.word	0x20000160

08005604 <malloc>:
 8005604:	4b02      	ldr	r3, [pc, #8]	; (8005610 <malloc+0xc>)
 8005606:	4601      	mov	r1, r0
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	f000 bbfb 	b.w	8005e04 <_malloc_r>
 800560e:	bf00      	nop
 8005610:	2000000c 	.word	0x2000000c

08005614 <memchr>:
 8005614:	4603      	mov	r3, r0
 8005616:	b510      	push	{r4, lr}
 8005618:	b2c9      	uxtb	r1, r1
 800561a:	4402      	add	r2, r0
 800561c:	4293      	cmp	r3, r2
 800561e:	4618      	mov	r0, r3
 8005620:	d101      	bne.n	8005626 <memchr+0x12>
 8005622:	2000      	movs	r0, #0
 8005624:	e003      	b.n	800562e <memchr+0x1a>
 8005626:	7804      	ldrb	r4, [r0, #0]
 8005628:	3301      	adds	r3, #1
 800562a:	428c      	cmp	r4, r1
 800562c:	d1f6      	bne.n	800561c <memchr+0x8>
 800562e:	bd10      	pop	{r4, pc}

08005630 <memcpy>:
 8005630:	440a      	add	r2, r1
 8005632:	4291      	cmp	r1, r2
 8005634:	f100 33ff 	add.w	r3, r0, #4294967295
 8005638:	d100      	bne.n	800563c <memcpy+0xc>
 800563a:	4770      	bx	lr
 800563c:	b510      	push	{r4, lr}
 800563e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005642:	4291      	cmp	r1, r2
 8005644:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005648:	d1f9      	bne.n	800563e <memcpy+0xe>
 800564a:	bd10      	pop	{r4, pc}

0800564c <_Balloc>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005650:	4604      	mov	r4, r0
 8005652:	460d      	mov	r5, r1
 8005654:	b976      	cbnz	r6, 8005674 <_Balloc+0x28>
 8005656:	2010      	movs	r0, #16
 8005658:	f7ff ffd4 	bl	8005604 <malloc>
 800565c:	4602      	mov	r2, r0
 800565e:	6260      	str	r0, [r4, #36]	; 0x24
 8005660:	b920      	cbnz	r0, 800566c <_Balloc+0x20>
 8005662:	2166      	movs	r1, #102	; 0x66
 8005664:	4b17      	ldr	r3, [pc, #92]	; (80056c4 <_Balloc+0x78>)
 8005666:	4818      	ldr	r0, [pc, #96]	; (80056c8 <_Balloc+0x7c>)
 8005668:	f000 fd92 	bl	8006190 <__assert_func>
 800566c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005670:	6006      	str	r6, [r0, #0]
 8005672:	60c6      	str	r6, [r0, #12]
 8005674:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005676:	68f3      	ldr	r3, [r6, #12]
 8005678:	b183      	cbz	r3, 800569c <_Balloc+0x50>
 800567a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005682:	b9b8      	cbnz	r0, 80056b4 <_Balloc+0x68>
 8005684:	2101      	movs	r1, #1
 8005686:	fa01 f605 	lsl.w	r6, r1, r5
 800568a:	1d72      	adds	r2, r6, #5
 800568c:	4620      	mov	r0, r4
 800568e:	0092      	lsls	r2, r2, #2
 8005690:	f000 fb5e 	bl	8005d50 <_calloc_r>
 8005694:	b160      	cbz	r0, 80056b0 <_Balloc+0x64>
 8005696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800569a:	e00e      	b.n	80056ba <_Balloc+0x6e>
 800569c:	2221      	movs	r2, #33	; 0x21
 800569e:	2104      	movs	r1, #4
 80056a0:	4620      	mov	r0, r4
 80056a2:	f000 fb55 	bl	8005d50 <_calloc_r>
 80056a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056a8:	60f0      	str	r0, [r6, #12]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e4      	bne.n	800567a <_Balloc+0x2e>
 80056b0:	2000      	movs	r0, #0
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	6802      	ldr	r2, [r0, #0]
 80056b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80056ba:	2300      	movs	r3, #0
 80056bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80056c0:	e7f7      	b.n	80056b2 <_Balloc+0x66>
 80056c2:	bf00      	nop
 80056c4:	08006e01 	.word	0x08006e01
 80056c8:	08006e88 	.word	0x08006e88

080056cc <_Bfree>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80056d0:	4605      	mov	r5, r0
 80056d2:	460c      	mov	r4, r1
 80056d4:	b976      	cbnz	r6, 80056f4 <_Bfree+0x28>
 80056d6:	2010      	movs	r0, #16
 80056d8:	f7ff ff94 	bl	8005604 <malloc>
 80056dc:	4602      	mov	r2, r0
 80056de:	6268      	str	r0, [r5, #36]	; 0x24
 80056e0:	b920      	cbnz	r0, 80056ec <_Bfree+0x20>
 80056e2:	218a      	movs	r1, #138	; 0x8a
 80056e4:	4b08      	ldr	r3, [pc, #32]	; (8005708 <_Bfree+0x3c>)
 80056e6:	4809      	ldr	r0, [pc, #36]	; (800570c <_Bfree+0x40>)
 80056e8:	f000 fd52 	bl	8006190 <__assert_func>
 80056ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056f0:	6006      	str	r6, [r0, #0]
 80056f2:	60c6      	str	r6, [r0, #12]
 80056f4:	b13c      	cbz	r4, 8005706 <_Bfree+0x3a>
 80056f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80056f8:	6862      	ldr	r2, [r4, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005700:	6021      	str	r1, [r4, #0]
 8005702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005706:	bd70      	pop	{r4, r5, r6, pc}
 8005708:	08006e01 	.word	0x08006e01
 800570c:	08006e88 	.word	0x08006e88

08005710 <__multadd>:
 8005710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005714:	4698      	mov	r8, r3
 8005716:	460c      	mov	r4, r1
 8005718:	2300      	movs	r3, #0
 800571a:	690e      	ldr	r6, [r1, #16]
 800571c:	4607      	mov	r7, r0
 800571e:	f101 0014 	add.w	r0, r1, #20
 8005722:	6805      	ldr	r5, [r0, #0]
 8005724:	3301      	adds	r3, #1
 8005726:	b2a9      	uxth	r1, r5
 8005728:	fb02 8101 	mla	r1, r2, r1, r8
 800572c:	0c2d      	lsrs	r5, r5, #16
 800572e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005732:	fb02 c505 	mla	r5, r2, r5, ip
 8005736:	b289      	uxth	r1, r1
 8005738:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800573c:	429e      	cmp	r6, r3
 800573e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005742:	f840 1b04 	str.w	r1, [r0], #4
 8005746:	dcec      	bgt.n	8005722 <__multadd+0x12>
 8005748:	f1b8 0f00 	cmp.w	r8, #0
 800574c:	d022      	beq.n	8005794 <__multadd+0x84>
 800574e:	68a3      	ldr	r3, [r4, #8]
 8005750:	42b3      	cmp	r3, r6
 8005752:	dc19      	bgt.n	8005788 <__multadd+0x78>
 8005754:	6861      	ldr	r1, [r4, #4]
 8005756:	4638      	mov	r0, r7
 8005758:	3101      	adds	r1, #1
 800575a:	f7ff ff77 	bl	800564c <_Balloc>
 800575e:	4605      	mov	r5, r0
 8005760:	b928      	cbnz	r0, 800576e <__multadd+0x5e>
 8005762:	4602      	mov	r2, r0
 8005764:	21b5      	movs	r1, #181	; 0xb5
 8005766:	4b0d      	ldr	r3, [pc, #52]	; (800579c <__multadd+0x8c>)
 8005768:	480d      	ldr	r0, [pc, #52]	; (80057a0 <__multadd+0x90>)
 800576a:	f000 fd11 	bl	8006190 <__assert_func>
 800576e:	6922      	ldr	r2, [r4, #16]
 8005770:	f104 010c 	add.w	r1, r4, #12
 8005774:	3202      	adds	r2, #2
 8005776:	0092      	lsls	r2, r2, #2
 8005778:	300c      	adds	r0, #12
 800577a:	f7ff ff59 	bl	8005630 <memcpy>
 800577e:	4621      	mov	r1, r4
 8005780:	4638      	mov	r0, r7
 8005782:	f7ff ffa3 	bl	80056cc <_Bfree>
 8005786:	462c      	mov	r4, r5
 8005788:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800578c:	3601      	adds	r6, #1
 800578e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005792:	6126      	str	r6, [r4, #16]
 8005794:	4620      	mov	r0, r4
 8005796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800579a:	bf00      	nop
 800579c:	08006e77 	.word	0x08006e77
 80057a0:	08006e88 	.word	0x08006e88

080057a4 <__hi0bits>:
 80057a4:	0c02      	lsrs	r2, r0, #16
 80057a6:	0412      	lsls	r2, r2, #16
 80057a8:	4603      	mov	r3, r0
 80057aa:	b9ca      	cbnz	r2, 80057e0 <__hi0bits+0x3c>
 80057ac:	0403      	lsls	r3, r0, #16
 80057ae:	2010      	movs	r0, #16
 80057b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80057b4:	bf04      	itt	eq
 80057b6:	021b      	lsleq	r3, r3, #8
 80057b8:	3008      	addeq	r0, #8
 80057ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80057be:	bf04      	itt	eq
 80057c0:	011b      	lsleq	r3, r3, #4
 80057c2:	3004      	addeq	r0, #4
 80057c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80057c8:	bf04      	itt	eq
 80057ca:	009b      	lsleq	r3, r3, #2
 80057cc:	3002      	addeq	r0, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	db05      	blt.n	80057de <__hi0bits+0x3a>
 80057d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80057d6:	f100 0001 	add.w	r0, r0, #1
 80057da:	bf08      	it	eq
 80057dc:	2020      	moveq	r0, #32
 80057de:	4770      	bx	lr
 80057e0:	2000      	movs	r0, #0
 80057e2:	e7e5      	b.n	80057b0 <__hi0bits+0xc>

080057e4 <__lo0bits>:
 80057e4:	6803      	ldr	r3, [r0, #0]
 80057e6:	4602      	mov	r2, r0
 80057e8:	f013 0007 	ands.w	r0, r3, #7
 80057ec:	d00b      	beq.n	8005806 <__lo0bits+0x22>
 80057ee:	07d9      	lsls	r1, r3, #31
 80057f0:	d422      	bmi.n	8005838 <__lo0bits+0x54>
 80057f2:	0798      	lsls	r0, r3, #30
 80057f4:	bf49      	itett	mi
 80057f6:	085b      	lsrmi	r3, r3, #1
 80057f8:	089b      	lsrpl	r3, r3, #2
 80057fa:	2001      	movmi	r0, #1
 80057fc:	6013      	strmi	r3, [r2, #0]
 80057fe:	bf5c      	itt	pl
 8005800:	2002      	movpl	r0, #2
 8005802:	6013      	strpl	r3, [r2, #0]
 8005804:	4770      	bx	lr
 8005806:	b299      	uxth	r1, r3
 8005808:	b909      	cbnz	r1, 800580e <__lo0bits+0x2a>
 800580a:	2010      	movs	r0, #16
 800580c:	0c1b      	lsrs	r3, r3, #16
 800580e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005812:	bf04      	itt	eq
 8005814:	0a1b      	lsreq	r3, r3, #8
 8005816:	3008      	addeq	r0, #8
 8005818:	0719      	lsls	r1, r3, #28
 800581a:	bf04      	itt	eq
 800581c:	091b      	lsreq	r3, r3, #4
 800581e:	3004      	addeq	r0, #4
 8005820:	0799      	lsls	r1, r3, #30
 8005822:	bf04      	itt	eq
 8005824:	089b      	lsreq	r3, r3, #2
 8005826:	3002      	addeq	r0, #2
 8005828:	07d9      	lsls	r1, r3, #31
 800582a:	d403      	bmi.n	8005834 <__lo0bits+0x50>
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	f100 0001 	add.w	r0, r0, #1
 8005832:	d003      	beq.n	800583c <__lo0bits+0x58>
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	4770      	bx	lr
 8005838:	2000      	movs	r0, #0
 800583a:	4770      	bx	lr
 800583c:	2020      	movs	r0, #32
 800583e:	4770      	bx	lr

08005840 <__i2b>:
 8005840:	b510      	push	{r4, lr}
 8005842:	460c      	mov	r4, r1
 8005844:	2101      	movs	r1, #1
 8005846:	f7ff ff01 	bl	800564c <_Balloc>
 800584a:	4602      	mov	r2, r0
 800584c:	b928      	cbnz	r0, 800585a <__i2b+0x1a>
 800584e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005852:	4b04      	ldr	r3, [pc, #16]	; (8005864 <__i2b+0x24>)
 8005854:	4804      	ldr	r0, [pc, #16]	; (8005868 <__i2b+0x28>)
 8005856:	f000 fc9b 	bl	8006190 <__assert_func>
 800585a:	2301      	movs	r3, #1
 800585c:	6144      	str	r4, [r0, #20]
 800585e:	6103      	str	r3, [r0, #16]
 8005860:	bd10      	pop	{r4, pc}
 8005862:	bf00      	nop
 8005864:	08006e77 	.word	0x08006e77
 8005868:	08006e88 	.word	0x08006e88

0800586c <__multiply>:
 800586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005870:	4614      	mov	r4, r2
 8005872:	690a      	ldr	r2, [r1, #16]
 8005874:	6923      	ldr	r3, [r4, #16]
 8005876:	460d      	mov	r5, r1
 8005878:	429a      	cmp	r2, r3
 800587a:	bfbe      	ittt	lt
 800587c:	460b      	movlt	r3, r1
 800587e:	4625      	movlt	r5, r4
 8005880:	461c      	movlt	r4, r3
 8005882:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005886:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800588a:	68ab      	ldr	r3, [r5, #8]
 800588c:	6869      	ldr	r1, [r5, #4]
 800588e:	eb0a 0709 	add.w	r7, sl, r9
 8005892:	42bb      	cmp	r3, r7
 8005894:	b085      	sub	sp, #20
 8005896:	bfb8      	it	lt
 8005898:	3101      	addlt	r1, #1
 800589a:	f7ff fed7 	bl	800564c <_Balloc>
 800589e:	b930      	cbnz	r0, 80058ae <__multiply+0x42>
 80058a0:	4602      	mov	r2, r0
 80058a2:	f240 115d 	movw	r1, #349	; 0x15d
 80058a6:	4b41      	ldr	r3, [pc, #260]	; (80059ac <__multiply+0x140>)
 80058a8:	4841      	ldr	r0, [pc, #260]	; (80059b0 <__multiply+0x144>)
 80058aa:	f000 fc71 	bl	8006190 <__assert_func>
 80058ae:	f100 0614 	add.w	r6, r0, #20
 80058b2:	4633      	mov	r3, r6
 80058b4:	2200      	movs	r2, #0
 80058b6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80058ba:	4543      	cmp	r3, r8
 80058bc:	d31e      	bcc.n	80058fc <__multiply+0x90>
 80058be:	f105 0c14 	add.w	ip, r5, #20
 80058c2:	f104 0314 	add.w	r3, r4, #20
 80058c6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80058ca:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80058ce:	9202      	str	r2, [sp, #8]
 80058d0:	ebac 0205 	sub.w	r2, ip, r5
 80058d4:	3a15      	subs	r2, #21
 80058d6:	f022 0203 	bic.w	r2, r2, #3
 80058da:	3204      	adds	r2, #4
 80058dc:	f105 0115 	add.w	r1, r5, #21
 80058e0:	458c      	cmp	ip, r1
 80058e2:	bf38      	it	cc
 80058e4:	2204      	movcc	r2, #4
 80058e6:	9201      	str	r2, [sp, #4]
 80058e8:	9a02      	ldr	r2, [sp, #8]
 80058ea:	9303      	str	r3, [sp, #12]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d808      	bhi.n	8005902 <__multiply+0x96>
 80058f0:	2f00      	cmp	r7, #0
 80058f2:	dc55      	bgt.n	80059a0 <__multiply+0x134>
 80058f4:	6107      	str	r7, [r0, #16]
 80058f6:	b005      	add	sp, #20
 80058f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058fc:	f843 2b04 	str.w	r2, [r3], #4
 8005900:	e7db      	b.n	80058ba <__multiply+0x4e>
 8005902:	f8b3 a000 	ldrh.w	sl, [r3]
 8005906:	f1ba 0f00 	cmp.w	sl, #0
 800590a:	d020      	beq.n	800594e <__multiply+0xe2>
 800590c:	46b1      	mov	r9, r6
 800590e:	2200      	movs	r2, #0
 8005910:	f105 0e14 	add.w	lr, r5, #20
 8005914:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005918:	f8d9 b000 	ldr.w	fp, [r9]
 800591c:	b2a1      	uxth	r1, r4
 800591e:	fa1f fb8b 	uxth.w	fp, fp
 8005922:	fb0a b101 	mla	r1, sl, r1, fp
 8005926:	4411      	add	r1, r2
 8005928:	f8d9 2000 	ldr.w	r2, [r9]
 800592c:	0c24      	lsrs	r4, r4, #16
 800592e:	0c12      	lsrs	r2, r2, #16
 8005930:	fb0a 2404 	mla	r4, sl, r4, r2
 8005934:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005938:	b289      	uxth	r1, r1
 800593a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800593e:	45f4      	cmp	ip, lr
 8005940:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005944:	f849 1b04 	str.w	r1, [r9], #4
 8005948:	d8e4      	bhi.n	8005914 <__multiply+0xa8>
 800594a:	9901      	ldr	r1, [sp, #4]
 800594c:	5072      	str	r2, [r6, r1]
 800594e:	9a03      	ldr	r2, [sp, #12]
 8005950:	3304      	adds	r3, #4
 8005952:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005956:	f1b9 0f00 	cmp.w	r9, #0
 800595a:	d01f      	beq.n	800599c <__multiply+0x130>
 800595c:	46b6      	mov	lr, r6
 800595e:	f04f 0a00 	mov.w	sl, #0
 8005962:	6834      	ldr	r4, [r6, #0]
 8005964:	f105 0114 	add.w	r1, r5, #20
 8005968:	880a      	ldrh	r2, [r1, #0]
 800596a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800596e:	b2a4      	uxth	r4, r4
 8005970:	fb09 b202 	mla	r2, r9, r2, fp
 8005974:	4492      	add	sl, r2
 8005976:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800597a:	f84e 4b04 	str.w	r4, [lr], #4
 800597e:	f851 4b04 	ldr.w	r4, [r1], #4
 8005982:	f8be 2000 	ldrh.w	r2, [lr]
 8005986:	0c24      	lsrs	r4, r4, #16
 8005988:	fb09 2404 	mla	r4, r9, r4, r2
 800598c:	458c      	cmp	ip, r1
 800598e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005992:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005996:	d8e7      	bhi.n	8005968 <__multiply+0xfc>
 8005998:	9a01      	ldr	r2, [sp, #4]
 800599a:	50b4      	str	r4, [r6, r2]
 800599c:	3604      	adds	r6, #4
 800599e:	e7a3      	b.n	80058e8 <__multiply+0x7c>
 80059a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1a5      	bne.n	80058f4 <__multiply+0x88>
 80059a8:	3f01      	subs	r7, #1
 80059aa:	e7a1      	b.n	80058f0 <__multiply+0x84>
 80059ac:	08006e77 	.word	0x08006e77
 80059b0:	08006e88 	.word	0x08006e88

080059b4 <__pow5mult>:
 80059b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059b8:	4615      	mov	r5, r2
 80059ba:	f012 0203 	ands.w	r2, r2, #3
 80059be:	4606      	mov	r6, r0
 80059c0:	460f      	mov	r7, r1
 80059c2:	d007      	beq.n	80059d4 <__pow5mult+0x20>
 80059c4:	4c25      	ldr	r4, [pc, #148]	; (8005a5c <__pow5mult+0xa8>)
 80059c6:	3a01      	subs	r2, #1
 80059c8:	2300      	movs	r3, #0
 80059ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80059ce:	f7ff fe9f 	bl	8005710 <__multadd>
 80059d2:	4607      	mov	r7, r0
 80059d4:	10ad      	asrs	r5, r5, #2
 80059d6:	d03d      	beq.n	8005a54 <__pow5mult+0xa0>
 80059d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80059da:	b97c      	cbnz	r4, 80059fc <__pow5mult+0x48>
 80059dc:	2010      	movs	r0, #16
 80059de:	f7ff fe11 	bl	8005604 <malloc>
 80059e2:	4602      	mov	r2, r0
 80059e4:	6270      	str	r0, [r6, #36]	; 0x24
 80059e6:	b928      	cbnz	r0, 80059f4 <__pow5mult+0x40>
 80059e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80059ec:	4b1c      	ldr	r3, [pc, #112]	; (8005a60 <__pow5mult+0xac>)
 80059ee:	481d      	ldr	r0, [pc, #116]	; (8005a64 <__pow5mult+0xb0>)
 80059f0:	f000 fbce 	bl	8006190 <__assert_func>
 80059f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059f8:	6004      	str	r4, [r0, #0]
 80059fa:	60c4      	str	r4, [r0, #12]
 80059fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a04:	b94c      	cbnz	r4, 8005a1a <__pow5mult+0x66>
 8005a06:	f240 2171 	movw	r1, #625	; 0x271
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	f7ff ff18 	bl	8005840 <__i2b>
 8005a10:	2300      	movs	r3, #0
 8005a12:	4604      	mov	r4, r0
 8005a14:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a18:	6003      	str	r3, [r0, #0]
 8005a1a:	f04f 0900 	mov.w	r9, #0
 8005a1e:	07eb      	lsls	r3, r5, #31
 8005a20:	d50a      	bpl.n	8005a38 <__pow5mult+0x84>
 8005a22:	4639      	mov	r1, r7
 8005a24:	4622      	mov	r2, r4
 8005a26:	4630      	mov	r0, r6
 8005a28:	f7ff ff20 	bl	800586c <__multiply>
 8005a2c:	4680      	mov	r8, r0
 8005a2e:	4639      	mov	r1, r7
 8005a30:	4630      	mov	r0, r6
 8005a32:	f7ff fe4b 	bl	80056cc <_Bfree>
 8005a36:	4647      	mov	r7, r8
 8005a38:	106d      	asrs	r5, r5, #1
 8005a3a:	d00b      	beq.n	8005a54 <__pow5mult+0xa0>
 8005a3c:	6820      	ldr	r0, [r4, #0]
 8005a3e:	b938      	cbnz	r0, 8005a50 <__pow5mult+0x9c>
 8005a40:	4622      	mov	r2, r4
 8005a42:	4621      	mov	r1, r4
 8005a44:	4630      	mov	r0, r6
 8005a46:	f7ff ff11 	bl	800586c <__multiply>
 8005a4a:	6020      	str	r0, [r4, #0]
 8005a4c:	f8c0 9000 	str.w	r9, [r0]
 8005a50:	4604      	mov	r4, r0
 8005a52:	e7e4      	b.n	8005a1e <__pow5mult+0x6a>
 8005a54:	4638      	mov	r0, r7
 8005a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a5a:	bf00      	nop
 8005a5c:	08006fd8 	.word	0x08006fd8
 8005a60:	08006e01 	.word	0x08006e01
 8005a64:	08006e88 	.word	0x08006e88

08005a68 <__lshift>:
 8005a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a6c:	460c      	mov	r4, r1
 8005a6e:	4607      	mov	r7, r0
 8005a70:	4691      	mov	r9, r2
 8005a72:	6923      	ldr	r3, [r4, #16]
 8005a74:	6849      	ldr	r1, [r1, #4]
 8005a76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005a7a:	68a3      	ldr	r3, [r4, #8]
 8005a7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a80:	f108 0601 	add.w	r6, r8, #1
 8005a84:	42b3      	cmp	r3, r6
 8005a86:	db0b      	blt.n	8005aa0 <__lshift+0x38>
 8005a88:	4638      	mov	r0, r7
 8005a8a:	f7ff fddf 	bl	800564c <_Balloc>
 8005a8e:	4605      	mov	r5, r0
 8005a90:	b948      	cbnz	r0, 8005aa6 <__lshift+0x3e>
 8005a92:	4602      	mov	r2, r0
 8005a94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005a98:	4b27      	ldr	r3, [pc, #156]	; (8005b38 <__lshift+0xd0>)
 8005a9a:	4828      	ldr	r0, [pc, #160]	; (8005b3c <__lshift+0xd4>)
 8005a9c:	f000 fb78 	bl	8006190 <__assert_func>
 8005aa0:	3101      	adds	r1, #1
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	e7ee      	b.n	8005a84 <__lshift+0x1c>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f100 0114 	add.w	r1, r0, #20
 8005aac:	f100 0210 	add.w	r2, r0, #16
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	4553      	cmp	r3, sl
 8005ab4:	db33      	blt.n	8005b1e <__lshift+0xb6>
 8005ab6:	6920      	ldr	r0, [r4, #16]
 8005ab8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005abc:	f104 0314 	add.w	r3, r4, #20
 8005ac0:	f019 091f 	ands.w	r9, r9, #31
 8005ac4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ac8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005acc:	d02b      	beq.n	8005b26 <__lshift+0xbe>
 8005ace:	468a      	mov	sl, r1
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f1c9 0e20 	rsb	lr, r9, #32
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	fa00 f009 	lsl.w	r0, r0, r9
 8005adc:	4302      	orrs	r2, r0
 8005ade:	f84a 2b04 	str.w	r2, [sl], #4
 8005ae2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae6:	459c      	cmp	ip, r3
 8005ae8:	fa22 f20e 	lsr.w	r2, r2, lr
 8005aec:	d8f3      	bhi.n	8005ad6 <__lshift+0x6e>
 8005aee:	ebac 0304 	sub.w	r3, ip, r4
 8005af2:	3b15      	subs	r3, #21
 8005af4:	f023 0303 	bic.w	r3, r3, #3
 8005af8:	3304      	adds	r3, #4
 8005afa:	f104 0015 	add.w	r0, r4, #21
 8005afe:	4584      	cmp	ip, r0
 8005b00:	bf38      	it	cc
 8005b02:	2304      	movcc	r3, #4
 8005b04:	50ca      	str	r2, [r1, r3]
 8005b06:	b10a      	cbz	r2, 8005b0c <__lshift+0xa4>
 8005b08:	f108 0602 	add.w	r6, r8, #2
 8005b0c:	3e01      	subs	r6, #1
 8005b0e:	4638      	mov	r0, r7
 8005b10:	4621      	mov	r1, r4
 8005b12:	612e      	str	r6, [r5, #16]
 8005b14:	f7ff fdda 	bl	80056cc <_Bfree>
 8005b18:	4628      	mov	r0, r5
 8005b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b22:	3301      	adds	r3, #1
 8005b24:	e7c5      	b.n	8005ab2 <__lshift+0x4a>
 8005b26:	3904      	subs	r1, #4
 8005b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b2c:	459c      	cmp	ip, r3
 8005b2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b32:	d8f9      	bhi.n	8005b28 <__lshift+0xc0>
 8005b34:	e7ea      	b.n	8005b0c <__lshift+0xa4>
 8005b36:	bf00      	nop
 8005b38:	08006e77 	.word	0x08006e77
 8005b3c:	08006e88 	.word	0x08006e88

08005b40 <__mcmp>:
 8005b40:	4603      	mov	r3, r0
 8005b42:	690a      	ldr	r2, [r1, #16]
 8005b44:	6900      	ldr	r0, [r0, #16]
 8005b46:	b530      	push	{r4, r5, lr}
 8005b48:	1a80      	subs	r0, r0, r2
 8005b4a:	d10d      	bne.n	8005b68 <__mcmp+0x28>
 8005b4c:	3314      	adds	r3, #20
 8005b4e:	3114      	adds	r1, #20
 8005b50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005b54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005b58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b60:	4295      	cmp	r5, r2
 8005b62:	d002      	beq.n	8005b6a <__mcmp+0x2a>
 8005b64:	d304      	bcc.n	8005b70 <__mcmp+0x30>
 8005b66:	2001      	movs	r0, #1
 8005b68:	bd30      	pop	{r4, r5, pc}
 8005b6a:	42a3      	cmp	r3, r4
 8005b6c:	d3f4      	bcc.n	8005b58 <__mcmp+0x18>
 8005b6e:	e7fb      	b.n	8005b68 <__mcmp+0x28>
 8005b70:	f04f 30ff 	mov.w	r0, #4294967295
 8005b74:	e7f8      	b.n	8005b68 <__mcmp+0x28>
	...

08005b78 <__mdiff>:
 8005b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	4606      	mov	r6, r0
 8005b80:	4611      	mov	r1, r2
 8005b82:	4620      	mov	r0, r4
 8005b84:	4692      	mov	sl, r2
 8005b86:	f7ff ffdb 	bl	8005b40 <__mcmp>
 8005b8a:	1e05      	subs	r5, r0, #0
 8005b8c:	d111      	bne.n	8005bb2 <__mdiff+0x3a>
 8005b8e:	4629      	mov	r1, r5
 8005b90:	4630      	mov	r0, r6
 8005b92:	f7ff fd5b 	bl	800564c <_Balloc>
 8005b96:	4602      	mov	r2, r0
 8005b98:	b928      	cbnz	r0, 8005ba6 <__mdiff+0x2e>
 8005b9a:	f240 2132 	movw	r1, #562	; 0x232
 8005b9e:	4b3c      	ldr	r3, [pc, #240]	; (8005c90 <__mdiff+0x118>)
 8005ba0:	483c      	ldr	r0, [pc, #240]	; (8005c94 <__mdiff+0x11c>)
 8005ba2:	f000 faf5 	bl	8006190 <__assert_func>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005bac:	4610      	mov	r0, r2
 8005bae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb2:	bfa4      	itt	ge
 8005bb4:	4653      	movge	r3, sl
 8005bb6:	46a2      	movge	sl, r4
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005bbe:	bfa6      	itte	ge
 8005bc0:	461c      	movge	r4, r3
 8005bc2:	2500      	movge	r5, #0
 8005bc4:	2501      	movlt	r5, #1
 8005bc6:	f7ff fd41 	bl	800564c <_Balloc>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	b918      	cbnz	r0, 8005bd6 <__mdiff+0x5e>
 8005bce:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005bd2:	4b2f      	ldr	r3, [pc, #188]	; (8005c90 <__mdiff+0x118>)
 8005bd4:	e7e4      	b.n	8005ba0 <__mdiff+0x28>
 8005bd6:	f100 0814 	add.w	r8, r0, #20
 8005bda:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005bde:	60c5      	str	r5, [r0, #12]
 8005be0:	f04f 0c00 	mov.w	ip, #0
 8005be4:	f10a 0514 	add.w	r5, sl, #20
 8005be8:	f10a 0010 	add.w	r0, sl, #16
 8005bec:	46c2      	mov	sl, r8
 8005bee:	6926      	ldr	r6, [r4, #16]
 8005bf0:	f104 0914 	add.w	r9, r4, #20
 8005bf4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005bf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005bfc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005c00:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c04:	fa1f f18b 	uxth.w	r1, fp
 8005c08:	4461      	add	r1, ip
 8005c0a:	fa1f fc83 	uxth.w	ip, r3
 8005c0e:	0c1b      	lsrs	r3, r3, #16
 8005c10:	eba1 010c 	sub.w	r1, r1, ip
 8005c14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c18:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005c1c:	b289      	uxth	r1, r1
 8005c1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005c22:	454e      	cmp	r6, r9
 8005c24:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005c28:	f84a 3b04 	str.w	r3, [sl], #4
 8005c2c:	d8e6      	bhi.n	8005bfc <__mdiff+0x84>
 8005c2e:	1b33      	subs	r3, r6, r4
 8005c30:	3b15      	subs	r3, #21
 8005c32:	f023 0303 	bic.w	r3, r3, #3
 8005c36:	3415      	adds	r4, #21
 8005c38:	3304      	adds	r3, #4
 8005c3a:	42a6      	cmp	r6, r4
 8005c3c:	bf38      	it	cc
 8005c3e:	2304      	movcc	r3, #4
 8005c40:	441d      	add	r5, r3
 8005c42:	4443      	add	r3, r8
 8005c44:	461e      	mov	r6, r3
 8005c46:	462c      	mov	r4, r5
 8005c48:	4574      	cmp	r4, lr
 8005c4a:	d30e      	bcc.n	8005c6a <__mdiff+0xf2>
 8005c4c:	f10e 0103 	add.w	r1, lr, #3
 8005c50:	1b49      	subs	r1, r1, r5
 8005c52:	f021 0103 	bic.w	r1, r1, #3
 8005c56:	3d03      	subs	r5, #3
 8005c58:	45ae      	cmp	lr, r5
 8005c5a:	bf38      	it	cc
 8005c5c:	2100      	movcc	r1, #0
 8005c5e:	4419      	add	r1, r3
 8005c60:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005c64:	b18b      	cbz	r3, 8005c8a <__mdiff+0x112>
 8005c66:	6117      	str	r7, [r2, #16]
 8005c68:	e7a0      	b.n	8005bac <__mdiff+0x34>
 8005c6a:	f854 8b04 	ldr.w	r8, [r4], #4
 8005c6e:	fa1f f188 	uxth.w	r1, r8
 8005c72:	4461      	add	r1, ip
 8005c74:	1408      	asrs	r0, r1, #16
 8005c76:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005c7a:	b289      	uxth	r1, r1
 8005c7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005c80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005c84:	f846 1b04 	str.w	r1, [r6], #4
 8005c88:	e7de      	b.n	8005c48 <__mdiff+0xd0>
 8005c8a:	3f01      	subs	r7, #1
 8005c8c:	e7e8      	b.n	8005c60 <__mdiff+0xe8>
 8005c8e:	bf00      	nop
 8005c90:	08006e77 	.word	0x08006e77
 8005c94:	08006e88 	.word	0x08006e88

08005c98 <__d2b>:
 8005c98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005ca2:	4690      	mov	r8, r2
 8005ca4:	461d      	mov	r5, r3
 8005ca6:	f7ff fcd1 	bl	800564c <_Balloc>
 8005caa:	4604      	mov	r4, r0
 8005cac:	b930      	cbnz	r0, 8005cbc <__d2b+0x24>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	f240 310a 	movw	r1, #778	; 0x30a
 8005cb4:	4b24      	ldr	r3, [pc, #144]	; (8005d48 <__d2b+0xb0>)
 8005cb6:	4825      	ldr	r0, [pc, #148]	; (8005d4c <__d2b+0xb4>)
 8005cb8:	f000 fa6a 	bl	8006190 <__assert_func>
 8005cbc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005cc0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005cc4:	bb2d      	cbnz	r5, 8005d12 <__d2b+0x7a>
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	f1b8 0300 	subs.w	r3, r8, #0
 8005ccc:	d026      	beq.n	8005d1c <__d2b+0x84>
 8005cce:	4668      	mov	r0, sp
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	f7ff fd87 	bl	80057e4 <__lo0bits>
 8005cd6:	9900      	ldr	r1, [sp, #0]
 8005cd8:	b1f0      	cbz	r0, 8005d18 <__d2b+0x80>
 8005cda:	9a01      	ldr	r2, [sp, #4]
 8005cdc:	f1c0 0320 	rsb	r3, r0, #32
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	40c2      	lsrs	r2, r0
 8005ce8:	6163      	str	r3, [r4, #20]
 8005cea:	9201      	str	r2, [sp, #4]
 8005cec:	9b01      	ldr	r3, [sp, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	bf14      	ite	ne
 8005cf2:	2102      	movne	r1, #2
 8005cf4:	2101      	moveq	r1, #1
 8005cf6:	61a3      	str	r3, [r4, #24]
 8005cf8:	6121      	str	r1, [r4, #16]
 8005cfa:	b1c5      	cbz	r5, 8005d2e <__d2b+0x96>
 8005cfc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d00:	4405      	add	r5, r0
 8005d02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d06:	603d      	str	r5, [r7, #0]
 8005d08:	6030      	str	r0, [r6, #0]
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	b002      	add	sp, #8
 8005d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d16:	e7d6      	b.n	8005cc6 <__d2b+0x2e>
 8005d18:	6161      	str	r1, [r4, #20]
 8005d1a:	e7e7      	b.n	8005cec <__d2b+0x54>
 8005d1c:	a801      	add	r0, sp, #4
 8005d1e:	f7ff fd61 	bl	80057e4 <__lo0bits>
 8005d22:	2101      	movs	r1, #1
 8005d24:	9b01      	ldr	r3, [sp, #4]
 8005d26:	6121      	str	r1, [r4, #16]
 8005d28:	6163      	str	r3, [r4, #20]
 8005d2a:	3020      	adds	r0, #32
 8005d2c:	e7e5      	b.n	8005cfa <__d2b+0x62>
 8005d2e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005d32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d36:	6038      	str	r0, [r7, #0]
 8005d38:	6918      	ldr	r0, [r3, #16]
 8005d3a:	f7ff fd33 	bl	80057a4 <__hi0bits>
 8005d3e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005d42:	6031      	str	r1, [r6, #0]
 8005d44:	e7e1      	b.n	8005d0a <__d2b+0x72>
 8005d46:	bf00      	nop
 8005d48:	08006e77 	.word	0x08006e77
 8005d4c:	08006e88 	.word	0x08006e88

08005d50 <_calloc_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	fb02 f501 	mul.w	r5, r2, r1
 8005d56:	4629      	mov	r1, r5
 8005d58:	f000 f854 	bl	8005e04 <_malloc_r>
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	b118      	cbz	r0, 8005d68 <_calloc_r+0x18>
 8005d60:	462a      	mov	r2, r5
 8005d62:	2100      	movs	r1, #0
 8005d64:	f7fe f944 	bl	8003ff0 <memset>
 8005d68:	4620      	mov	r0, r4
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}

08005d6c <_free_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4605      	mov	r5, r0
 8005d70:	2900      	cmp	r1, #0
 8005d72:	d043      	beq.n	8005dfc <_free_r+0x90>
 8005d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d78:	1f0c      	subs	r4, r1, #4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	bfb8      	it	lt
 8005d7e:	18e4      	addlt	r4, r4, r3
 8005d80:	f000 fa62 	bl	8006248 <__malloc_lock>
 8005d84:	4a1e      	ldr	r2, [pc, #120]	; (8005e00 <_free_r+0x94>)
 8005d86:	6813      	ldr	r3, [r2, #0]
 8005d88:	4610      	mov	r0, r2
 8005d8a:	b933      	cbnz	r3, 8005d9a <_free_r+0x2e>
 8005d8c:	6063      	str	r3, [r4, #4]
 8005d8e:	6014      	str	r4, [r2, #0]
 8005d90:	4628      	mov	r0, r5
 8005d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d96:	f000 ba5d 	b.w	8006254 <__malloc_unlock>
 8005d9a:	42a3      	cmp	r3, r4
 8005d9c:	d90a      	bls.n	8005db4 <_free_r+0x48>
 8005d9e:	6821      	ldr	r1, [r4, #0]
 8005da0:	1862      	adds	r2, r4, r1
 8005da2:	4293      	cmp	r3, r2
 8005da4:	bf01      	itttt	eq
 8005da6:	681a      	ldreq	r2, [r3, #0]
 8005da8:	685b      	ldreq	r3, [r3, #4]
 8005daa:	1852      	addeq	r2, r2, r1
 8005dac:	6022      	streq	r2, [r4, #0]
 8005dae:	6063      	str	r3, [r4, #4]
 8005db0:	6004      	str	r4, [r0, #0]
 8005db2:	e7ed      	b.n	8005d90 <_free_r+0x24>
 8005db4:	461a      	mov	r2, r3
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	b10b      	cbz	r3, 8005dbe <_free_r+0x52>
 8005dba:	42a3      	cmp	r3, r4
 8005dbc:	d9fa      	bls.n	8005db4 <_free_r+0x48>
 8005dbe:	6811      	ldr	r1, [r2, #0]
 8005dc0:	1850      	adds	r0, r2, r1
 8005dc2:	42a0      	cmp	r0, r4
 8005dc4:	d10b      	bne.n	8005dde <_free_r+0x72>
 8005dc6:	6820      	ldr	r0, [r4, #0]
 8005dc8:	4401      	add	r1, r0
 8005dca:	1850      	adds	r0, r2, r1
 8005dcc:	4283      	cmp	r3, r0
 8005dce:	6011      	str	r1, [r2, #0]
 8005dd0:	d1de      	bne.n	8005d90 <_free_r+0x24>
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	4401      	add	r1, r0
 8005dd8:	6011      	str	r1, [r2, #0]
 8005dda:	6053      	str	r3, [r2, #4]
 8005ddc:	e7d8      	b.n	8005d90 <_free_r+0x24>
 8005dde:	d902      	bls.n	8005de6 <_free_r+0x7a>
 8005de0:	230c      	movs	r3, #12
 8005de2:	602b      	str	r3, [r5, #0]
 8005de4:	e7d4      	b.n	8005d90 <_free_r+0x24>
 8005de6:	6820      	ldr	r0, [r4, #0]
 8005de8:	1821      	adds	r1, r4, r0
 8005dea:	428b      	cmp	r3, r1
 8005dec:	bf01      	itttt	eq
 8005dee:	6819      	ldreq	r1, [r3, #0]
 8005df0:	685b      	ldreq	r3, [r3, #4]
 8005df2:	1809      	addeq	r1, r1, r0
 8005df4:	6021      	streq	r1, [r4, #0]
 8005df6:	6063      	str	r3, [r4, #4]
 8005df8:	6054      	str	r4, [r2, #4]
 8005dfa:	e7c9      	b.n	8005d90 <_free_r+0x24>
 8005dfc:	bd38      	pop	{r3, r4, r5, pc}
 8005dfe:	bf00      	nop
 8005e00:	2000020c 	.word	0x2000020c

08005e04 <_malloc_r>:
 8005e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e06:	1ccd      	adds	r5, r1, #3
 8005e08:	f025 0503 	bic.w	r5, r5, #3
 8005e0c:	3508      	adds	r5, #8
 8005e0e:	2d0c      	cmp	r5, #12
 8005e10:	bf38      	it	cc
 8005e12:	250c      	movcc	r5, #12
 8005e14:	2d00      	cmp	r5, #0
 8005e16:	4606      	mov	r6, r0
 8005e18:	db01      	blt.n	8005e1e <_malloc_r+0x1a>
 8005e1a:	42a9      	cmp	r1, r5
 8005e1c:	d903      	bls.n	8005e26 <_malloc_r+0x22>
 8005e1e:	230c      	movs	r3, #12
 8005e20:	6033      	str	r3, [r6, #0]
 8005e22:	2000      	movs	r0, #0
 8005e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e26:	f000 fa0f 	bl	8006248 <__malloc_lock>
 8005e2a:	4921      	ldr	r1, [pc, #132]	; (8005eb0 <_malloc_r+0xac>)
 8005e2c:	680a      	ldr	r2, [r1, #0]
 8005e2e:	4614      	mov	r4, r2
 8005e30:	b99c      	cbnz	r4, 8005e5a <_malloc_r+0x56>
 8005e32:	4f20      	ldr	r7, [pc, #128]	; (8005eb4 <_malloc_r+0xb0>)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	b923      	cbnz	r3, 8005e42 <_malloc_r+0x3e>
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f000 f998 	bl	8006170 <_sbrk_r>
 8005e40:	6038      	str	r0, [r7, #0]
 8005e42:	4629      	mov	r1, r5
 8005e44:	4630      	mov	r0, r6
 8005e46:	f000 f993 	bl	8006170 <_sbrk_r>
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	d123      	bne.n	8005e96 <_malloc_r+0x92>
 8005e4e:	230c      	movs	r3, #12
 8005e50:	4630      	mov	r0, r6
 8005e52:	6033      	str	r3, [r6, #0]
 8005e54:	f000 f9fe 	bl	8006254 <__malloc_unlock>
 8005e58:	e7e3      	b.n	8005e22 <_malloc_r+0x1e>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	1b5b      	subs	r3, r3, r5
 8005e5e:	d417      	bmi.n	8005e90 <_malloc_r+0x8c>
 8005e60:	2b0b      	cmp	r3, #11
 8005e62:	d903      	bls.n	8005e6c <_malloc_r+0x68>
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	441c      	add	r4, r3
 8005e68:	6025      	str	r5, [r4, #0]
 8005e6a:	e004      	b.n	8005e76 <_malloc_r+0x72>
 8005e6c:	6863      	ldr	r3, [r4, #4]
 8005e6e:	42a2      	cmp	r2, r4
 8005e70:	bf0c      	ite	eq
 8005e72:	600b      	streq	r3, [r1, #0]
 8005e74:	6053      	strne	r3, [r2, #4]
 8005e76:	4630      	mov	r0, r6
 8005e78:	f000 f9ec 	bl	8006254 <__malloc_unlock>
 8005e7c:	f104 000b 	add.w	r0, r4, #11
 8005e80:	1d23      	adds	r3, r4, #4
 8005e82:	f020 0007 	bic.w	r0, r0, #7
 8005e86:	1ac2      	subs	r2, r0, r3
 8005e88:	d0cc      	beq.n	8005e24 <_malloc_r+0x20>
 8005e8a:	1a1b      	subs	r3, r3, r0
 8005e8c:	50a3      	str	r3, [r4, r2]
 8005e8e:	e7c9      	b.n	8005e24 <_malloc_r+0x20>
 8005e90:	4622      	mov	r2, r4
 8005e92:	6864      	ldr	r4, [r4, #4]
 8005e94:	e7cc      	b.n	8005e30 <_malloc_r+0x2c>
 8005e96:	1cc4      	adds	r4, r0, #3
 8005e98:	f024 0403 	bic.w	r4, r4, #3
 8005e9c:	42a0      	cmp	r0, r4
 8005e9e:	d0e3      	beq.n	8005e68 <_malloc_r+0x64>
 8005ea0:	1a21      	subs	r1, r4, r0
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	f000 f964 	bl	8006170 <_sbrk_r>
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d1dd      	bne.n	8005e68 <_malloc_r+0x64>
 8005eac:	e7cf      	b.n	8005e4e <_malloc_r+0x4a>
 8005eae:	bf00      	nop
 8005eb0:	2000020c 	.word	0x2000020c
 8005eb4:	20000210 	.word	0x20000210

08005eb8 <__ssputs_r>:
 8005eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ebc:	688e      	ldr	r6, [r1, #8]
 8005ebe:	4682      	mov	sl, r0
 8005ec0:	429e      	cmp	r6, r3
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	4690      	mov	r8, r2
 8005ec6:	461f      	mov	r7, r3
 8005ec8:	d838      	bhi.n	8005f3c <__ssputs_r+0x84>
 8005eca:	898a      	ldrh	r2, [r1, #12]
 8005ecc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ed0:	d032      	beq.n	8005f38 <__ssputs_r+0x80>
 8005ed2:	6825      	ldr	r5, [r4, #0]
 8005ed4:	6909      	ldr	r1, [r1, #16]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	eba5 0901 	sub.w	r9, r5, r1
 8005edc:	6965      	ldr	r5, [r4, #20]
 8005ede:	444b      	add	r3, r9
 8005ee0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ee4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ee8:	106d      	asrs	r5, r5, #1
 8005eea:	429d      	cmp	r5, r3
 8005eec:	bf38      	it	cc
 8005eee:	461d      	movcc	r5, r3
 8005ef0:	0553      	lsls	r3, r2, #21
 8005ef2:	d531      	bpl.n	8005f58 <__ssputs_r+0xa0>
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	f7ff ff85 	bl	8005e04 <_malloc_r>
 8005efa:	4606      	mov	r6, r0
 8005efc:	b950      	cbnz	r0, 8005f14 <__ssputs_r+0x5c>
 8005efe:	230c      	movs	r3, #12
 8005f00:	f04f 30ff 	mov.w	r0, #4294967295
 8005f04:	f8ca 3000 	str.w	r3, [sl]
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f0e:	81a3      	strh	r3, [r4, #12]
 8005f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f14:	464a      	mov	r2, r9
 8005f16:	6921      	ldr	r1, [r4, #16]
 8005f18:	f7ff fb8a 	bl	8005630 <memcpy>
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f26:	81a3      	strh	r3, [r4, #12]
 8005f28:	6126      	str	r6, [r4, #16]
 8005f2a:	444e      	add	r6, r9
 8005f2c:	6026      	str	r6, [r4, #0]
 8005f2e:	463e      	mov	r6, r7
 8005f30:	6165      	str	r5, [r4, #20]
 8005f32:	eba5 0509 	sub.w	r5, r5, r9
 8005f36:	60a5      	str	r5, [r4, #8]
 8005f38:	42be      	cmp	r6, r7
 8005f3a:	d900      	bls.n	8005f3e <__ssputs_r+0x86>
 8005f3c:	463e      	mov	r6, r7
 8005f3e:	4632      	mov	r2, r6
 8005f40:	4641      	mov	r1, r8
 8005f42:	6820      	ldr	r0, [r4, #0]
 8005f44:	f000 f966 	bl	8006214 <memmove>
 8005f48:	68a3      	ldr	r3, [r4, #8]
 8005f4a:	6822      	ldr	r2, [r4, #0]
 8005f4c:	1b9b      	subs	r3, r3, r6
 8005f4e:	4432      	add	r2, r6
 8005f50:	2000      	movs	r0, #0
 8005f52:	60a3      	str	r3, [r4, #8]
 8005f54:	6022      	str	r2, [r4, #0]
 8005f56:	e7db      	b.n	8005f10 <__ssputs_r+0x58>
 8005f58:	462a      	mov	r2, r5
 8005f5a:	f000 f981 	bl	8006260 <_realloc_r>
 8005f5e:	4606      	mov	r6, r0
 8005f60:	2800      	cmp	r0, #0
 8005f62:	d1e1      	bne.n	8005f28 <__ssputs_r+0x70>
 8005f64:	4650      	mov	r0, sl
 8005f66:	6921      	ldr	r1, [r4, #16]
 8005f68:	f7ff ff00 	bl	8005d6c <_free_r>
 8005f6c:	e7c7      	b.n	8005efe <__ssputs_r+0x46>
	...

08005f70 <_svfiprintf_r>:
 8005f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	4698      	mov	r8, r3
 8005f76:	898b      	ldrh	r3, [r1, #12]
 8005f78:	4607      	mov	r7, r0
 8005f7a:	061b      	lsls	r3, r3, #24
 8005f7c:	460d      	mov	r5, r1
 8005f7e:	4614      	mov	r4, r2
 8005f80:	b09d      	sub	sp, #116	; 0x74
 8005f82:	d50e      	bpl.n	8005fa2 <_svfiprintf_r+0x32>
 8005f84:	690b      	ldr	r3, [r1, #16]
 8005f86:	b963      	cbnz	r3, 8005fa2 <_svfiprintf_r+0x32>
 8005f88:	2140      	movs	r1, #64	; 0x40
 8005f8a:	f7ff ff3b 	bl	8005e04 <_malloc_r>
 8005f8e:	6028      	str	r0, [r5, #0]
 8005f90:	6128      	str	r0, [r5, #16]
 8005f92:	b920      	cbnz	r0, 8005f9e <_svfiprintf_r+0x2e>
 8005f94:	230c      	movs	r3, #12
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9c:	e0d1      	b.n	8006142 <_svfiprintf_r+0x1d2>
 8005f9e:	2340      	movs	r3, #64	; 0x40
 8005fa0:	616b      	str	r3, [r5, #20]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa6:	2320      	movs	r3, #32
 8005fa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fac:	2330      	movs	r3, #48	; 0x30
 8005fae:	f04f 0901 	mov.w	r9, #1
 8005fb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800615c <_svfiprintf_r+0x1ec>
 8005fba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fbe:	4623      	mov	r3, r4
 8005fc0:	469a      	mov	sl, r3
 8005fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fc6:	b10a      	cbz	r2, 8005fcc <_svfiprintf_r+0x5c>
 8005fc8:	2a25      	cmp	r2, #37	; 0x25
 8005fca:	d1f9      	bne.n	8005fc0 <_svfiprintf_r+0x50>
 8005fcc:	ebba 0b04 	subs.w	fp, sl, r4
 8005fd0:	d00b      	beq.n	8005fea <_svfiprintf_r+0x7a>
 8005fd2:	465b      	mov	r3, fp
 8005fd4:	4622      	mov	r2, r4
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	4638      	mov	r0, r7
 8005fda:	f7ff ff6d 	bl	8005eb8 <__ssputs_r>
 8005fde:	3001      	adds	r0, #1
 8005fe0:	f000 80aa 	beq.w	8006138 <_svfiprintf_r+0x1c8>
 8005fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fe6:	445a      	add	r2, fp
 8005fe8:	9209      	str	r2, [sp, #36]	; 0x24
 8005fea:	f89a 3000 	ldrb.w	r3, [sl]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 80a2 	beq.w	8006138 <_svfiprintf_r+0x1c8>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8005ffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ffe:	f10a 0a01 	add.w	sl, sl, #1
 8006002:	9304      	str	r3, [sp, #16]
 8006004:	9307      	str	r3, [sp, #28]
 8006006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800600a:	931a      	str	r3, [sp, #104]	; 0x68
 800600c:	4654      	mov	r4, sl
 800600e:	2205      	movs	r2, #5
 8006010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006014:	4851      	ldr	r0, [pc, #324]	; (800615c <_svfiprintf_r+0x1ec>)
 8006016:	f7ff fafd 	bl	8005614 <memchr>
 800601a:	9a04      	ldr	r2, [sp, #16]
 800601c:	b9d8      	cbnz	r0, 8006056 <_svfiprintf_r+0xe6>
 800601e:	06d0      	lsls	r0, r2, #27
 8006020:	bf44      	itt	mi
 8006022:	2320      	movmi	r3, #32
 8006024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006028:	0711      	lsls	r1, r2, #28
 800602a:	bf44      	itt	mi
 800602c:	232b      	movmi	r3, #43	; 0x2b
 800602e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006032:	f89a 3000 	ldrb.w	r3, [sl]
 8006036:	2b2a      	cmp	r3, #42	; 0x2a
 8006038:	d015      	beq.n	8006066 <_svfiprintf_r+0xf6>
 800603a:	4654      	mov	r4, sl
 800603c:	2000      	movs	r0, #0
 800603e:	f04f 0c0a 	mov.w	ip, #10
 8006042:	9a07      	ldr	r2, [sp, #28]
 8006044:	4621      	mov	r1, r4
 8006046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800604a:	3b30      	subs	r3, #48	; 0x30
 800604c:	2b09      	cmp	r3, #9
 800604e:	d94e      	bls.n	80060ee <_svfiprintf_r+0x17e>
 8006050:	b1b0      	cbz	r0, 8006080 <_svfiprintf_r+0x110>
 8006052:	9207      	str	r2, [sp, #28]
 8006054:	e014      	b.n	8006080 <_svfiprintf_r+0x110>
 8006056:	eba0 0308 	sub.w	r3, r0, r8
 800605a:	fa09 f303 	lsl.w	r3, r9, r3
 800605e:	4313      	orrs	r3, r2
 8006060:	46a2      	mov	sl, r4
 8006062:	9304      	str	r3, [sp, #16]
 8006064:	e7d2      	b.n	800600c <_svfiprintf_r+0x9c>
 8006066:	9b03      	ldr	r3, [sp, #12]
 8006068:	1d19      	adds	r1, r3, #4
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	9103      	str	r1, [sp, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	bfbb      	ittet	lt
 8006072:	425b      	neglt	r3, r3
 8006074:	f042 0202 	orrlt.w	r2, r2, #2
 8006078:	9307      	strge	r3, [sp, #28]
 800607a:	9307      	strlt	r3, [sp, #28]
 800607c:	bfb8      	it	lt
 800607e:	9204      	strlt	r2, [sp, #16]
 8006080:	7823      	ldrb	r3, [r4, #0]
 8006082:	2b2e      	cmp	r3, #46	; 0x2e
 8006084:	d10c      	bne.n	80060a0 <_svfiprintf_r+0x130>
 8006086:	7863      	ldrb	r3, [r4, #1]
 8006088:	2b2a      	cmp	r3, #42	; 0x2a
 800608a:	d135      	bne.n	80060f8 <_svfiprintf_r+0x188>
 800608c:	9b03      	ldr	r3, [sp, #12]
 800608e:	3402      	adds	r4, #2
 8006090:	1d1a      	adds	r2, r3, #4
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	9203      	str	r2, [sp, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	bfb8      	it	lt
 800609a:	f04f 33ff 	movlt.w	r3, #4294967295
 800609e:	9305      	str	r3, [sp, #20]
 80060a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800616c <_svfiprintf_r+0x1fc>
 80060a4:	2203      	movs	r2, #3
 80060a6:	4650      	mov	r0, sl
 80060a8:	7821      	ldrb	r1, [r4, #0]
 80060aa:	f7ff fab3 	bl	8005614 <memchr>
 80060ae:	b140      	cbz	r0, 80060c2 <_svfiprintf_r+0x152>
 80060b0:	2340      	movs	r3, #64	; 0x40
 80060b2:	eba0 000a 	sub.w	r0, r0, sl
 80060b6:	fa03 f000 	lsl.w	r0, r3, r0
 80060ba:	9b04      	ldr	r3, [sp, #16]
 80060bc:	3401      	adds	r4, #1
 80060be:	4303      	orrs	r3, r0
 80060c0:	9304      	str	r3, [sp, #16]
 80060c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060c6:	2206      	movs	r2, #6
 80060c8:	4825      	ldr	r0, [pc, #148]	; (8006160 <_svfiprintf_r+0x1f0>)
 80060ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060ce:	f7ff faa1 	bl	8005614 <memchr>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d038      	beq.n	8006148 <_svfiprintf_r+0x1d8>
 80060d6:	4b23      	ldr	r3, [pc, #140]	; (8006164 <_svfiprintf_r+0x1f4>)
 80060d8:	bb1b      	cbnz	r3, 8006122 <_svfiprintf_r+0x1b2>
 80060da:	9b03      	ldr	r3, [sp, #12]
 80060dc:	3307      	adds	r3, #7
 80060de:	f023 0307 	bic.w	r3, r3, #7
 80060e2:	3308      	adds	r3, #8
 80060e4:	9303      	str	r3, [sp, #12]
 80060e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e8:	4433      	add	r3, r6
 80060ea:	9309      	str	r3, [sp, #36]	; 0x24
 80060ec:	e767      	b.n	8005fbe <_svfiprintf_r+0x4e>
 80060ee:	460c      	mov	r4, r1
 80060f0:	2001      	movs	r0, #1
 80060f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80060f6:	e7a5      	b.n	8006044 <_svfiprintf_r+0xd4>
 80060f8:	2300      	movs	r3, #0
 80060fa:	f04f 0c0a 	mov.w	ip, #10
 80060fe:	4619      	mov	r1, r3
 8006100:	3401      	adds	r4, #1
 8006102:	9305      	str	r3, [sp, #20]
 8006104:	4620      	mov	r0, r4
 8006106:	f810 2b01 	ldrb.w	r2, [r0], #1
 800610a:	3a30      	subs	r2, #48	; 0x30
 800610c:	2a09      	cmp	r2, #9
 800610e:	d903      	bls.n	8006118 <_svfiprintf_r+0x1a8>
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0c5      	beq.n	80060a0 <_svfiprintf_r+0x130>
 8006114:	9105      	str	r1, [sp, #20]
 8006116:	e7c3      	b.n	80060a0 <_svfiprintf_r+0x130>
 8006118:	4604      	mov	r4, r0
 800611a:	2301      	movs	r3, #1
 800611c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006120:	e7f0      	b.n	8006104 <_svfiprintf_r+0x194>
 8006122:	ab03      	add	r3, sp, #12
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	462a      	mov	r2, r5
 8006128:	4638      	mov	r0, r7
 800612a:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <_svfiprintf_r+0x1f8>)
 800612c:	a904      	add	r1, sp, #16
 800612e:	f7fe f805 	bl	800413c <_printf_float>
 8006132:	1c42      	adds	r2, r0, #1
 8006134:	4606      	mov	r6, r0
 8006136:	d1d6      	bne.n	80060e6 <_svfiprintf_r+0x176>
 8006138:	89ab      	ldrh	r3, [r5, #12]
 800613a:	065b      	lsls	r3, r3, #25
 800613c:	f53f af2c 	bmi.w	8005f98 <_svfiprintf_r+0x28>
 8006140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006142:	b01d      	add	sp, #116	; 0x74
 8006144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006148:	ab03      	add	r3, sp, #12
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	462a      	mov	r2, r5
 800614e:	4638      	mov	r0, r7
 8006150:	4b05      	ldr	r3, [pc, #20]	; (8006168 <_svfiprintf_r+0x1f8>)
 8006152:	a904      	add	r1, sp, #16
 8006154:	f7fe fa8e 	bl	8004674 <_printf_i>
 8006158:	e7eb      	b.n	8006132 <_svfiprintf_r+0x1c2>
 800615a:	bf00      	nop
 800615c:	08006fe4 	.word	0x08006fe4
 8006160:	08006fee 	.word	0x08006fee
 8006164:	0800413d 	.word	0x0800413d
 8006168:	08005eb9 	.word	0x08005eb9
 800616c:	08006fea 	.word	0x08006fea

08006170 <_sbrk_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	2300      	movs	r3, #0
 8006174:	4d05      	ldr	r5, [pc, #20]	; (800618c <_sbrk_r+0x1c>)
 8006176:	4604      	mov	r4, r0
 8006178:	4608      	mov	r0, r1
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	f7fb fc26 	bl	80019cc <_sbrk>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	d102      	bne.n	800618a <_sbrk_r+0x1a>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	b103      	cbz	r3, 800618a <_sbrk_r+0x1a>
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	20000378 	.word	0x20000378

08006190 <__assert_func>:
 8006190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006192:	4614      	mov	r4, r2
 8006194:	461a      	mov	r2, r3
 8006196:	4b09      	ldr	r3, [pc, #36]	; (80061bc <__assert_func+0x2c>)
 8006198:	4605      	mov	r5, r0
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68d8      	ldr	r0, [r3, #12]
 800619e:	b14c      	cbz	r4, 80061b4 <__assert_func+0x24>
 80061a0:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <__assert_func+0x30>)
 80061a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061a6:	9100      	str	r1, [sp, #0]
 80061a8:	462b      	mov	r3, r5
 80061aa:	4906      	ldr	r1, [pc, #24]	; (80061c4 <__assert_func+0x34>)
 80061ac:	f000 f80e 	bl	80061cc <fiprintf>
 80061b0:	f000 faa2 	bl	80066f8 <abort>
 80061b4:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <__assert_func+0x38>)
 80061b6:	461c      	mov	r4, r3
 80061b8:	e7f3      	b.n	80061a2 <__assert_func+0x12>
 80061ba:	bf00      	nop
 80061bc:	2000000c 	.word	0x2000000c
 80061c0:	08006ff5 	.word	0x08006ff5
 80061c4:	08007002 	.word	0x08007002
 80061c8:	08007030 	.word	0x08007030

080061cc <fiprintf>:
 80061cc:	b40e      	push	{r1, r2, r3}
 80061ce:	b503      	push	{r0, r1, lr}
 80061d0:	4601      	mov	r1, r0
 80061d2:	ab03      	add	r3, sp, #12
 80061d4:	4805      	ldr	r0, [pc, #20]	; (80061ec <fiprintf+0x20>)
 80061d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061da:	6800      	ldr	r0, [r0, #0]
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	f000 f88d 	bl	80062fc <_vfiprintf_r>
 80061e2:	b002      	add	sp, #8
 80061e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061e8:	b003      	add	sp, #12
 80061ea:	4770      	bx	lr
 80061ec:	2000000c 	.word	0x2000000c

080061f0 <__ascii_mbtowc>:
 80061f0:	b082      	sub	sp, #8
 80061f2:	b901      	cbnz	r1, 80061f6 <__ascii_mbtowc+0x6>
 80061f4:	a901      	add	r1, sp, #4
 80061f6:	b142      	cbz	r2, 800620a <__ascii_mbtowc+0x1a>
 80061f8:	b14b      	cbz	r3, 800620e <__ascii_mbtowc+0x1e>
 80061fa:	7813      	ldrb	r3, [r2, #0]
 80061fc:	600b      	str	r3, [r1, #0]
 80061fe:	7812      	ldrb	r2, [r2, #0]
 8006200:	1e10      	subs	r0, r2, #0
 8006202:	bf18      	it	ne
 8006204:	2001      	movne	r0, #1
 8006206:	b002      	add	sp, #8
 8006208:	4770      	bx	lr
 800620a:	4610      	mov	r0, r2
 800620c:	e7fb      	b.n	8006206 <__ascii_mbtowc+0x16>
 800620e:	f06f 0001 	mvn.w	r0, #1
 8006212:	e7f8      	b.n	8006206 <__ascii_mbtowc+0x16>

08006214 <memmove>:
 8006214:	4288      	cmp	r0, r1
 8006216:	b510      	push	{r4, lr}
 8006218:	eb01 0402 	add.w	r4, r1, r2
 800621c:	d902      	bls.n	8006224 <memmove+0x10>
 800621e:	4284      	cmp	r4, r0
 8006220:	4623      	mov	r3, r4
 8006222:	d807      	bhi.n	8006234 <memmove+0x20>
 8006224:	1e43      	subs	r3, r0, #1
 8006226:	42a1      	cmp	r1, r4
 8006228:	d008      	beq.n	800623c <memmove+0x28>
 800622a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800622e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006232:	e7f8      	b.n	8006226 <memmove+0x12>
 8006234:	4601      	mov	r1, r0
 8006236:	4402      	add	r2, r0
 8006238:	428a      	cmp	r2, r1
 800623a:	d100      	bne.n	800623e <memmove+0x2a>
 800623c:	bd10      	pop	{r4, pc}
 800623e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006242:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006246:	e7f7      	b.n	8006238 <memmove+0x24>

08006248 <__malloc_lock>:
 8006248:	4801      	ldr	r0, [pc, #4]	; (8006250 <__malloc_lock+0x8>)
 800624a:	f000 bc15 	b.w	8006a78 <__retarget_lock_acquire_recursive>
 800624e:	bf00      	nop
 8006250:	20000380 	.word	0x20000380

08006254 <__malloc_unlock>:
 8006254:	4801      	ldr	r0, [pc, #4]	; (800625c <__malloc_unlock+0x8>)
 8006256:	f000 bc10 	b.w	8006a7a <__retarget_lock_release_recursive>
 800625a:	bf00      	nop
 800625c:	20000380 	.word	0x20000380

08006260 <_realloc_r>:
 8006260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006262:	4607      	mov	r7, r0
 8006264:	4614      	mov	r4, r2
 8006266:	460e      	mov	r6, r1
 8006268:	b921      	cbnz	r1, 8006274 <_realloc_r+0x14>
 800626a:	4611      	mov	r1, r2
 800626c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006270:	f7ff bdc8 	b.w	8005e04 <_malloc_r>
 8006274:	b922      	cbnz	r2, 8006280 <_realloc_r+0x20>
 8006276:	f7ff fd79 	bl	8005d6c <_free_r>
 800627a:	4625      	mov	r5, r4
 800627c:	4628      	mov	r0, r5
 800627e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006280:	f000 fc60 	bl	8006b44 <_malloc_usable_size_r>
 8006284:	42a0      	cmp	r0, r4
 8006286:	d20f      	bcs.n	80062a8 <_realloc_r+0x48>
 8006288:	4621      	mov	r1, r4
 800628a:	4638      	mov	r0, r7
 800628c:	f7ff fdba 	bl	8005e04 <_malloc_r>
 8006290:	4605      	mov	r5, r0
 8006292:	2800      	cmp	r0, #0
 8006294:	d0f2      	beq.n	800627c <_realloc_r+0x1c>
 8006296:	4631      	mov	r1, r6
 8006298:	4622      	mov	r2, r4
 800629a:	f7ff f9c9 	bl	8005630 <memcpy>
 800629e:	4631      	mov	r1, r6
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff fd63 	bl	8005d6c <_free_r>
 80062a6:	e7e9      	b.n	800627c <_realloc_r+0x1c>
 80062a8:	4635      	mov	r5, r6
 80062aa:	e7e7      	b.n	800627c <_realloc_r+0x1c>

080062ac <__sfputc_r>:
 80062ac:	6893      	ldr	r3, [r2, #8]
 80062ae:	b410      	push	{r4}
 80062b0:	3b01      	subs	r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	6093      	str	r3, [r2, #8]
 80062b6:	da07      	bge.n	80062c8 <__sfputc_r+0x1c>
 80062b8:	6994      	ldr	r4, [r2, #24]
 80062ba:	42a3      	cmp	r3, r4
 80062bc:	db01      	blt.n	80062c2 <__sfputc_r+0x16>
 80062be:	290a      	cmp	r1, #10
 80062c0:	d102      	bne.n	80062c8 <__sfputc_r+0x1c>
 80062c2:	bc10      	pop	{r4}
 80062c4:	f000 b94a 	b.w	800655c <__swbuf_r>
 80062c8:	6813      	ldr	r3, [r2, #0]
 80062ca:	1c58      	adds	r0, r3, #1
 80062cc:	6010      	str	r0, [r2, #0]
 80062ce:	7019      	strb	r1, [r3, #0]
 80062d0:	4608      	mov	r0, r1
 80062d2:	bc10      	pop	{r4}
 80062d4:	4770      	bx	lr

080062d6 <__sfputs_r>:
 80062d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d8:	4606      	mov	r6, r0
 80062da:	460f      	mov	r7, r1
 80062dc:	4614      	mov	r4, r2
 80062de:	18d5      	adds	r5, r2, r3
 80062e0:	42ac      	cmp	r4, r5
 80062e2:	d101      	bne.n	80062e8 <__sfputs_r+0x12>
 80062e4:	2000      	movs	r0, #0
 80062e6:	e007      	b.n	80062f8 <__sfputs_r+0x22>
 80062e8:	463a      	mov	r2, r7
 80062ea:	4630      	mov	r0, r6
 80062ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f0:	f7ff ffdc 	bl	80062ac <__sfputc_r>
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	d1f3      	bne.n	80062e0 <__sfputs_r+0xa>
 80062f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062fc <_vfiprintf_r>:
 80062fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006300:	460d      	mov	r5, r1
 8006302:	4614      	mov	r4, r2
 8006304:	4698      	mov	r8, r3
 8006306:	4606      	mov	r6, r0
 8006308:	b09d      	sub	sp, #116	; 0x74
 800630a:	b118      	cbz	r0, 8006314 <_vfiprintf_r+0x18>
 800630c:	6983      	ldr	r3, [r0, #24]
 800630e:	b90b      	cbnz	r3, 8006314 <_vfiprintf_r+0x18>
 8006310:	f000 fb14 	bl	800693c <__sinit>
 8006314:	4b89      	ldr	r3, [pc, #548]	; (800653c <_vfiprintf_r+0x240>)
 8006316:	429d      	cmp	r5, r3
 8006318:	d11b      	bne.n	8006352 <_vfiprintf_r+0x56>
 800631a:	6875      	ldr	r5, [r6, #4]
 800631c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800631e:	07d9      	lsls	r1, r3, #31
 8006320:	d405      	bmi.n	800632e <_vfiprintf_r+0x32>
 8006322:	89ab      	ldrh	r3, [r5, #12]
 8006324:	059a      	lsls	r2, r3, #22
 8006326:	d402      	bmi.n	800632e <_vfiprintf_r+0x32>
 8006328:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800632a:	f000 fba5 	bl	8006a78 <__retarget_lock_acquire_recursive>
 800632e:	89ab      	ldrh	r3, [r5, #12]
 8006330:	071b      	lsls	r3, r3, #28
 8006332:	d501      	bpl.n	8006338 <_vfiprintf_r+0x3c>
 8006334:	692b      	ldr	r3, [r5, #16]
 8006336:	b9eb      	cbnz	r3, 8006374 <_vfiprintf_r+0x78>
 8006338:	4629      	mov	r1, r5
 800633a:	4630      	mov	r0, r6
 800633c:	f000 f96e 	bl	800661c <__swsetup_r>
 8006340:	b1c0      	cbz	r0, 8006374 <_vfiprintf_r+0x78>
 8006342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006344:	07dc      	lsls	r4, r3, #31
 8006346:	d50e      	bpl.n	8006366 <_vfiprintf_r+0x6a>
 8006348:	f04f 30ff 	mov.w	r0, #4294967295
 800634c:	b01d      	add	sp, #116	; 0x74
 800634e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006352:	4b7b      	ldr	r3, [pc, #492]	; (8006540 <_vfiprintf_r+0x244>)
 8006354:	429d      	cmp	r5, r3
 8006356:	d101      	bne.n	800635c <_vfiprintf_r+0x60>
 8006358:	68b5      	ldr	r5, [r6, #8]
 800635a:	e7df      	b.n	800631c <_vfiprintf_r+0x20>
 800635c:	4b79      	ldr	r3, [pc, #484]	; (8006544 <_vfiprintf_r+0x248>)
 800635e:	429d      	cmp	r5, r3
 8006360:	bf08      	it	eq
 8006362:	68f5      	ldreq	r5, [r6, #12]
 8006364:	e7da      	b.n	800631c <_vfiprintf_r+0x20>
 8006366:	89ab      	ldrh	r3, [r5, #12]
 8006368:	0598      	lsls	r0, r3, #22
 800636a:	d4ed      	bmi.n	8006348 <_vfiprintf_r+0x4c>
 800636c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800636e:	f000 fb84 	bl	8006a7a <__retarget_lock_release_recursive>
 8006372:	e7e9      	b.n	8006348 <_vfiprintf_r+0x4c>
 8006374:	2300      	movs	r3, #0
 8006376:	9309      	str	r3, [sp, #36]	; 0x24
 8006378:	2320      	movs	r3, #32
 800637a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800637e:	2330      	movs	r3, #48	; 0x30
 8006380:	f04f 0901 	mov.w	r9, #1
 8006384:	f8cd 800c 	str.w	r8, [sp, #12]
 8006388:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006548 <_vfiprintf_r+0x24c>
 800638c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006390:	4623      	mov	r3, r4
 8006392:	469a      	mov	sl, r3
 8006394:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006398:	b10a      	cbz	r2, 800639e <_vfiprintf_r+0xa2>
 800639a:	2a25      	cmp	r2, #37	; 0x25
 800639c:	d1f9      	bne.n	8006392 <_vfiprintf_r+0x96>
 800639e:	ebba 0b04 	subs.w	fp, sl, r4
 80063a2:	d00b      	beq.n	80063bc <_vfiprintf_r+0xc0>
 80063a4:	465b      	mov	r3, fp
 80063a6:	4622      	mov	r2, r4
 80063a8:	4629      	mov	r1, r5
 80063aa:	4630      	mov	r0, r6
 80063ac:	f7ff ff93 	bl	80062d6 <__sfputs_r>
 80063b0:	3001      	adds	r0, #1
 80063b2:	f000 80aa 	beq.w	800650a <_vfiprintf_r+0x20e>
 80063b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063b8:	445a      	add	r2, fp
 80063ba:	9209      	str	r2, [sp, #36]	; 0x24
 80063bc:	f89a 3000 	ldrb.w	r3, [sl]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 80a2 	beq.w	800650a <_vfiprintf_r+0x20e>
 80063c6:	2300      	movs	r3, #0
 80063c8:	f04f 32ff 	mov.w	r2, #4294967295
 80063cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063d0:	f10a 0a01 	add.w	sl, sl, #1
 80063d4:	9304      	str	r3, [sp, #16]
 80063d6:	9307      	str	r3, [sp, #28]
 80063d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063dc:	931a      	str	r3, [sp, #104]	; 0x68
 80063de:	4654      	mov	r4, sl
 80063e0:	2205      	movs	r2, #5
 80063e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e6:	4858      	ldr	r0, [pc, #352]	; (8006548 <_vfiprintf_r+0x24c>)
 80063e8:	f7ff f914 	bl	8005614 <memchr>
 80063ec:	9a04      	ldr	r2, [sp, #16]
 80063ee:	b9d8      	cbnz	r0, 8006428 <_vfiprintf_r+0x12c>
 80063f0:	06d1      	lsls	r1, r2, #27
 80063f2:	bf44      	itt	mi
 80063f4:	2320      	movmi	r3, #32
 80063f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063fa:	0713      	lsls	r3, r2, #28
 80063fc:	bf44      	itt	mi
 80063fe:	232b      	movmi	r3, #43	; 0x2b
 8006400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006404:	f89a 3000 	ldrb.w	r3, [sl]
 8006408:	2b2a      	cmp	r3, #42	; 0x2a
 800640a:	d015      	beq.n	8006438 <_vfiprintf_r+0x13c>
 800640c:	4654      	mov	r4, sl
 800640e:	2000      	movs	r0, #0
 8006410:	f04f 0c0a 	mov.w	ip, #10
 8006414:	9a07      	ldr	r2, [sp, #28]
 8006416:	4621      	mov	r1, r4
 8006418:	f811 3b01 	ldrb.w	r3, [r1], #1
 800641c:	3b30      	subs	r3, #48	; 0x30
 800641e:	2b09      	cmp	r3, #9
 8006420:	d94e      	bls.n	80064c0 <_vfiprintf_r+0x1c4>
 8006422:	b1b0      	cbz	r0, 8006452 <_vfiprintf_r+0x156>
 8006424:	9207      	str	r2, [sp, #28]
 8006426:	e014      	b.n	8006452 <_vfiprintf_r+0x156>
 8006428:	eba0 0308 	sub.w	r3, r0, r8
 800642c:	fa09 f303 	lsl.w	r3, r9, r3
 8006430:	4313      	orrs	r3, r2
 8006432:	46a2      	mov	sl, r4
 8006434:	9304      	str	r3, [sp, #16]
 8006436:	e7d2      	b.n	80063de <_vfiprintf_r+0xe2>
 8006438:	9b03      	ldr	r3, [sp, #12]
 800643a:	1d19      	adds	r1, r3, #4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	9103      	str	r1, [sp, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	bfbb      	ittet	lt
 8006444:	425b      	neglt	r3, r3
 8006446:	f042 0202 	orrlt.w	r2, r2, #2
 800644a:	9307      	strge	r3, [sp, #28]
 800644c:	9307      	strlt	r3, [sp, #28]
 800644e:	bfb8      	it	lt
 8006450:	9204      	strlt	r2, [sp, #16]
 8006452:	7823      	ldrb	r3, [r4, #0]
 8006454:	2b2e      	cmp	r3, #46	; 0x2e
 8006456:	d10c      	bne.n	8006472 <_vfiprintf_r+0x176>
 8006458:	7863      	ldrb	r3, [r4, #1]
 800645a:	2b2a      	cmp	r3, #42	; 0x2a
 800645c:	d135      	bne.n	80064ca <_vfiprintf_r+0x1ce>
 800645e:	9b03      	ldr	r3, [sp, #12]
 8006460:	3402      	adds	r4, #2
 8006462:	1d1a      	adds	r2, r3, #4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	9203      	str	r2, [sp, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	bfb8      	it	lt
 800646c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006470:	9305      	str	r3, [sp, #20]
 8006472:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006558 <_vfiprintf_r+0x25c>
 8006476:	2203      	movs	r2, #3
 8006478:	4650      	mov	r0, sl
 800647a:	7821      	ldrb	r1, [r4, #0]
 800647c:	f7ff f8ca 	bl	8005614 <memchr>
 8006480:	b140      	cbz	r0, 8006494 <_vfiprintf_r+0x198>
 8006482:	2340      	movs	r3, #64	; 0x40
 8006484:	eba0 000a 	sub.w	r0, r0, sl
 8006488:	fa03 f000 	lsl.w	r0, r3, r0
 800648c:	9b04      	ldr	r3, [sp, #16]
 800648e:	3401      	adds	r4, #1
 8006490:	4303      	orrs	r3, r0
 8006492:	9304      	str	r3, [sp, #16]
 8006494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006498:	2206      	movs	r2, #6
 800649a:	482c      	ldr	r0, [pc, #176]	; (800654c <_vfiprintf_r+0x250>)
 800649c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064a0:	f7ff f8b8 	bl	8005614 <memchr>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d03f      	beq.n	8006528 <_vfiprintf_r+0x22c>
 80064a8:	4b29      	ldr	r3, [pc, #164]	; (8006550 <_vfiprintf_r+0x254>)
 80064aa:	bb1b      	cbnz	r3, 80064f4 <_vfiprintf_r+0x1f8>
 80064ac:	9b03      	ldr	r3, [sp, #12]
 80064ae:	3307      	adds	r3, #7
 80064b0:	f023 0307 	bic.w	r3, r3, #7
 80064b4:	3308      	adds	r3, #8
 80064b6:	9303      	str	r3, [sp, #12]
 80064b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ba:	443b      	add	r3, r7
 80064bc:	9309      	str	r3, [sp, #36]	; 0x24
 80064be:	e767      	b.n	8006390 <_vfiprintf_r+0x94>
 80064c0:	460c      	mov	r4, r1
 80064c2:	2001      	movs	r0, #1
 80064c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80064c8:	e7a5      	b.n	8006416 <_vfiprintf_r+0x11a>
 80064ca:	2300      	movs	r3, #0
 80064cc:	f04f 0c0a 	mov.w	ip, #10
 80064d0:	4619      	mov	r1, r3
 80064d2:	3401      	adds	r4, #1
 80064d4:	9305      	str	r3, [sp, #20]
 80064d6:	4620      	mov	r0, r4
 80064d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064dc:	3a30      	subs	r2, #48	; 0x30
 80064de:	2a09      	cmp	r2, #9
 80064e0:	d903      	bls.n	80064ea <_vfiprintf_r+0x1ee>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0c5      	beq.n	8006472 <_vfiprintf_r+0x176>
 80064e6:	9105      	str	r1, [sp, #20]
 80064e8:	e7c3      	b.n	8006472 <_vfiprintf_r+0x176>
 80064ea:	4604      	mov	r4, r0
 80064ec:	2301      	movs	r3, #1
 80064ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80064f2:	e7f0      	b.n	80064d6 <_vfiprintf_r+0x1da>
 80064f4:	ab03      	add	r3, sp, #12
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	462a      	mov	r2, r5
 80064fa:	4630      	mov	r0, r6
 80064fc:	4b15      	ldr	r3, [pc, #84]	; (8006554 <_vfiprintf_r+0x258>)
 80064fe:	a904      	add	r1, sp, #16
 8006500:	f7fd fe1c 	bl	800413c <_printf_float>
 8006504:	4607      	mov	r7, r0
 8006506:	1c78      	adds	r0, r7, #1
 8006508:	d1d6      	bne.n	80064b8 <_vfiprintf_r+0x1bc>
 800650a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800650c:	07d9      	lsls	r1, r3, #31
 800650e:	d405      	bmi.n	800651c <_vfiprintf_r+0x220>
 8006510:	89ab      	ldrh	r3, [r5, #12]
 8006512:	059a      	lsls	r2, r3, #22
 8006514:	d402      	bmi.n	800651c <_vfiprintf_r+0x220>
 8006516:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006518:	f000 faaf 	bl	8006a7a <__retarget_lock_release_recursive>
 800651c:	89ab      	ldrh	r3, [r5, #12]
 800651e:	065b      	lsls	r3, r3, #25
 8006520:	f53f af12 	bmi.w	8006348 <_vfiprintf_r+0x4c>
 8006524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006526:	e711      	b.n	800634c <_vfiprintf_r+0x50>
 8006528:	ab03      	add	r3, sp, #12
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	462a      	mov	r2, r5
 800652e:	4630      	mov	r0, r6
 8006530:	4b08      	ldr	r3, [pc, #32]	; (8006554 <_vfiprintf_r+0x258>)
 8006532:	a904      	add	r1, sp, #16
 8006534:	f7fe f89e 	bl	8004674 <_printf_i>
 8006538:	e7e4      	b.n	8006504 <_vfiprintf_r+0x208>
 800653a:	bf00      	nop
 800653c:	0800715c 	.word	0x0800715c
 8006540:	0800717c 	.word	0x0800717c
 8006544:	0800713c 	.word	0x0800713c
 8006548:	08006fe4 	.word	0x08006fe4
 800654c:	08006fee 	.word	0x08006fee
 8006550:	0800413d 	.word	0x0800413d
 8006554:	080062d7 	.word	0x080062d7
 8006558:	08006fea 	.word	0x08006fea

0800655c <__swbuf_r>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	460e      	mov	r6, r1
 8006560:	4614      	mov	r4, r2
 8006562:	4605      	mov	r5, r0
 8006564:	b118      	cbz	r0, 800656e <__swbuf_r+0x12>
 8006566:	6983      	ldr	r3, [r0, #24]
 8006568:	b90b      	cbnz	r3, 800656e <__swbuf_r+0x12>
 800656a:	f000 f9e7 	bl	800693c <__sinit>
 800656e:	4b21      	ldr	r3, [pc, #132]	; (80065f4 <__swbuf_r+0x98>)
 8006570:	429c      	cmp	r4, r3
 8006572:	d12b      	bne.n	80065cc <__swbuf_r+0x70>
 8006574:	686c      	ldr	r4, [r5, #4]
 8006576:	69a3      	ldr	r3, [r4, #24]
 8006578:	60a3      	str	r3, [r4, #8]
 800657a:	89a3      	ldrh	r3, [r4, #12]
 800657c:	071a      	lsls	r2, r3, #28
 800657e:	d52f      	bpl.n	80065e0 <__swbuf_r+0x84>
 8006580:	6923      	ldr	r3, [r4, #16]
 8006582:	b36b      	cbz	r3, 80065e0 <__swbuf_r+0x84>
 8006584:	6923      	ldr	r3, [r4, #16]
 8006586:	6820      	ldr	r0, [r4, #0]
 8006588:	b2f6      	uxtb	r6, r6
 800658a:	1ac0      	subs	r0, r0, r3
 800658c:	6963      	ldr	r3, [r4, #20]
 800658e:	4637      	mov	r7, r6
 8006590:	4283      	cmp	r3, r0
 8006592:	dc04      	bgt.n	800659e <__swbuf_r+0x42>
 8006594:	4621      	mov	r1, r4
 8006596:	4628      	mov	r0, r5
 8006598:	f000 f93c 	bl	8006814 <_fflush_r>
 800659c:	bb30      	cbnz	r0, 80065ec <__swbuf_r+0x90>
 800659e:	68a3      	ldr	r3, [r4, #8]
 80065a0:	3001      	adds	r0, #1
 80065a2:	3b01      	subs	r3, #1
 80065a4:	60a3      	str	r3, [r4, #8]
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	6022      	str	r2, [r4, #0]
 80065ac:	701e      	strb	r6, [r3, #0]
 80065ae:	6963      	ldr	r3, [r4, #20]
 80065b0:	4283      	cmp	r3, r0
 80065b2:	d004      	beq.n	80065be <__swbuf_r+0x62>
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	07db      	lsls	r3, r3, #31
 80065b8:	d506      	bpl.n	80065c8 <__swbuf_r+0x6c>
 80065ba:	2e0a      	cmp	r6, #10
 80065bc:	d104      	bne.n	80065c8 <__swbuf_r+0x6c>
 80065be:	4621      	mov	r1, r4
 80065c0:	4628      	mov	r0, r5
 80065c2:	f000 f927 	bl	8006814 <_fflush_r>
 80065c6:	b988      	cbnz	r0, 80065ec <__swbuf_r+0x90>
 80065c8:	4638      	mov	r0, r7
 80065ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065cc:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <__swbuf_r+0x9c>)
 80065ce:	429c      	cmp	r4, r3
 80065d0:	d101      	bne.n	80065d6 <__swbuf_r+0x7a>
 80065d2:	68ac      	ldr	r4, [r5, #8]
 80065d4:	e7cf      	b.n	8006576 <__swbuf_r+0x1a>
 80065d6:	4b09      	ldr	r3, [pc, #36]	; (80065fc <__swbuf_r+0xa0>)
 80065d8:	429c      	cmp	r4, r3
 80065da:	bf08      	it	eq
 80065dc:	68ec      	ldreq	r4, [r5, #12]
 80065de:	e7ca      	b.n	8006576 <__swbuf_r+0x1a>
 80065e0:	4621      	mov	r1, r4
 80065e2:	4628      	mov	r0, r5
 80065e4:	f000 f81a 	bl	800661c <__swsetup_r>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d0cb      	beq.n	8006584 <__swbuf_r+0x28>
 80065ec:	f04f 37ff 	mov.w	r7, #4294967295
 80065f0:	e7ea      	b.n	80065c8 <__swbuf_r+0x6c>
 80065f2:	bf00      	nop
 80065f4:	0800715c 	.word	0x0800715c
 80065f8:	0800717c 	.word	0x0800717c
 80065fc:	0800713c 	.word	0x0800713c

08006600 <__ascii_wctomb>:
 8006600:	4603      	mov	r3, r0
 8006602:	4608      	mov	r0, r1
 8006604:	b141      	cbz	r1, 8006618 <__ascii_wctomb+0x18>
 8006606:	2aff      	cmp	r2, #255	; 0xff
 8006608:	d904      	bls.n	8006614 <__ascii_wctomb+0x14>
 800660a:	228a      	movs	r2, #138	; 0x8a
 800660c:	f04f 30ff 	mov.w	r0, #4294967295
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	4770      	bx	lr
 8006614:	2001      	movs	r0, #1
 8006616:	700a      	strb	r2, [r1, #0]
 8006618:	4770      	bx	lr
	...

0800661c <__swsetup_r>:
 800661c:	4b32      	ldr	r3, [pc, #200]	; (80066e8 <__swsetup_r+0xcc>)
 800661e:	b570      	push	{r4, r5, r6, lr}
 8006620:	681d      	ldr	r5, [r3, #0]
 8006622:	4606      	mov	r6, r0
 8006624:	460c      	mov	r4, r1
 8006626:	b125      	cbz	r5, 8006632 <__swsetup_r+0x16>
 8006628:	69ab      	ldr	r3, [r5, #24]
 800662a:	b913      	cbnz	r3, 8006632 <__swsetup_r+0x16>
 800662c:	4628      	mov	r0, r5
 800662e:	f000 f985 	bl	800693c <__sinit>
 8006632:	4b2e      	ldr	r3, [pc, #184]	; (80066ec <__swsetup_r+0xd0>)
 8006634:	429c      	cmp	r4, r3
 8006636:	d10f      	bne.n	8006658 <__swsetup_r+0x3c>
 8006638:	686c      	ldr	r4, [r5, #4]
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006640:	0719      	lsls	r1, r3, #28
 8006642:	d42c      	bmi.n	800669e <__swsetup_r+0x82>
 8006644:	06dd      	lsls	r5, r3, #27
 8006646:	d411      	bmi.n	800666c <__swsetup_r+0x50>
 8006648:	2309      	movs	r3, #9
 800664a:	6033      	str	r3, [r6, #0]
 800664c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006650:	f04f 30ff 	mov.w	r0, #4294967295
 8006654:	81a3      	strh	r3, [r4, #12]
 8006656:	e03e      	b.n	80066d6 <__swsetup_r+0xba>
 8006658:	4b25      	ldr	r3, [pc, #148]	; (80066f0 <__swsetup_r+0xd4>)
 800665a:	429c      	cmp	r4, r3
 800665c:	d101      	bne.n	8006662 <__swsetup_r+0x46>
 800665e:	68ac      	ldr	r4, [r5, #8]
 8006660:	e7eb      	b.n	800663a <__swsetup_r+0x1e>
 8006662:	4b24      	ldr	r3, [pc, #144]	; (80066f4 <__swsetup_r+0xd8>)
 8006664:	429c      	cmp	r4, r3
 8006666:	bf08      	it	eq
 8006668:	68ec      	ldreq	r4, [r5, #12]
 800666a:	e7e6      	b.n	800663a <__swsetup_r+0x1e>
 800666c:	0758      	lsls	r0, r3, #29
 800666e:	d512      	bpl.n	8006696 <__swsetup_r+0x7a>
 8006670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006672:	b141      	cbz	r1, 8006686 <__swsetup_r+0x6a>
 8006674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006678:	4299      	cmp	r1, r3
 800667a:	d002      	beq.n	8006682 <__swsetup_r+0x66>
 800667c:	4630      	mov	r0, r6
 800667e:	f7ff fb75 	bl	8005d6c <_free_r>
 8006682:	2300      	movs	r3, #0
 8006684:	6363      	str	r3, [r4, #52]	; 0x34
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800668c:	81a3      	strh	r3, [r4, #12]
 800668e:	2300      	movs	r3, #0
 8006690:	6063      	str	r3, [r4, #4]
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	6023      	str	r3, [r4, #0]
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	f043 0308 	orr.w	r3, r3, #8
 800669c:	81a3      	strh	r3, [r4, #12]
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	b94b      	cbnz	r3, 80066b6 <__swsetup_r+0x9a>
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ac:	d003      	beq.n	80066b6 <__swsetup_r+0x9a>
 80066ae:	4621      	mov	r1, r4
 80066b0:	4630      	mov	r0, r6
 80066b2:	f000 fa07 	bl	8006ac4 <__smakebuf_r>
 80066b6:	89a0      	ldrh	r0, [r4, #12]
 80066b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066bc:	f010 0301 	ands.w	r3, r0, #1
 80066c0:	d00a      	beq.n	80066d8 <__swsetup_r+0xbc>
 80066c2:	2300      	movs	r3, #0
 80066c4:	60a3      	str	r3, [r4, #8]
 80066c6:	6963      	ldr	r3, [r4, #20]
 80066c8:	425b      	negs	r3, r3
 80066ca:	61a3      	str	r3, [r4, #24]
 80066cc:	6923      	ldr	r3, [r4, #16]
 80066ce:	b943      	cbnz	r3, 80066e2 <__swsetup_r+0xc6>
 80066d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066d4:	d1ba      	bne.n	800664c <__swsetup_r+0x30>
 80066d6:	bd70      	pop	{r4, r5, r6, pc}
 80066d8:	0781      	lsls	r1, r0, #30
 80066da:	bf58      	it	pl
 80066dc:	6963      	ldrpl	r3, [r4, #20]
 80066de:	60a3      	str	r3, [r4, #8]
 80066e0:	e7f4      	b.n	80066cc <__swsetup_r+0xb0>
 80066e2:	2000      	movs	r0, #0
 80066e4:	e7f7      	b.n	80066d6 <__swsetup_r+0xba>
 80066e6:	bf00      	nop
 80066e8:	2000000c 	.word	0x2000000c
 80066ec:	0800715c 	.word	0x0800715c
 80066f0:	0800717c 	.word	0x0800717c
 80066f4:	0800713c 	.word	0x0800713c

080066f8 <abort>:
 80066f8:	2006      	movs	r0, #6
 80066fa:	b508      	push	{r3, lr}
 80066fc:	f000 fa52 	bl	8006ba4 <raise>
 8006700:	2001      	movs	r0, #1
 8006702:	f7fb f8ef 	bl	80018e4 <_exit>
	...

08006708 <__sflush_r>:
 8006708:	898a      	ldrh	r2, [r1, #12]
 800670a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800670e:	4605      	mov	r5, r0
 8006710:	0710      	lsls	r0, r2, #28
 8006712:	460c      	mov	r4, r1
 8006714:	d458      	bmi.n	80067c8 <__sflush_r+0xc0>
 8006716:	684b      	ldr	r3, [r1, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	dc05      	bgt.n	8006728 <__sflush_r+0x20>
 800671c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	dc02      	bgt.n	8006728 <__sflush_r+0x20>
 8006722:	2000      	movs	r0, #0
 8006724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800672a:	2e00      	cmp	r6, #0
 800672c:	d0f9      	beq.n	8006722 <__sflush_r+0x1a>
 800672e:	2300      	movs	r3, #0
 8006730:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006734:	682f      	ldr	r7, [r5, #0]
 8006736:	602b      	str	r3, [r5, #0]
 8006738:	d032      	beq.n	80067a0 <__sflush_r+0x98>
 800673a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	075a      	lsls	r2, r3, #29
 8006740:	d505      	bpl.n	800674e <__sflush_r+0x46>
 8006742:	6863      	ldr	r3, [r4, #4]
 8006744:	1ac0      	subs	r0, r0, r3
 8006746:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006748:	b10b      	cbz	r3, 800674e <__sflush_r+0x46>
 800674a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800674c:	1ac0      	subs	r0, r0, r3
 800674e:	2300      	movs	r3, #0
 8006750:	4602      	mov	r2, r0
 8006752:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006754:	4628      	mov	r0, r5
 8006756:	6a21      	ldr	r1, [r4, #32]
 8006758:	47b0      	blx	r6
 800675a:	1c43      	adds	r3, r0, #1
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	d106      	bne.n	800676e <__sflush_r+0x66>
 8006760:	6829      	ldr	r1, [r5, #0]
 8006762:	291d      	cmp	r1, #29
 8006764:	d82c      	bhi.n	80067c0 <__sflush_r+0xb8>
 8006766:	4a2a      	ldr	r2, [pc, #168]	; (8006810 <__sflush_r+0x108>)
 8006768:	40ca      	lsrs	r2, r1
 800676a:	07d6      	lsls	r6, r2, #31
 800676c:	d528      	bpl.n	80067c0 <__sflush_r+0xb8>
 800676e:	2200      	movs	r2, #0
 8006770:	6062      	str	r2, [r4, #4]
 8006772:	6922      	ldr	r2, [r4, #16]
 8006774:	04d9      	lsls	r1, r3, #19
 8006776:	6022      	str	r2, [r4, #0]
 8006778:	d504      	bpl.n	8006784 <__sflush_r+0x7c>
 800677a:	1c42      	adds	r2, r0, #1
 800677c:	d101      	bne.n	8006782 <__sflush_r+0x7a>
 800677e:	682b      	ldr	r3, [r5, #0]
 8006780:	b903      	cbnz	r3, 8006784 <__sflush_r+0x7c>
 8006782:	6560      	str	r0, [r4, #84]	; 0x54
 8006784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006786:	602f      	str	r7, [r5, #0]
 8006788:	2900      	cmp	r1, #0
 800678a:	d0ca      	beq.n	8006722 <__sflush_r+0x1a>
 800678c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006790:	4299      	cmp	r1, r3
 8006792:	d002      	beq.n	800679a <__sflush_r+0x92>
 8006794:	4628      	mov	r0, r5
 8006796:	f7ff fae9 	bl	8005d6c <_free_r>
 800679a:	2000      	movs	r0, #0
 800679c:	6360      	str	r0, [r4, #52]	; 0x34
 800679e:	e7c1      	b.n	8006724 <__sflush_r+0x1c>
 80067a0:	6a21      	ldr	r1, [r4, #32]
 80067a2:	2301      	movs	r3, #1
 80067a4:	4628      	mov	r0, r5
 80067a6:	47b0      	blx	r6
 80067a8:	1c41      	adds	r1, r0, #1
 80067aa:	d1c7      	bne.n	800673c <__sflush_r+0x34>
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0c4      	beq.n	800673c <__sflush_r+0x34>
 80067b2:	2b1d      	cmp	r3, #29
 80067b4:	d001      	beq.n	80067ba <__sflush_r+0xb2>
 80067b6:	2b16      	cmp	r3, #22
 80067b8:	d101      	bne.n	80067be <__sflush_r+0xb6>
 80067ba:	602f      	str	r7, [r5, #0]
 80067bc:	e7b1      	b.n	8006722 <__sflush_r+0x1a>
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067c4:	81a3      	strh	r3, [r4, #12]
 80067c6:	e7ad      	b.n	8006724 <__sflush_r+0x1c>
 80067c8:	690f      	ldr	r7, [r1, #16]
 80067ca:	2f00      	cmp	r7, #0
 80067cc:	d0a9      	beq.n	8006722 <__sflush_r+0x1a>
 80067ce:	0793      	lsls	r3, r2, #30
 80067d0:	bf18      	it	ne
 80067d2:	2300      	movne	r3, #0
 80067d4:	680e      	ldr	r6, [r1, #0]
 80067d6:	bf08      	it	eq
 80067d8:	694b      	ldreq	r3, [r1, #20]
 80067da:	eba6 0807 	sub.w	r8, r6, r7
 80067de:	600f      	str	r7, [r1, #0]
 80067e0:	608b      	str	r3, [r1, #8]
 80067e2:	f1b8 0f00 	cmp.w	r8, #0
 80067e6:	dd9c      	ble.n	8006722 <__sflush_r+0x1a>
 80067e8:	4643      	mov	r3, r8
 80067ea:	463a      	mov	r2, r7
 80067ec:	4628      	mov	r0, r5
 80067ee:	6a21      	ldr	r1, [r4, #32]
 80067f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067f2:	47b0      	blx	r6
 80067f4:	2800      	cmp	r0, #0
 80067f6:	dc06      	bgt.n	8006806 <__sflush_r+0xfe>
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	f04f 30ff 	mov.w	r0, #4294967295
 80067fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006802:	81a3      	strh	r3, [r4, #12]
 8006804:	e78e      	b.n	8006724 <__sflush_r+0x1c>
 8006806:	4407      	add	r7, r0
 8006808:	eba8 0800 	sub.w	r8, r8, r0
 800680c:	e7e9      	b.n	80067e2 <__sflush_r+0xda>
 800680e:	bf00      	nop
 8006810:	20400001 	.word	0x20400001

08006814 <_fflush_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	690b      	ldr	r3, [r1, #16]
 8006818:	4605      	mov	r5, r0
 800681a:	460c      	mov	r4, r1
 800681c:	b913      	cbnz	r3, 8006824 <_fflush_r+0x10>
 800681e:	2500      	movs	r5, #0
 8006820:	4628      	mov	r0, r5
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	b118      	cbz	r0, 800682e <_fflush_r+0x1a>
 8006826:	6983      	ldr	r3, [r0, #24]
 8006828:	b90b      	cbnz	r3, 800682e <_fflush_r+0x1a>
 800682a:	f000 f887 	bl	800693c <__sinit>
 800682e:	4b14      	ldr	r3, [pc, #80]	; (8006880 <_fflush_r+0x6c>)
 8006830:	429c      	cmp	r4, r3
 8006832:	d11b      	bne.n	800686c <_fflush_r+0x58>
 8006834:	686c      	ldr	r4, [r5, #4]
 8006836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0ef      	beq.n	800681e <_fflush_r+0xa>
 800683e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006840:	07d0      	lsls	r0, r2, #31
 8006842:	d404      	bmi.n	800684e <_fflush_r+0x3a>
 8006844:	0599      	lsls	r1, r3, #22
 8006846:	d402      	bmi.n	800684e <_fflush_r+0x3a>
 8006848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800684a:	f000 f915 	bl	8006a78 <__retarget_lock_acquire_recursive>
 800684e:	4628      	mov	r0, r5
 8006850:	4621      	mov	r1, r4
 8006852:	f7ff ff59 	bl	8006708 <__sflush_r>
 8006856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006858:	4605      	mov	r5, r0
 800685a:	07da      	lsls	r2, r3, #31
 800685c:	d4e0      	bmi.n	8006820 <_fflush_r+0xc>
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	059b      	lsls	r3, r3, #22
 8006862:	d4dd      	bmi.n	8006820 <_fflush_r+0xc>
 8006864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006866:	f000 f908 	bl	8006a7a <__retarget_lock_release_recursive>
 800686a:	e7d9      	b.n	8006820 <_fflush_r+0xc>
 800686c:	4b05      	ldr	r3, [pc, #20]	; (8006884 <_fflush_r+0x70>)
 800686e:	429c      	cmp	r4, r3
 8006870:	d101      	bne.n	8006876 <_fflush_r+0x62>
 8006872:	68ac      	ldr	r4, [r5, #8]
 8006874:	e7df      	b.n	8006836 <_fflush_r+0x22>
 8006876:	4b04      	ldr	r3, [pc, #16]	; (8006888 <_fflush_r+0x74>)
 8006878:	429c      	cmp	r4, r3
 800687a:	bf08      	it	eq
 800687c:	68ec      	ldreq	r4, [r5, #12]
 800687e:	e7da      	b.n	8006836 <_fflush_r+0x22>
 8006880:	0800715c 	.word	0x0800715c
 8006884:	0800717c 	.word	0x0800717c
 8006888:	0800713c 	.word	0x0800713c

0800688c <std>:
 800688c:	2300      	movs	r3, #0
 800688e:	b510      	push	{r4, lr}
 8006890:	4604      	mov	r4, r0
 8006892:	e9c0 3300 	strd	r3, r3, [r0]
 8006896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800689a:	6083      	str	r3, [r0, #8]
 800689c:	8181      	strh	r1, [r0, #12]
 800689e:	6643      	str	r3, [r0, #100]	; 0x64
 80068a0:	81c2      	strh	r2, [r0, #14]
 80068a2:	6183      	str	r3, [r0, #24]
 80068a4:	4619      	mov	r1, r3
 80068a6:	2208      	movs	r2, #8
 80068a8:	305c      	adds	r0, #92	; 0x5c
 80068aa:	f7fd fba1 	bl	8003ff0 <memset>
 80068ae:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <std+0x38>)
 80068b0:	6224      	str	r4, [r4, #32]
 80068b2:	6263      	str	r3, [r4, #36]	; 0x24
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <std+0x3c>)
 80068b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80068b8:	4b04      	ldr	r3, [pc, #16]	; (80068cc <std+0x40>)
 80068ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068bc:	4b04      	ldr	r3, [pc, #16]	; (80068d0 <std+0x44>)
 80068be:	6323      	str	r3, [r4, #48]	; 0x30
 80068c0:	bd10      	pop	{r4, pc}
 80068c2:	bf00      	nop
 80068c4:	08006bdd 	.word	0x08006bdd
 80068c8:	08006bff 	.word	0x08006bff
 80068cc:	08006c37 	.word	0x08006c37
 80068d0:	08006c5b 	.word	0x08006c5b

080068d4 <_cleanup_r>:
 80068d4:	4901      	ldr	r1, [pc, #4]	; (80068dc <_cleanup_r+0x8>)
 80068d6:	f000 b8af 	b.w	8006a38 <_fwalk_reent>
 80068da:	bf00      	nop
 80068dc:	08006815 	.word	0x08006815

080068e0 <__sfmoreglue>:
 80068e0:	b570      	push	{r4, r5, r6, lr}
 80068e2:	2568      	movs	r5, #104	; 0x68
 80068e4:	1e4a      	subs	r2, r1, #1
 80068e6:	4355      	muls	r5, r2
 80068e8:	460e      	mov	r6, r1
 80068ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068ee:	f7ff fa89 	bl	8005e04 <_malloc_r>
 80068f2:	4604      	mov	r4, r0
 80068f4:	b140      	cbz	r0, 8006908 <__sfmoreglue+0x28>
 80068f6:	2100      	movs	r1, #0
 80068f8:	e9c0 1600 	strd	r1, r6, [r0]
 80068fc:	300c      	adds	r0, #12
 80068fe:	60a0      	str	r0, [r4, #8]
 8006900:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006904:	f7fd fb74 	bl	8003ff0 <memset>
 8006908:	4620      	mov	r0, r4
 800690a:	bd70      	pop	{r4, r5, r6, pc}

0800690c <__sfp_lock_acquire>:
 800690c:	4801      	ldr	r0, [pc, #4]	; (8006914 <__sfp_lock_acquire+0x8>)
 800690e:	f000 b8b3 	b.w	8006a78 <__retarget_lock_acquire_recursive>
 8006912:	bf00      	nop
 8006914:	20000384 	.word	0x20000384

08006918 <__sfp_lock_release>:
 8006918:	4801      	ldr	r0, [pc, #4]	; (8006920 <__sfp_lock_release+0x8>)
 800691a:	f000 b8ae 	b.w	8006a7a <__retarget_lock_release_recursive>
 800691e:	bf00      	nop
 8006920:	20000384 	.word	0x20000384

08006924 <__sinit_lock_acquire>:
 8006924:	4801      	ldr	r0, [pc, #4]	; (800692c <__sinit_lock_acquire+0x8>)
 8006926:	f000 b8a7 	b.w	8006a78 <__retarget_lock_acquire_recursive>
 800692a:	bf00      	nop
 800692c:	2000037f 	.word	0x2000037f

08006930 <__sinit_lock_release>:
 8006930:	4801      	ldr	r0, [pc, #4]	; (8006938 <__sinit_lock_release+0x8>)
 8006932:	f000 b8a2 	b.w	8006a7a <__retarget_lock_release_recursive>
 8006936:	bf00      	nop
 8006938:	2000037f 	.word	0x2000037f

0800693c <__sinit>:
 800693c:	b510      	push	{r4, lr}
 800693e:	4604      	mov	r4, r0
 8006940:	f7ff fff0 	bl	8006924 <__sinit_lock_acquire>
 8006944:	69a3      	ldr	r3, [r4, #24]
 8006946:	b11b      	cbz	r3, 8006950 <__sinit+0x14>
 8006948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800694c:	f7ff bff0 	b.w	8006930 <__sinit_lock_release>
 8006950:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006954:	6523      	str	r3, [r4, #80]	; 0x50
 8006956:	4b13      	ldr	r3, [pc, #76]	; (80069a4 <__sinit+0x68>)
 8006958:	4a13      	ldr	r2, [pc, #76]	; (80069a8 <__sinit+0x6c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	62a2      	str	r2, [r4, #40]	; 0x28
 800695e:	42a3      	cmp	r3, r4
 8006960:	bf08      	it	eq
 8006962:	2301      	moveq	r3, #1
 8006964:	4620      	mov	r0, r4
 8006966:	bf08      	it	eq
 8006968:	61a3      	streq	r3, [r4, #24]
 800696a:	f000 f81f 	bl	80069ac <__sfp>
 800696e:	6060      	str	r0, [r4, #4]
 8006970:	4620      	mov	r0, r4
 8006972:	f000 f81b 	bl	80069ac <__sfp>
 8006976:	60a0      	str	r0, [r4, #8]
 8006978:	4620      	mov	r0, r4
 800697a:	f000 f817 	bl	80069ac <__sfp>
 800697e:	2200      	movs	r2, #0
 8006980:	2104      	movs	r1, #4
 8006982:	60e0      	str	r0, [r4, #12]
 8006984:	6860      	ldr	r0, [r4, #4]
 8006986:	f7ff ff81 	bl	800688c <std>
 800698a:	2201      	movs	r2, #1
 800698c:	2109      	movs	r1, #9
 800698e:	68a0      	ldr	r0, [r4, #8]
 8006990:	f7ff ff7c 	bl	800688c <std>
 8006994:	2202      	movs	r2, #2
 8006996:	2112      	movs	r1, #18
 8006998:	68e0      	ldr	r0, [r4, #12]
 800699a:	f7ff ff77 	bl	800688c <std>
 800699e:	2301      	movs	r3, #1
 80069a0:	61a3      	str	r3, [r4, #24]
 80069a2:	e7d1      	b.n	8006948 <__sinit+0xc>
 80069a4:	08006dbc 	.word	0x08006dbc
 80069a8:	080068d5 	.word	0x080068d5

080069ac <__sfp>:
 80069ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ae:	4607      	mov	r7, r0
 80069b0:	f7ff ffac 	bl	800690c <__sfp_lock_acquire>
 80069b4:	4b1e      	ldr	r3, [pc, #120]	; (8006a30 <__sfp+0x84>)
 80069b6:	681e      	ldr	r6, [r3, #0]
 80069b8:	69b3      	ldr	r3, [r6, #24]
 80069ba:	b913      	cbnz	r3, 80069c2 <__sfp+0x16>
 80069bc:	4630      	mov	r0, r6
 80069be:	f7ff ffbd 	bl	800693c <__sinit>
 80069c2:	3648      	adds	r6, #72	; 0x48
 80069c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	d503      	bpl.n	80069d4 <__sfp+0x28>
 80069cc:	6833      	ldr	r3, [r6, #0]
 80069ce:	b30b      	cbz	r3, 8006a14 <__sfp+0x68>
 80069d0:	6836      	ldr	r6, [r6, #0]
 80069d2:	e7f7      	b.n	80069c4 <__sfp+0x18>
 80069d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069d8:	b9d5      	cbnz	r5, 8006a10 <__sfp+0x64>
 80069da:	4b16      	ldr	r3, [pc, #88]	; (8006a34 <__sfp+0x88>)
 80069dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069e0:	60e3      	str	r3, [r4, #12]
 80069e2:	6665      	str	r5, [r4, #100]	; 0x64
 80069e4:	f000 f847 	bl	8006a76 <__retarget_lock_init_recursive>
 80069e8:	f7ff ff96 	bl	8006918 <__sfp_lock_release>
 80069ec:	2208      	movs	r2, #8
 80069ee:	4629      	mov	r1, r5
 80069f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069f8:	6025      	str	r5, [r4, #0]
 80069fa:	61a5      	str	r5, [r4, #24]
 80069fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a00:	f7fd faf6 	bl	8003ff0 <memset>
 8006a04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a10:	3468      	adds	r4, #104	; 0x68
 8006a12:	e7d9      	b.n	80069c8 <__sfp+0x1c>
 8006a14:	2104      	movs	r1, #4
 8006a16:	4638      	mov	r0, r7
 8006a18:	f7ff ff62 	bl	80068e0 <__sfmoreglue>
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	6030      	str	r0, [r6, #0]
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d1d5      	bne.n	80069d0 <__sfp+0x24>
 8006a24:	f7ff ff78 	bl	8006918 <__sfp_lock_release>
 8006a28:	230c      	movs	r3, #12
 8006a2a:	603b      	str	r3, [r7, #0]
 8006a2c:	e7ee      	b.n	8006a0c <__sfp+0x60>
 8006a2e:	bf00      	nop
 8006a30:	08006dbc 	.word	0x08006dbc
 8006a34:	ffff0001 	.word	0xffff0001

08006a38 <_fwalk_reent>:
 8006a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a3c:	4606      	mov	r6, r0
 8006a3e:	4688      	mov	r8, r1
 8006a40:	2700      	movs	r7, #0
 8006a42:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a4a:	f1b9 0901 	subs.w	r9, r9, #1
 8006a4e:	d505      	bpl.n	8006a5c <_fwalk_reent+0x24>
 8006a50:	6824      	ldr	r4, [r4, #0]
 8006a52:	2c00      	cmp	r4, #0
 8006a54:	d1f7      	bne.n	8006a46 <_fwalk_reent+0xe>
 8006a56:	4638      	mov	r0, r7
 8006a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a5c:	89ab      	ldrh	r3, [r5, #12]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d907      	bls.n	8006a72 <_fwalk_reent+0x3a>
 8006a62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a66:	3301      	adds	r3, #1
 8006a68:	d003      	beq.n	8006a72 <_fwalk_reent+0x3a>
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	47c0      	blx	r8
 8006a70:	4307      	orrs	r7, r0
 8006a72:	3568      	adds	r5, #104	; 0x68
 8006a74:	e7e9      	b.n	8006a4a <_fwalk_reent+0x12>

08006a76 <__retarget_lock_init_recursive>:
 8006a76:	4770      	bx	lr

08006a78 <__retarget_lock_acquire_recursive>:
 8006a78:	4770      	bx	lr

08006a7a <__retarget_lock_release_recursive>:
 8006a7a:	4770      	bx	lr

08006a7c <__swhatbuf_r>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	460e      	mov	r6, r1
 8006a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a84:	4614      	mov	r4, r2
 8006a86:	2900      	cmp	r1, #0
 8006a88:	461d      	mov	r5, r3
 8006a8a:	b096      	sub	sp, #88	; 0x58
 8006a8c:	da07      	bge.n	8006a9e <__swhatbuf_r+0x22>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	602b      	str	r3, [r5, #0]
 8006a92:	89b3      	ldrh	r3, [r6, #12]
 8006a94:	061a      	lsls	r2, r3, #24
 8006a96:	d410      	bmi.n	8006aba <__swhatbuf_r+0x3e>
 8006a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a9c:	e00e      	b.n	8006abc <__swhatbuf_r+0x40>
 8006a9e:	466a      	mov	r2, sp
 8006aa0:	f000 f902 	bl	8006ca8 <_fstat_r>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	dbf2      	blt.n	8006a8e <__swhatbuf_r+0x12>
 8006aa8:	9a01      	ldr	r2, [sp, #4]
 8006aaa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006aae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ab2:	425a      	negs	r2, r3
 8006ab4:	415a      	adcs	r2, r3
 8006ab6:	602a      	str	r2, [r5, #0]
 8006ab8:	e7ee      	b.n	8006a98 <__swhatbuf_r+0x1c>
 8006aba:	2340      	movs	r3, #64	; 0x40
 8006abc:	2000      	movs	r0, #0
 8006abe:	6023      	str	r3, [r4, #0]
 8006ac0:	b016      	add	sp, #88	; 0x58
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}

08006ac4 <__smakebuf_r>:
 8006ac4:	898b      	ldrh	r3, [r1, #12]
 8006ac6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ac8:	079d      	lsls	r5, r3, #30
 8006aca:	4606      	mov	r6, r0
 8006acc:	460c      	mov	r4, r1
 8006ace:	d507      	bpl.n	8006ae0 <__smakebuf_r+0x1c>
 8006ad0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	6123      	str	r3, [r4, #16]
 8006ad8:	2301      	movs	r3, #1
 8006ada:	6163      	str	r3, [r4, #20]
 8006adc:	b002      	add	sp, #8
 8006ade:	bd70      	pop	{r4, r5, r6, pc}
 8006ae0:	466a      	mov	r2, sp
 8006ae2:	ab01      	add	r3, sp, #4
 8006ae4:	f7ff ffca 	bl	8006a7c <__swhatbuf_r>
 8006ae8:	9900      	ldr	r1, [sp, #0]
 8006aea:	4605      	mov	r5, r0
 8006aec:	4630      	mov	r0, r6
 8006aee:	f7ff f989 	bl	8005e04 <_malloc_r>
 8006af2:	b948      	cbnz	r0, 8006b08 <__smakebuf_r+0x44>
 8006af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006af8:	059a      	lsls	r2, r3, #22
 8006afa:	d4ef      	bmi.n	8006adc <__smakebuf_r+0x18>
 8006afc:	f023 0303 	bic.w	r3, r3, #3
 8006b00:	f043 0302 	orr.w	r3, r3, #2
 8006b04:	81a3      	strh	r3, [r4, #12]
 8006b06:	e7e3      	b.n	8006ad0 <__smakebuf_r+0xc>
 8006b08:	4b0d      	ldr	r3, [pc, #52]	; (8006b40 <__smakebuf_r+0x7c>)
 8006b0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b0c:	89a3      	ldrh	r3, [r4, #12]
 8006b0e:	6020      	str	r0, [r4, #0]
 8006b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	9b00      	ldr	r3, [sp, #0]
 8006b18:	6120      	str	r0, [r4, #16]
 8006b1a:	6163      	str	r3, [r4, #20]
 8006b1c:	9b01      	ldr	r3, [sp, #4]
 8006b1e:	b15b      	cbz	r3, 8006b38 <__smakebuf_r+0x74>
 8006b20:	4630      	mov	r0, r6
 8006b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b26:	f000 f8d1 	bl	8006ccc <_isatty_r>
 8006b2a:	b128      	cbz	r0, 8006b38 <__smakebuf_r+0x74>
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	f023 0303 	bic.w	r3, r3, #3
 8006b32:	f043 0301 	orr.w	r3, r3, #1
 8006b36:	81a3      	strh	r3, [r4, #12]
 8006b38:	89a0      	ldrh	r0, [r4, #12]
 8006b3a:	4305      	orrs	r5, r0
 8006b3c:	81a5      	strh	r5, [r4, #12]
 8006b3e:	e7cd      	b.n	8006adc <__smakebuf_r+0x18>
 8006b40:	080068d5 	.word	0x080068d5

08006b44 <_malloc_usable_size_r>:
 8006b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b48:	1f18      	subs	r0, r3, #4
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	bfbc      	itt	lt
 8006b4e:	580b      	ldrlt	r3, [r1, r0]
 8006b50:	18c0      	addlt	r0, r0, r3
 8006b52:	4770      	bx	lr

08006b54 <_raise_r>:
 8006b54:	291f      	cmp	r1, #31
 8006b56:	b538      	push	{r3, r4, r5, lr}
 8006b58:	4604      	mov	r4, r0
 8006b5a:	460d      	mov	r5, r1
 8006b5c:	d904      	bls.n	8006b68 <_raise_r+0x14>
 8006b5e:	2316      	movs	r3, #22
 8006b60:	6003      	str	r3, [r0, #0]
 8006b62:	f04f 30ff 	mov.w	r0, #4294967295
 8006b66:	bd38      	pop	{r3, r4, r5, pc}
 8006b68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b6a:	b112      	cbz	r2, 8006b72 <_raise_r+0x1e>
 8006b6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b70:	b94b      	cbnz	r3, 8006b86 <_raise_r+0x32>
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 f830 	bl	8006bd8 <_getpid_r>
 8006b78:	462a      	mov	r2, r5
 8006b7a:	4601      	mov	r1, r0
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b82:	f000 b817 	b.w	8006bb4 <_kill_r>
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d00a      	beq.n	8006ba0 <_raise_r+0x4c>
 8006b8a:	1c59      	adds	r1, r3, #1
 8006b8c:	d103      	bne.n	8006b96 <_raise_r+0x42>
 8006b8e:	2316      	movs	r3, #22
 8006b90:	6003      	str	r3, [r0, #0]
 8006b92:	2001      	movs	r0, #1
 8006b94:	e7e7      	b.n	8006b66 <_raise_r+0x12>
 8006b96:	2400      	movs	r4, #0
 8006b98:	4628      	mov	r0, r5
 8006b9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b9e:	4798      	blx	r3
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	e7e0      	b.n	8006b66 <_raise_r+0x12>

08006ba4 <raise>:
 8006ba4:	4b02      	ldr	r3, [pc, #8]	; (8006bb0 <raise+0xc>)
 8006ba6:	4601      	mov	r1, r0
 8006ba8:	6818      	ldr	r0, [r3, #0]
 8006baa:	f7ff bfd3 	b.w	8006b54 <_raise_r>
 8006bae:	bf00      	nop
 8006bb0:	2000000c 	.word	0x2000000c

08006bb4 <_kill_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	4d06      	ldr	r5, [pc, #24]	; (8006bd4 <_kill_r+0x20>)
 8006bba:	4604      	mov	r4, r0
 8006bbc:	4608      	mov	r0, r1
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	602b      	str	r3, [r5, #0]
 8006bc2:	f7fa fe7f 	bl	80018c4 <_kill>
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	d102      	bne.n	8006bd0 <_kill_r+0x1c>
 8006bca:	682b      	ldr	r3, [r5, #0]
 8006bcc:	b103      	cbz	r3, 8006bd0 <_kill_r+0x1c>
 8006bce:	6023      	str	r3, [r4, #0]
 8006bd0:	bd38      	pop	{r3, r4, r5, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000378 	.word	0x20000378

08006bd8 <_getpid_r>:
 8006bd8:	f7fa be6d 	b.w	80018b6 <_getpid>

08006bdc <__sread>:
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	460c      	mov	r4, r1
 8006be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be4:	f000 f894 	bl	8006d10 <_read_r>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	bfab      	itete	ge
 8006bec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bee:	89a3      	ldrhlt	r3, [r4, #12]
 8006bf0:	181b      	addge	r3, r3, r0
 8006bf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bf6:	bfac      	ite	ge
 8006bf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bfa:	81a3      	strhlt	r3, [r4, #12]
 8006bfc:	bd10      	pop	{r4, pc}

08006bfe <__swrite>:
 8006bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c02:	461f      	mov	r7, r3
 8006c04:	898b      	ldrh	r3, [r1, #12]
 8006c06:	4605      	mov	r5, r0
 8006c08:	05db      	lsls	r3, r3, #23
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	4616      	mov	r6, r2
 8006c0e:	d505      	bpl.n	8006c1c <__swrite+0x1e>
 8006c10:	2302      	movs	r3, #2
 8006c12:	2200      	movs	r2, #0
 8006c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c18:	f000 f868 	bl	8006cec <_lseek_r>
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	4632      	mov	r2, r6
 8006c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c24:	81a3      	strh	r3, [r4, #12]
 8006c26:	4628      	mov	r0, r5
 8006c28:	463b      	mov	r3, r7
 8006c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c32:	f000 b817 	b.w	8006c64 <_write_r>

08006c36 <__sseek>:
 8006c36:	b510      	push	{r4, lr}
 8006c38:	460c      	mov	r4, r1
 8006c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c3e:	f000 f855 	bl	8006cec <_lseek_r>
 8006c42:	1c43      	adds	r3, r0, #1
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	bf15      	itete	ne
 8006c48:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c52:	81a3      	strheq	r3, [r4, #12]
 8006c54:	bf18      	it	ne
 8006c56:	81a3      	strhne	r3, [r4, #12]
 8006c58:	bd10      	pop	{r4, pc}

08006c5a <__sclose>:
 8006c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c5e:	f000 b813 	b.w	8006c88 <_close_r>
	...

08006c64 <_write_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4604      	mov	r4, r0
 8006c68:	4608      	mov	r0, r1
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	4d05      	ldr	r5, [pc, #20]	; (8006c84 <_write_r+0x20>)
 8006c70:	602a      	str	r2, [r5, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f7fa fe5d 	bl	8001932 <_write>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d102      	bne.n	8006c82 <_write_r+0x1e>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	b103      	cbz	r3, 8006c82 <_write_r+0x1e>
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	bd38      	pop	{r3, r4, r5, pc}
 8006c84:	20000378 	.word	0x20000378

08006c88 <_close_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	4d05      	ldr	r5, [pc, #20]	; (8006ca4 <_close_r+0x1c>)
 8006c8e:	4604      	mov	r4, r0
 8006c90:	4608      	mov	r0, r1
 8006c92:	602b      	str	r3, [r5, #0]
 8006c94:	f7fa fe69 	bl	800196a <_close>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	d102      	bne.n	8006ca2 <_close_r+0x1a>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	b103      	cbz	r3, 8006ca2 <_close_r+0x1a>
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	20000378 	.word	0x20000378

08006ca8 <_fstat_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	2300      	movs	r3, #0
 8006cac:	4d06      	ldr	r5, [pc, #24]	; (8006cc8 <_fstat_r+0x20>)
 8006cae:	4604      	mov	r4, r0
 8006cb0:	4608      	mov	r0, r1
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	602b      	str	r3, [r5, #0]
 8006cb6:	f7fa fe63 	bl	8001980 <_fstat>
 8006cba:	1c43      	adds	r3, r0, #1
 8006cbc:	d102      	bne.n	8006cc4 <_fstat_r+0x1c>
 8006cbe:	682b      	ldr	r3, [r5, #0]
 8006cc0:	b103      	cbz	r3, 8006cc4 <_fstat_r+0x1c>
 8006cc2:	6023      	str	r3, [r4, #0]
 8006cc4:	bd38      	pop	{r3, r4, r5, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20000378 	.word	0x20000378

08006ccc <_isatty_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	2300      	movs	r3, #0
 8006cd0:	4d05      	ldr	r5, [pc, #20]	; (8006ce8 <_isatty_r+0x1c>)
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	4608      	mov	r0, r1
 8006cd6:	602b      	str	r3, [r5, #0]
 8006cd8:	f7fa fe61 	bl	800199e <_isatty>
 8006cdc:	1c43      	adds	r3, r0, #1
 8006cde:	d102      	bne.n	8006ce6 <_isatty_r+0x1a>
 8006ce0:	682b      	ldr	r3, [r5, #0]
 8006ce2:	b103      	cbz	r3, 8006ce6 <_isatty_r+0x1a>
 8006ce4:	6023      	str	r3, [r4, #0]
 8006ce6:	bd38      	pop	{r3, r4, r5, pc}
 8006ce8:	20000378 	.word	0x20000378

08006cec <_lseek_r>:
 8006cec:	b538      	push	{r3, r4, r5, lr}
 8006cee:	4604      	mov	r4, r0
 8006cf0:	4608      	mov	r0, r1
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	4d05      	ldr	r5, [pc, #20]	; (8006d0c <_lseek_r+0x20>)
 8006cf8:	602a      	str	r2, [r5, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f7fa fe59 	bl	80019b2 <_lseek>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_lseek_r+0x1e>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_lseek_r+0x1e>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	20000378 	.word	0x20000378

08006d10 <_read_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4604      	mov	r4, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	4611      	mov	r1, r2
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4d05      	ldr	r5, [pc, #20]	; (8006d30 <_read_r+0x20>)
 8006d1c:	602a      	str	r2, [r5, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f7fa fdea 	bl	80018f8 <_read>
 8006d24:	1c43      	adds	r3, r0, #1
 8006d26:	d102      	bne.n	8006d2e <_read_r+0x1e>
 8006d28:	682b      	ldr	r3, [r5, #0]
 8006d2a:	b103      	cbz	r3, 8006d2e <_read_r+0x1e>
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	bd38      	pop	{r3, r4, r5, pc}
 8006d30:	20000378 	.word	0x20000378

08006d34 <_init>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	bf00      	nop
 8006d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3a:	bc08      	pop	{r3}
 8006d3c:	469e      	mov	lr, r3
 8006d3e:	4770      	bx	lr

08006d40 <_fini>:
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	bf00      	nop
 8006d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d46:	bc08      	pop	{r3}
 8006d48:	469e      	mov	lr, r3
 8006d4a:	4770      	bx	lr
