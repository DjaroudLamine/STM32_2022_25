
LUM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fdc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b8  080041b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041c0  080041c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041c0  080041c0  000141c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041c4  080041c4  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000070  08004238  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08004238  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c83a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020de  00000000  00000000  0002c8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002e9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002f448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016900  00000000  00000000  0002fe18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddc5  00000000  00000000  00046718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8b7  00000000  00000000  000544dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1d94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e54  00000000  00000000  000e1de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08004100 	.word	0x08004100

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08004100 	.word	0x08004100

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800019c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a0:	f000 b96e 	b.w	8000480 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	f040 8083 	bne.w	80002d4 <__udivmoddi4+0x118>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4617      	mov	r7, r2
 80001d2:	d947      	bls.n	8000264 <__udivmoddi4+0xa8>
 80001d4:	fab2 f382 	clz	r3, r2
 80001d8:	b14b      	cbz	r3, 80001ee <__udivmoddi4+0x32>
 80001da:	f1c3 0120 	rsb	r1, r3, #32
 80001de:	fa05 fe03 	lsl.w	lr, r5, r3
 80001e2:	fa20 f101 	lsr.w	r1, r0, r1
 80001e6:	409f      	lsls	r7, r3
 80001e8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001ec:	409c      	lsls	r4, r3
 80001ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001f2:	fbbe fcf8 	udiv	ip, lr, r8
 80001f6:	fa1f f987 	uxth.w	r9, r7
 80001fa:	fb08 e21c 	mls	r2, r8, ip, lr
 80001fe:	fb0c f009 	mul.w	r0, ip, r9
 8000202:	0c21      	lsrs	r1, r4, #16
 8000204:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000208:	4290      	cmp	r0, r2
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	18ba      	adds	r2, r7, r2
 800020e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000212:	f080 8118 	bcs.w	8000446 <__udivmoddi4+0x28a>
 8000216:	4290      	cmp	r0, r2
 8000218:	f240 8115 	bls.w	8000446 <__udivmoddi4+0x28a>
 800021c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000220:	443a      	add	r2, r7
 8000222:	1a12      	subs	r2, r2, r0
 8000224:	fbb2 f0f8 	udiv	r0, r2, r8
 8000228:	fb08 2210 	mls	r2, r8, r0, r2
 800022c:	fb00 f109 	mul.w	r1, r0, r9
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000236:	42a1      	cmp	r1, r4
 8000238:	d909      	bls.n	800024e <__udivmoddi4+0x92>
 800023a:	193c      	adds	r4, r7, r4
 800023c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000240:	f080 8103 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000244:	42a1      	cmp	r1, r4
 8000246:	f240 8100 	bls.w	800044a <__udivmoddi4+0x28e>
 800024a:	3802      	subs	r0, #2
 800024c:	443c      	add	r4, r7
 800024e:	1a64      	subs	r4, r4, r1
 8000250:	2100      	movs	r1, #0
 8000252:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa4>
 8000258:	2200      	movs	r2, #0
 800025a:	40dc      	lsrs	r4, r3
 800025c:	e9c6 4200 	strd	r4, r2, [r6]
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	b902      	cbnz	r2, 8000268 <__udivmoddi4+0xac>
 8000266:	deff      	udf	#255	; 0xff
 8000268:	fab2 f382 	clz	r3, r2
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14f      	bne.n	8000310 <__udivmoddi4+0x154>
 8000270:	1a8d      	subs	r5, r1, r2
 8000272:	2101      	movs	r1, #1
 8000274:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000278:	fa1f f882 	uxth.w	r8, r2
 800027c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000280:	fb0e 551c 	mls	r5, lr, ip, r5
 8000284:	fb08 f00c 	mul.w	r0, r8, ip
 8000288:	0c22      	lsrs	r2, r4, #16
 800028a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800028e:	42a8      	cmp	r0, r5
 8000290:	d907      	bls.n	80002a2 <__udivmoddi4+0xe6>
 8000292:	197d      	adds	r5, r7, r5
 8000294:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000298:	d202      	bcs.n	80002a0 <__udivmoddi4+0xe4>
 800029a:	42a8      	cmp	r0, r5
 800029c:	f200 80e9 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 80002a0:	4694      	mov	ip, r2
 80002a2:	1a2d      	subs	r5, r5, r0
 80002a4:	fbb5 f0fe 	udiv	r0, r5, lr
 80002a8:	fb0e 5510 	mls	r5, lr, r0, r5
 80002ac:	fb08 f800 	mul.w	r8, r8, r0
 80002b0:	b2a4      	uxth	r4, r4
 80002b2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b6:	45a0      	cmp	r8, r4
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x10e>
 80002ba:	193c      	adds	r4, r7, r4
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x10c>
 80002c2:	45a0      	cmp	r8, r4
 80002c4:	f200 80d9 	bhi.w	800047a <__udivmoddi4+0x2be>
 80002c8:	4610      	mov	r0, r2
 80002ca:	eba4 0408 	sub.w	r4, r4, r8
 80002ce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d2:	e7c0      	b.n	8000256 <__udivmoddi4+0x9a>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x12e>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	f000 80b1 	beq.w	8000440 <__udivmoddi4+0x284>
 80002de:	2100      	movs	r1, #0
 80002e0:	e9c6 0500 	strd	r0, r5, [r6]
 80002e4:	4608      	mov	r0, r1
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d14b      	bne.n	800038a <__udivmoddi4+0x1ce>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0x140>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80b9 	bhi.w	800046e <__udivmoddi4+0x2b2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0303 	sbc.w	r3, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	469e      	mov	lr, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0aa      	beq.n	8000260 <__udivmoddi4+0xa4>
 800030a:	e9c6 4e00 	strd	r4, lr, [r6]
 800030e:	e7a7      	b.n	8000260 <__udivmoddi4+0xa4>
 8000310:	409f      	lsls	r7, r3
 8000312:	f1c3 0220 	rsb	r2, r3, #32
 8000316:	40d1      	lsrs	r1, r2
 8000318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	fa24 f202 	lsr.w	r2, r4, r2
 800032c:	409d      	lsls	r5, r3
 800032e:	fb00 fc08 	mul.w	ip, r0, r8
 8000332:	432a      	orrs	r2, r5
 8000334:	0c15      	lsrs	r5, r2, #16
 8000336:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800033a:	45ac      	cmp	ip, r5
 800033c:	fa04 f403 	lsl.w	r4, r4, r3
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0x19a>
 8000342:	197d      	adds	r5, r7, r5
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000348:	f080 808f 	bcs.w	800046a <__udivmoddi4+0x2ae>
 800034c:	45ac      	cmp	ip, r5
 800034e:	f240 808c 	bls.w	800046a <__udivmoddi4+0x2ae>
 8000352:	3802      	subs	r0, #2
 8000354:	443d      	add	r5, r7
 8000356:	eba5 050c 	sub.w	r5, r5, ip
 800035a:	fbb5 f1fe 	udiv	r1, r5, lr
 800035e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000362:	fb01 f908 	mul.w	r9, r1, r8
 8000366:	b295      	uxth	r5, r2
 8000368:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036c:	45a9      	cmp	r9, r5
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x1c4>
 8000370:	197d      	adds	r5, r7, r5
 8000372:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000376:	d274      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000378:	45a9      	cmp	r9, r5
 800037a:	d972      	bls.n	8000462 <__udivmoddi4+0x2a6>
 800037c:	3902      	subs	r1, #2
 800037e:	443d      	add	r5, r7
 8000380:	eba5 0509 	sub.w	r5, r5, r9
 8000384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000388:	e778      	b.n	800027c <__udivmoddi4+0xc0>
 800038a:	f1c1 0720 	rsb	r7, r1, #32
 800038e:	408b      	lsls	r3, r1
 8000390:	fa22 fc07 	lsr.w	ip, r2, r7
 8000394:	ea4c 0c03 	orr.w	ip, ip, r3
 8000398:	fa25 f407 	lsr.w	r4, r5, r7
 800039c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a0:	fbb4 f9fe 	udiv	r9, r4, lr
 80003a4:	fa1f f88c 	uxth.w	r8, ip
 80003a8:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ac:	fa20 f307 	lsr.w	r3, r0, r7
 80003b0:	fb09 fa08 	mul.w	sl, r9, r8
 80003b4:	408d      	lsls	r5, r1
 80003b6:	431d      	orrs	r5, r3
 80003b8:	0c2b      	lsrs	r3, r5, #16
 80003ba:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003be:	45a2      	cmp	sl, r4
 80003c0:	fa02 f201 	lsl.w	r2, r2, r1
 80003c4:	fa00 f301 	lsl.w	r3, r0, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x222>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d2:	d248      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d946      	bls.n	8000466 <__udivmoddi4+0x2aa>
 80003d8:	f1a9 0902 	sub.w	r9, r9, #2
 80003dc:	4464      	add	r4, ip
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003e6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003ea:	fb00 fa08 	mul.w	sl, r0, r8
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x24e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000400:	d22d      	bcs.n	800045e <__udivmoddi4+0x2a2>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d92b      	bls.n	800045e <__udivmoddi4+0x2a2>
 8000406:	3802      	subs	r0, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c6      	mov	lr, r8
 800041a:	464d      	mov	r5, r9
 800041c:	d319      	bcc.n	8000452 <__udivmoddi4+0x296>
 800041e:	d016      	beq.n	800044e <__udivmoddi4+0x292>
 8000420:	b15e      	cbz	r6, 800043a <__udivmoddi4+0x27e>
 8000422:	ebb3 020e 	subs.w	r2, r3, lr
 8000426:	eb64 0405 	sbc.w	r4, r4, r5
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	fa22 f301 	lsr.w	r3, r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	40cc      	lsrs	r4, r1
 8000436:	e9c6 7400 	strd	r7, r4, [r6]
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	4631      	mov	r1, r6
 8000442:	4630      	mov	r0, r6
 8000444:	e70c      	b.n	8000260 <__udivmoddi4+0xa4>
 8000446:	468c      	mov	ip, r1
 8000448:	e6eb      	b.n	8000222 <__udivmoddi4+0x66>
 800044a:	4610      	mov	r0, r2
 800044c:	e6ff      	b.n	800024e <__udivmoddi4+0x92>
 800044e:	4543      	cmp	r3, r8
 8000450:	d2e6      	bcs.n	8000420 <__udivmoddi4+0x264>
 8000452:	ebb8 0e02 	subs.w	lr, r8, r2
 8000456:	eb69 050c 	sbc.w	r5, r9, ip
 800045a:	3801      	subs	r0, #1
 800045c:	e7e0      	b.n	8000420 <__udivmoddi4+0x264>
 800045e:	4628      	mov	r0, r5
 8000460:	e7d3      	b.n	800040a <__udivmoddi4+0x24e>
 8000462:	4611      	mov	r1, r2
 8000464:	e78c      	b.n	8000380 <__udivmoddi4+0x1c4>
 8000466:	4681      	mov	r9, r0
 8000468:	e7b9      	b.n	80003de <__udivmoddi4+0x222>
 800046a:	4608      	mov	r0, r1
 800046c:	e773      	b.n	8000356 <__udivmoddi4+0x19a>
 800046e:	4608      	mov	r0, r1
 8000470:	e749      	b.n	8000306 <__udivmoddi4+0x14a>
 8000472:	f1ac 0c02 	sub.w	ip, ip, #2
 8000476:	443d      	add	r5, r7
 8000478:	e713      	b.n	80002a2 <__udivmoddi4+0xe6>
 800047a:	3802      	subs	r0, #2
 800047c:	443c      	add	r4, r7
 800047e:	e724      	b.n	80002ca <__udivmoddi4+0x10e>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000494:	4b25      	ldr	r3, [pc, #148]	; (800052c <MX_ADC_Init+0xa8>)
 8000496:	4a26      	ldr	r2, [pc, #152]	; (8000530 <MX_ADC_Init+0xac>)
 8000498:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800049a:	4b24      	ldr	r3, [pc, #144]	; (800052c <MX_ADC_Init+0xa8>)
 800049c:	2200      	movs	r2, #0
 800049e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004a0:	4b22      	ldr	r3, [pc, #136]	; (800052c <MX_ADC_Init+0xa8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004a6:	4b21      	ldr	r3, [pc, #132]	; (800052c <MX_ADC_Init+0xa8>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ac:	4b1f      	ldr	r3, [pc, #124]	; (800052c <MX_ADC_Init+0xa8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004b2:	4b1e      	ldr	r3, [pc, #120]	; (800052c <MX_ADC_Init+0xa8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <MX_ADC_Init+0xa8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_ADC_Init+0xa8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80004c4:	4b19      	ldr	r3, [pc, #100]	; (800052c <MX_ADC_Init+0xa8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004ca:	4b18      	ldr	r3, [pc, #96]	; (800052c <MX_ADC_Init+0xa8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <MX_ADC_Init+0xa8>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_ADC_Init+0xa8>)
 80004da:	2200      	movs	r2, #0
 80004dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_ADC_Init+0xa8>)
 80004e2:	2210      	movs	r2, #16
 80004e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_ADC_Init+0xa8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_ADC_Init+0xa8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <MX_ADC_Init+0xa8>)
 80004f6:	f000 fd9f 	bl	8001038 <HAL_ADC_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000500:	f000 fbdc 	bl	8000cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000504:	2300      	movs	r3, #0
 8000506:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000508:	2301      	movs	r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	4619      	mov	r1, r3
 8000514:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_ADC_Init+0xa8>)
 8000516:	f000 ffd1 	bl	80014bc <HAL_ADC_ConfigChannel>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000520:	f000 fbcc 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	2000009c 	.word	0x2000009c
 8000530:	40012400 	.word	0x40012400

08000534 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08a      	sub	sp, #40	; 0x28
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a15      	ldr	r2, [pc, #84]	; (80005a8 <HAL_ADC_MspInit+0x74>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d123      	bne.n	800059e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <HAL_ADC_MspInit+0x78>)
 8000558:	6a1b      	ldr	r3, [r3, #32]
 800055a:	4a14      	ldr	r2, [pc, #80]	; (80005ac <HAL_ADC_MspInit+0x78>)
 800055c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000560:	6213      	str	r3, [r2, #32]
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_ADC_MspInit+0x78>)
 8000564:	6a1b      	ldr	r3, [r3, #32]
 8000566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <HAL_ADC_MspInit+0x78>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <HAL_ADC_MspInit+0x78>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <HAL_ADC_MspInit+0x78>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000586:	2301      	movs	r3, #1
 8000588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800058a:	2303      	movs	r3, #3
 800058c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <HAL_ADC_MspInit+0x7c>)
 800059a:	f001 fa3b 	bl	8001a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	; 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40012400 	.word	0x40012400
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020000 	.word	0x40020000

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b38      	ldr	r3, [pc, #224]	; (80006ac <MX_GPIO_Init+0xf8>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a37      	ldr	r2, [pc, #220]	; (80006ac <MX_GPIO_Init+0xf8>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b35      	ldr	r3, [pc, #212]	; (80006ac <MX_GPIO_Init+0xf8>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	4b32      	ldr	r3, [pc, #200]	; (80006ac <MX_GPIO_Init+0xf8>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a31      	ldr	r2, [pc, #196]	; (80006ac <MX_GPIO_Init+0xf8>)
 80005e8:	f043 0320 	orr.w	r3, r3, #32
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b2f      	ldr	r3, [pc, #188]	; (80006ac <MX_GPIO_Init+0xf8>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 0320 	and.w	r3, r3, #32
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <MX_GPIO_Init+0xf8>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a2b      	ldr	r2, [pc, #172]	; (80006ac <MX_GPIO_Init+0xf8>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <MX_GPIO_Init+0xf8>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b26      	ldr	r3, [pc, #152]	; (80006ac <MX_GPIO_Init+0xf8>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a25      	ldr	r2, [pc, #148]	; (80006ac <MX_GPIO_Init+0xf8>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_GPIO_Init+0xf8>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_ROUGE_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000630:	481f      	ldr	r0, [pc, #124]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000632:	f001 fb96 	bl	8001d62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800063c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	4819      	ldr	r0, [pc, #100]	; (80006b4 <MX_GPIO_Init+0x100>)
 800064e:	f001 f9e1 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000652:	2320      	movs	r3, #32
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	4811      	ldr	r0, [pc, #68]	; (80006b0 <MX_GPIO_Init+0xfc>)
 800066a:	f001 f9d3 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin;
 800066e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_ROUGE_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	480a      	ldr	r0, [pc, #40]	; (80006b0 <MX_GPIO_Init+0xfc>)
 8000688:	f001 f9c4 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800068c:	2320      	movs	r3, #32
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <MX_GPIO_Init+0x104>)
 80006a0:	f001 f9b8 	bl	8001a14 <HAL_GPIO_Init>

}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	; 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40020000 	.word	0x40020000
 80006b4:	40020800 	.word	0x40020800
 80006b8:	40020400 	.word	0x40020400

080006bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C1_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_I2C1_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_I2C1_Init+0x50>)
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_I2C1_Init+0x58>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_I2C1_Init+0x50>)
 80006da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_I2C1_Init+0x50>)
 80006fa:	f001 fb4b 	bl	8001d94 <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 fada 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000f0 	.word	0x200000f0
 8000710:	40005400 	.word	0x40005400
 8000714:	000186a0 	.word	0x000186a0

08000718 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <HAL_I2C_MspInit+0x7c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d128      	bne.n	800078c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <HAL_I2C_MspInit+0x80>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <HAL_I2C_MspInit+0x80>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_I2C_MspInit+0x80>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000752:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000758:	2312      	movs	r3, #18
 800075a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000764:	2304      	movs	r3, #4
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	480b      	ldr	r0, [pc, #44]	; (800079c <HAL_I2C_MspInit+0x84>)
 8000770:	f001 f950 	bl	8001a14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_I2C_MspInit+0x80>)
 8000776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_I2C_MspInit+0x80>)
 800077a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800077e:	6253      	str	r3, [r2, #36]	; 0x24
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_I2C_MspInit+0x80>)
 8000782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40005400 	.word	0x40005400
 8000798:	40023800 	.word	0x40023800
 800079c:	40020400 	.word	0x40020400

080007a0 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	f043 030c 	orr.w	r3, r3, #12
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	f043 0320 	orr.w	r3, r3, #32
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80007cc:	f107 0118 	add.w	r1, r7, #24
 80007d0:	230a      	movs	r3, #10
 80007d2:	2202      	movs	r2, #2
 80007d4:	486c      	ldr	r0, [pc, #432]	; (8000988 <lcd_init+0x1e8>)
 80007d6:	f002 fe66 	bl	80034a6 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80007da:	f640 230d 	movw	r3, #2573	; 0xa0d
 80007de:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80007e0:	f107 0114 	add.w	r1, r7, #20
 80007e4:	230a      	movs	r3, #10
 80007e6:	2202      	movs	r2, #2
 80007e8:	4867      	ldr	r0, [pc, #412]	; (8000988 <lcd_init+0x1e8>)
 80007ea:	f002 fe5c 	bl	80034a6 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80007ee:	2364      	movs	r3, #100	; 0x64
 80007f0:	2205      	movs	r2, #5
 80007f2:	217c      	movs	r1, #124	; 0x7c
 80007f4:	69f8      	ldr	r0, [r7, #28]
 80007f6:	f001 fd0f 	bl	8002218 <HAL_I2C_IsDeviceReady>
 80007fa:	4603      	mov	r3, r0
 80007fc:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80007fe:	f107 0113 	add.w	r1, r7, #19
 8000802:	230a      	movs	r3, #10
 8000804:	2201      	movs	r2, #1
 8000806:	4860      	ldr	r0, [pc, #384]	; (8000988 <lcd_init+0x1e8>)
 8000808:	f002 fe4d 	bl	80034a6 <HAL_UART_Transmit>
	HAL_Delay(50);
 800080c:	2032      	movs	r0, #50	; 0x32
 800080e:	f000 fbf1 	bl	8000ff4 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8000812:	f107 0218 	add.w	r2, r7, #24
 8000816:	f241 3388 	movw	r3, #5000	; 0x1388
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2302      	movs	r3, #2
 800081e:	217c      	movs	r1, #124	; 0x7c
 8000820:	69f8      	ldr	r0, [r7, #28]
 8000822:	f001 fbfb 	bl	800201c <HAL_I2C_Master_Transmit>
 8000826:	4603      	mov	r3, r0
 8000828:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 800082a:	f107 0112 	add.w	r1, r7, #18
 800082e:	230a      	movs	r3, #10
 8000830:	2201      	movs	r2, #1
 8000832:	4855      	ldr	r0, [pc, #340]	; (8000988 <lcd_init+0x1e8>)
 8000834:	f002 fe37 	bl	80034a6 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000838:	2032      	movs	r0, #50	; 0x32
 800083a:	f000 fbdb 	bl	8000ff4 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800083e:	f107 0218 	add.w	r2, r7, #24
 8000842:	f241 3388 	movw	r3, #5000	; 0x1388
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2302      	movs	r3, #2
 800084a:	217c      	movs	r1, #124	; 0x7c
 800084c:	69f8      	ldr	r0, [r7, #28]
 800084e:	f001 fbe5 	bl	800201c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000852:	2005      	movs	r0, #5
 8000854:	f000 fbce 	bl	8000ff4 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000858:	f107 0218 	add.w	r2, r7, #24
 800085c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2302      	movs	r3, #2
 8000864:	217c      	movs	r1, #124	; 0x7c
 8000866:	69f8      	ldr	r0, [r7, #28]
 8000868:	f001 fbd8 	bl	800201c <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	2204      	movs	r2, #4
 8000870:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	785b      	ldrb	r3, [r3, #1]
 8000876:	f043 0308 	orr.w	r3, r3, #8
 800087a:	b2db      	uxtb	r3, r3
 800087c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800087e:	f107 0218 	add.w	r2, r7, #24
 8000882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2302      	movs	r3, #2
 800088a:	217c      	movs	r1, #124	; 0x7c
 800088c:	69f8      	ldr	r0, [r7, #28]
 800088e:	f001 fbc5 	bl	800201c <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8000892:	2301      	movs	r3, #1
 8000894:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000896:	f107 0218 	add.w	r2, r7, #24
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2302      	movs	r3, #2
 80008a2:	217c      	movs	r1, #124	; 0x7c
 80008a4:	69f8      	ldr	r0, [r7, #28]
 80008a6:	f001 fbb9 	bl	800201c <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80008aa:	2002      	movs	r0, #2
 80008ac:	f000 fba2 	bl	8000ff4 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	2202      	movs	r2, #2
 80008b4:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	789b      	ldrb	r3, [r3, #2]
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80008c2:	f107 0218 	add.w	r2, r7, #24
 80008c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2302      	movs	r3, #2
 80008ce:	217c      	movs	r1, #124	; 0x7c
 80008d0:	69f8      	ldr	r0, [r7, #28]
 80008d2:	f001 fba3 	bl	800201c <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008de:	f107 0210 	add.w	r2, r7, #16
 80008e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2302      	movs	r3, #2
 80008ea:	21c4      	movs	r1, #196	; 0xc4
 80008ec:	69f8      	ldr	r0, [r7, #28]
 80008ee:	f001 fb95 	bl	800201c <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80008f2:	2308      	movs	r3, #8
 80008f4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80008f6:	23ff      	movs	r3, #255	; 0xff
 80008f8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008fa:	f107 0210 	add.w	r2, r7, #16
 80008fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2302      	movs	r3, #2
 8000906:	21c4      	movs	r1, #196	; 0xc4
 8000908:	69f8      	ldr	r0, [r7, #28]
 800090a:	f001 fb87 	bl	800201c <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 800090e:	2301      	movs	r3, #1
 8000910:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8000912:	2320      	movs	r3, #32
 8000914:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000916:	f107 0210 	add.w	r2, r7, #16
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2302      	movs	r3, #2
 8000922:	21c4      	movs	r1, #196	; 0xc4
 8000924:	69f8      	ldr	r0, [r7, #28]
 8000926:	f001 fb79 	bl	800201c <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 800092a:	2304      	movs	r3, #4
 800092c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800092e:	23ff      	movs	r3, #255	; 0xff
 8000930:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000932:	f107 020c 	add.w	r2, r7, #12
 8000936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2302      	movs	r3, #2
 800093e:	21c4      	movs	r1, #196	; 0xc4
 8000940:	69f8      	ldr	r0, [r7, #28]
 8000942:	f001 fb6b 	bl	800201c <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8000946:	2303      	movs	r3, #3
 8000948:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800094a:	23ff      	movs	r3, #255	; 0xff
 800094c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800094e:	f107 020c 	add.w	r2, r7, #12
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2302      	movs	r3, #2
 800095a:	21c4      	movs	r1, #196	; 0xc4
 800095c:	69f8      	ldr	r0, [r7, #28]
 800095e:	f001 fb5d 	bl	800201c <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8000962:	2302      	movs	r3, #2
 8000964:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000966:	23ff      	movs	r3, #255	; 0xff
 8000968:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800096a:	f107 020c 	add.w	r2, r7, #12
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2302      	movs	r3, #2
 8000976:	21c4      	movs	r1, #196	; 0xc4
 8000978:	69f8      	ldr	r0, [r7, #28]
 800097a:	f001 fb4f 	bl	800201c <HAL_I2C_Master_Transmit>


}
 800097e:	bf00      	nop
 8000980:	3720      	adds	r7, #32
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000150 	.word	0x20000150

0800098c <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af02      	add	r7, sp, #8
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 800099a:	2340      	movs	r3, #64	; 0x40
 800099c:	733b      	strb	r3, [r7, #12]
    int i=0;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80009a2:	e011      	b.n	80009c8 <lcd_print+0x3c>
    {
            data[1] = str[i];
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80009ae:	f107 020c 	add.w	r2, r7, #12
 80009b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2302      	movs	r3, #2
 80009ba:	217c      	movs	r1, #124	; 0x7c
 80009bc:	6938      	ldr	r0, [r7, #16]
 80009be:	f001 fb2d 	bl	800201c <HAL_I2C_Master_Transmit>
            i++;
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	683a      	ldr	r2, [r7, #0]
 80009cc:	4413      	add	r3, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1e7      	bne.n	80009a4 <lcd_print+0x18>
   }
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af02      	add	r7, sp, #8
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	460b      	mov	r3, r1
 80009e8:	70fb      	strb	r3, [r7, #3]
 80009ea:	4613      	mov	r3, r2
 80009ec:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 80009f2:	78bb      	ldrb	r3, [r7, #2]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d104      	bne.n	8000a02 <lcd_position+0x24>
    {
        col = col | 0x80;
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009fe:	70fb      	strb	r3, [r7, #3]
 8000a00:	e003      	b.n	8000a0a <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000a08:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8000a0e:	78fb      	ldrb	r3, [r7, #3]
 8000a10:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000a12:	f107 0208 	add.w	r2, r7, #8
 8000a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	217c      	movs	r1, #124	; 0x7c
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f001 fafb 	bl	800201c <HAL_I2C_Master_Transmit>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	71bb      	strb	r3, [r7, #6]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <reglagecouleur+0x74>)
 8000a44:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 8000a46:	2304      	movs	r3, #4
 8000a48:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 8000a4e:	f107 0210 	add.w	r2, r7, #16
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	2302      	movs	r3, #2
 8000a5a:	21c4      	movs	r1, #196	; 0xc4
 8000a5c:	6978      	ldr	r0, [r7, #20]
 8000a5e:	f001 fadd 	bl	800201c <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 8000a62:	2303      	movs	r3, #3
 8000a64:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 8000a66:	79bb      	ldrb	r3, [r7, #6]
 8000a68:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2302      	movs	r3, #2
 8000a76:	21c4      	movs	r1, #196	; 0xc4
 8000a78:	6978      	ldr	r0, [r7, #20]
 8000a7a:	f001 facf 	bl	800201c <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 8000a82:	797b      	ldrb	r3, [r7, #5]
 8000a84:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 8000a86:	f107 0208 	add.w	r2, r7, #8
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2302      	movs	r3, #2
 8000a92:	21c4      	movs	r1, #196	; 0xc4
 8000a94:	6978      	ldr	r0, [r7, #20]
 8000a96:	f001 fac1 	bl	800201c <HAL_I2C_Master_Transmit>
}
 8000a9a:	bf00      	nop
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000f0 	.word	0x200000f0

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aae:	f000 fa32 	bl	8000f16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab2:	f000 f8b5 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab6:	f7ff fd7d 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000aba:	f000 f999 	bl	8000df0 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000abe:	f7ff fce1 	bl	8000484 <MX_ADC_Init>
  MX_I2C1_Init();
 8000ac2:	f7ff fdfb 	bl	80006bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */




    lcd_init(&hi2c1, &lcdData); // initialise le lcd
 8000ac6:	4949      	ldr	r1, [pc, #292]	; (8000bec <main+0x144>)
 8000ac8:	4849      	ldr	r0, [pc, #292]	; (8000bf0 <main+0x148>)
 8000aca:	f7ff fe69 	bl	80007a0 <lcd_init>
    lcd_position(&hi2c1,0,0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4847      	ldr	r0, [pc, #284]	; (8000bf0 <main+0x148>)
 8000ad4:	f7ff ff83 	bl	80009de <lcd_position>
    lcd_print(&hi2c1,"LUMINOSITE");
 8000ad8:	4946      	ldr	r1, [pc, #280]	; (8000bf4 <main+0x14c>)
 8000ada:	4845      	ldr	r0, [pc, #276]	; (8000bf0 <main+0x148>)
 8000adc:	f7ff ff56 	bl	800098c <lcd_print>
    reglagecouleur(50,50,9);
 8000ae0:	2209      	movs	r2, #9
 8000ae2:	2132      	movs	r1, #50	; 0x32
 8000ae4:	2032      	movs	r0, #50	; 0x32
 8000ae6:	f7ff ffa3 	bl	8000a30 <reglagecouleur>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	      HAL_ADC_Start(&hadc);
 8000aea:	4843      	ldr	r0, [pc, #268]	; (8000bf8 <main+0x150>)
 8000aec:	f000 fbea 	bl	80012c4 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000af4:	4840      	ldr	r0, [pc, #256]	; (8000bf8 <main+0x150>)
 8000af6:	f000 fc45 	bl	8001384 <HAL_ADC_PollForConversion>
	  	  readValue = HAL_ADC_GetValue(&hadc);
 8000afa:	483f      	ldr	r0, [pc, #252]	; (8000bf8 <main+0x150>)
 8000afc:	f000 fcd2 	bl	80014a4 <HAL_ADC_GetValue>
 8000b00:	4603      	mov	r3, r0
 8000b02:	82fb      	strh	r3, [r7, #22]
	  	  sprintf(msg, "%hu\r\n", readValue);
 8000b04:	8afa      	ldrh	r2, [r7, #22]
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	493c      	ldr	r1, [pc, #240]	; (8000bfc <main+0x154>)
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 febd 	bl	800388c <siprintf>
	  	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff fb30 	bl	800017c <strlen>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	f107 010c 	add.w	r1, r7, #12
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b28:	4835      	ldr	r0, [pc, #212]	; (8000c00 <main+0x158>)
 8000b2a:	f002 fcbc 	bl	80034a6 <HAL_UART_Transmit>



	  	 HAL_Delay(500);
 8000b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b32:	f000 fa5f 	bl	8000ff4 <HAL_Delay>
	  	char res [10];

	  	if (readValue>3000)
 8000b36:	8afb      	ldrh	r3, [r7, #22]
 8000b38:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d909      	bls.n	8000b54 <main+0xac>
	  	{
	  		 lcd_position(&hi2c1,2,1);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2102      	movs	r1, #2
 8000b44:	482a      	ldr	r0, [pc, #168]	; (8000bf0 <main+0x148>)
 8000b46:	f7ff ff4a 	bl	80009de <lcd_position>
	  		 lcd_print(&hi2c1," IL FAIT JOUR");
 8000b4a:	492e      	ldr	r1, [pc, #184]	; (8000c04 <main+0x15c>)
 8000b4c:	4828      	ldr	r0, [pc, #160]	; (8000bf0 <main+0x148>)
 8000b4e:	f7ff ff1d 	bl	800098c <lcd_print>
 8000b52:	e008      	b.n	8000b66 <main+0xbe>
	  	}else
	  	    {
	  		   lcd_position(&hi2c1,2,1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2102      	movs	r1, #2
 8000b58:	4825      	ldr	r0, [pc, #148]	; (8000bf0 <main+0x148>)
 8000b5a:	f7ff ff40 	bl	80009de <lcd_position>
	  	       lcd_print(&hi2c1,"IL FAIT NUIT\n");
 8000b5e:	492a      	ldr	r1, [pc, #168]	; (8000c08 <main+0x160>)
 8000b60:	4823      	ldr	r0, [pc, #140]	; (8000bf0 <main+0x148>)
 8000b62:	f7ff ff13 	bl	800098c <lcd_print>




    /* USER CODE END WHILE */
	  	strcpy((char*)buf,"NONE\r\n");
 8000b66:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <main+0x164>)
 8000b68:	4a29      	ldr	r2, [pc, #164]	; (8000c10 <main+0x168>)
 8000b6a:	6810      	ldr	r0, [r2, #0]
 8000b6c:	6018      	str	r0, [r3, #0]
 8000b6e:	8891      	ldrh	r1, [r2, #4]
 8000b70:	7992      	ldrb	r2, [r2, #6]
 8000b72:	8099      	strh	r1, [r3, #4]
 8000b74:	719a      	strb	r2, [r3, #6]

	  		    HAL_UART_Transmit(&huart2,buf,strlen((char*)buf), HAL_MAX_DELAY) ;
 8000b76:	4825      	ldr	r0, [pc, #148]	; (8000c0c <main+0x164>)
 8000b78:	f7ff fb00 	bl	800017c <strlen>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b84:	4921      	ldr	r1, [pc, #132]	; (8000c0c <main+0x164>)
 8000b86:	481e      	ldr	r0, [pc, #120]	; (8000c00 <main+0x158>)
 8000b88:	f002 fc8d 	bl	80034a6 <HAL_UART_Transmit>


	  		  	    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) && readValue<3000) // PIN HIGH
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	4821      	ldr	r0, [pc, #132]	; (8000c14 <main+0x16c>)
 8000b90:	f001 f8d0 	bl	8001d34 <HAL_GPIO_ReadPin>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0a7      	beq.n	8000aea <main+0x42>
 8000b9a:	8afb      	ldrh	r3, [r7, #22]
 8000b9c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d8a2      	bhi.n	8000aea <main+0x42>

	  		  	    {     strcpy((char*)buf, "MOTION\r\n");
 8000ba4:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <main+0x164>)
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <main+0x170>)
 8000ba8:	cb03      	ldmia	r3!, {r0, r1}
 8000baa:	6010      	str	r0, [r2, #0]
 8000bac:	6051      	str	r1, [r2, #4]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	7213      	strb	r3, [r2, #8]

	  		  	    	HAL_UART_Transmit(&huart2,buf,strlen((char*)buf), HAL_MAX_DELAY) ;
 8000bb2:	4816      	ldr	r0, [pc, #88]	; (8000c0c <main+0x164>)
 8000bb4:	f7ff fae2 	bl	800017c <strlen>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bc0:	4912      	ldr	r1, [pc, #72]	; (8000c0c <main+0x164>)
 8000bc2:	480f      	ldr	r0, [pc, #60]	; (8000c00 <main+0x158>)
 8000bc4:	f002 fc6f 	bl	80034a6 <HAL_UART_Transmit>
	  		  	// HAL_GPIO_WritePin (GPIOB, GPIO_PIN_15, 1); // LED ON
	  		  	    	HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_ROUGE_Pin, 1);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000bce:	4813      	ldr	r0, [pc, #76]	; (8000c1c <main+0x174>)
 8000bd0:	f001 f8c7 	bl	8001d62 <HAL_GPIO_WritePin>
	  		  	        HAL_Delay (1000);
 8000bd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd8:	f000 fa0c 	bl	8000ff4 <HAL_Delay>
	  		  	        HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_ROUGE_Pin, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <main+0x174>)
 8000be4:	f001 f8bd 	bl	8001d62 <HAL_GPIO_WritePin>
  {
 8000be8:	e77f      	b.n	8000aea <main+0x42>
 8000bea:	bf00      	nop
 8000bec:	2000008c 	.word	0x2000008c
 8000bf0:	200000f0 	.word	0x200000f0
 8000bf4:	08004118 	.word	0x08004118
 8000bf8:	2000009c 	.word	0x2000009c
 8000bfc:	08004124 	.word	0x08004124
 8000c00:	20000150 	.word	0x20000150
 8000c04:	0800412c 	.word	0x0800412c
 8000c08:	0800413c 	.word	0x0800413c
 8000c0c:	20000144 	.word	0x20000144
 8000c10:	0800414c 	.word	0x0800414c
 8000c14:	40020400 	.word	0x40020400
 8000c18:	08004154 	.word	0x08004154
 8000c1c:	40020000 	.word	0x40020000

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b092      	sub	sp, #72	; 0x48
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2234      	movs	r2, #52	; 0x34
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 fe24 	bl	800387c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <SystemClock_Config+0x98>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000c4a:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <SystemClock_Config+0x98>)
 8000c4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c50:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c52:	2302      	movs	r3, #2
 8000c54:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c56:	2301      	movs	r3, #1
 8000c58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5a:	2310      	movs	r3, #16
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c62:	2300      	movs	r3, #0
 8000c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c66:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000c6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000c70:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fe04 	bl	8002884 <HAL_RCC_OscConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c82:	f000 f81b 	bl	8000cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c86:	230f      	movs	r3, #15
 8000c88:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 f920 	bl	8002ee4 <HAL_RCC_ClockConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000caa:	f000 f807 	bl	8000cbc <Error_Handler>
  }
}
 8000cae:	bf00      	nop
 8000cb0:	3748      	adds	r7, #72	; 0x48
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40007000 	.word	0x40007000

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd2:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cd8:	6253      	str	r3, [r2, #36]	; 0x24
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_MspInit+0x5c>)
 8000ce8:	6a1b      	ldr	r3, [r3, #32]
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6213      	str	r3, [r2, #32]
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_MspInit+0x5c>)
 8000d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_MspInit+0x5c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6253      	str	r3, [r2, #36]	; 0x24
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x5c>)
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d16:	2007      	movs	r0, #7
 8000d18:	f000 fe48 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6e:	f000 f925 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f002 fd3e 	bl	8003828 <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20014000 	.word	0x20014000
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	20000090 	.word	0x20000090
 8000de0:	200001a8 	.word	0x200001a8

08000de4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_USART2_UART_Init+0x4c>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <MX_USART2_UART_Init+0x50>)
 8000df8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MX_USART2_UART_Init+0x4c>)
 8000dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_USART2_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_USART2_UART_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_USART2_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_USART2_UART_Init+0x4c>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_USART2_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_USART2_UART_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_USART2_UART_Init+0x4c>)
 8000e28:	f002 faf0 	bl	800340c <HAL_UART_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e32:	f7ff ff43 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000150 	.word	0x20000150
 8000e40:	40004400 	.word	0x40004400

08000e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0x7c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d127      	bne.n	8000eb6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_UART_MspInit+0x80>)
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <HAL_UART_MspInit+0x80>)
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	6253      	str	r3, [r2, #36]	; 0x24
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_UART_MspInit+0x80>)
 8000e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_UART_MspInit+0x80>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <HAL_UART_MspInit+0x80>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_UART_MspInit+0x80>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e96:	230c      	movs	r3, #12
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_UART_MspInit+0x84>)
 8000eb2:	f000 fdaf 	bl	8001a14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000

08000ecc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ece:	490d      	ldr	r1, [pc, #52]	; (8000f04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee4:	4c0a      	ldr	r4, [pc, #40]	; (8000f10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ef2:	f7ff ff77 	bl	8000de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f002 fc9d 	bl	8003834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000efa:	f7ff fdd5 	bl	8000aa8 <main>
  bx lr
 8000efe:	4770      	bx	lr
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f08:	080041c8 	.word	0x080041c8
  ldr r2, =_sbss
 8000f0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f10:	200001a8 	.word	0x200001a8

08000f14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC1_IRQHandler>

08000f16 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 fd43 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f80e 	bl	8000f48 <HAL_InitTick>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	e001      	b.n	8000f3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f38:	f7ff fec6 	bl	8000cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_InitTick+0x68>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d022      	beq.n	8000fa2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_InitTick+0x6c>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_InitTick+0x68>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f68:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 fd42 	bl	80019fa <HAL_SYSTICK_Config>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10f      	bne.n	8000f9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b0f      	cmp	r3, #15
 8000f80:	d809      	bhi.n	8000f96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f82:	2200      	movs	r2, #0
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f8a:	f000 fd1a 	bl	80019c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_InitTick+0x70>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	e007      	b.n	8000fa6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e004      	b.n	8000fa6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e001      	b.n	8000fa6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000004 	.word	0x20000004

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x1c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <HAL_IncTick+0x1c>)
 8000fcc:	6013      	str	r3, [r2, #0]
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000194 	.word	0x20000194
 8000fdc:	20000008 	.word	0x20000008

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <HAL_GetTick+0x10>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	20000194 	.word	0x20000194

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff fff0 	bl	8000fe0 <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800100c:	d004      	beq.n	8001018 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_Delay+0x40>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	4413      	add	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001018:	bf00      	nop
 800101a:	f7ff ffe1 	bl	8000fe0 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	429a      	cmp	r2, r3
 8001028:	d8f7      	bhi.n	800101a <HAL_Delay+0x26>
  {
  }
}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000008 	.word	0x20000008

08001038 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08e      	sub	sp, #56	; 0x38
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e127      	b.n	80012a8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	2b00      	cmp	r3, #0
 8001064:	d115      	bne.n	8001092 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001074:	4b8e      	ldr	r3, [pc, #568]	; (80012b0 <HAL_ADC_Init+0x278>)
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	4a8d      	ldr	r2, [pc, #564]	; (80012b0 <HAL_ADC_Init+0x278>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6213      	str	r3, [r2, #32]
 8001080:	4b8b      	ldr	r3, [pc, #556]	; (80012b0 <HAL_ADC_Init+0x278>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff fa51 	bl	8000534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	f040 80ff 	bne.w	800129e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a8:	f023 0302 	bic.w	r3, r3, #2
 80010ac:	f043 0202 	orr.w	r2, r3, #2
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80010b4:	4b7f      	ldr	r3, [pc, #508]	; (80012b4 <HAL_ADC_Init+0x27c>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	497c      	ldr	r1, [pc, #496]	; (80012b4 <HAL_ADC_Init+0x27c>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80010ce:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d6:	4619      	mov	r1, r3
 80010d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010dc:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	fa93 f3a3 	rbit	r3, r3
 80010e4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fab3 f383 	clz	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80010f2:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80010f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001100:	4619      	mov	r1, r3
 8001102:	2302      	movs	r3, #2
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	fab3 f383 	clz	r3, r3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800111a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800111c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800111e:	4313      	orrs	r3, r2
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001126:	2b10      	cmp	r3, #16
 8001128:	d007      	beq.n	800113a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001132:	4313      	orrs	r3, r2
 8001134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001136:	4313      	orrs	r3, r2
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001144:	2b40      	cmp	r3, #64	; 0x40
 8001146:	d04f      	beq.n	80011e8 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800114e:	4313      	orrs	r3, r2
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800115a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6912      	ldr	r2, [r2, #16]
 8001160:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001164:	d003      	beq.n	800116e <HAL_ADC_Init+0x136>
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6912      	ldr	r2, [r2, #16]
 800116a:	2a01      	cmp	r2, #1
 800116c:	d102      	bne.n	8001174 <HAL_ADC_Init+0x13c>
 800116e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001172:	e000      	b.n	8001176 <HAL_ADC_Init+0x13e>
 8001174:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001176:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800117a:	4313      	orrs	r3, r2
 800117c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001184:	2b01      	cmp	r3, #1
 8001186:	d125      	bne.n	80011d4 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800118e:	2b00      	cmp	r3, #0
 8001190:	d114      	bne.n	80011bc <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	3b01      	subs	r3, #1
 8001198:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800119c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	fa92 f2a2 	rbit	r2, r2
 80011a4:	617a      	str	r2, [r7, #20]
  return result;
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	fab2 f282 	clz	r2, r2
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	4093      	lsls	r3, r2
 80011b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011b6:	4313      	orrs	r3, r2
 80011b8:	633b      	str	r3, [r7, #48]	; 0x30
 80011ba:	e00b      	b.n	80011d4 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	f043 0220 	orr.w	r2, r3, #32
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011cc:	f043 0201 	orr.w	r2, r3, #1
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <HAL_ADC_Init+0x280>)
 80011dc:	4013      	ands	r3, r2
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011e4:	430b      	orrs	r3, r1
 80011e6:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <HAL_ADC_Init+0x284>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011f8:	430b      	orrs	r3, r1
 80011fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001204:	d003      	beq.n	800120e <HAL_ADC_Init+0x1d6>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d119      	bne.n	8001242 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	3b01      	subs	r3, #1
 800121e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001222:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	fa92 f2a2 	rbit	r2, r2
 800122a:	60fa      	str	r2, [r7, #12]
  return result;
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	fab2 f282 	clz	r2, r2
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	fa03 f202 	lsl.w	r2, r3, r2
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	631a      	str	r2, [r3, #48]	; 0x30
 8001240:	e007      	b.n	8001252 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001250:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_ADC_Init+0x288>)
 800125a:	4013      	ands	r3, r2
 800125c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800125e:	429a      	cmp	r2, r3
 8001260:	d10b      	bne.n	800127a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126c:	f023 0303 	bic.w	r3, r3, #3
 8001270:	f043 0201 	orr.w	r2, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	64da      	str	r2, [r3, #76]	; 0x4c
 8001278:	e014      	b.n	80012a4 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f023 0312 	bic.w	r3, r3, #18
 8001282:	f043 0210 	orr.w	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800128e:	f043 0201 	orr.w	r2, r3, #1
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800129c:	e002      	b.n	80012a4 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3738      	adds	r7, #56	; 0x38
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40012700 	.word	0x40012700
 80012b8:	fcfc16ff 	.word	0xfcfc16ff
 80012bc:	c0fff189 	.word	0xc0fff189
 80012c0:	bf80fffe 	.word	0xbf80fffe

080012c4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d101      	bne.n	80012de <HAL_ADC_Start+0x1a>
 80012da:	2302      	movs	r3, #2
 80012dc:	e04e      	b.n	800137c <HAL_ADC_Start+0xb8>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 fa54 	bl	8001794 <ADC_Enable>
 80012ec:	4603      	mov	r3, r0
 80012ee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d141      	bne.n	800137a <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001314:	2b00      	cmp	r3, #0
 8001316:	d007      	beq.n	8001328 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001320:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001334:	d106      	bne.n	8001344 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800133a:	f023 0206 	bic.w	r2, r3, #6
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	651a      	str	r2, [r3, #80]	; 0x50
 8001342:	e002      	b.n	800134a <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800135a:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d107      	bne.n	800137a <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001378:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a0:	d113      	bne.n	80013ca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013b0:	d10b      	bne.n	80013ca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f043 0220 	orr.w	r2, r3, #32
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e068      	b.n	800149c <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80013ca:	f7ff fe09 	bl	8000fe0 <HAL_GetTick>
 80013ce:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013d0:	e021      	b.n	8001416 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013d8:	d01d      	beq.n	8001416 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <HAL_ADC_PollForConversion+0x6c>
 80013e0:	f7ff fdfe 	bl	8000fe0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d212      	bcs.n	8001416 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10b      	bne.n	8001416 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	f043 0204 	orr.w	r2, r3, #4
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e042      	b.n	800149c <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0d6      	beq.n	80013d2 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d104      	bne.n	8001436 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f06f 0212 	mvn.w	r2, #18
 8001434:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d124      	bne.n	800149a <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001456:	2b00      	cmp	r3, #0
 8001458:	d11f      	bne.n	800149a <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001472:	2b00      	cmp	r3, #0
 8001474:	d111      	bne.n	800149a <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d105      	bne.n	800149a <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x20>
 80014d8:	2302      	movs	r3, #2
 80014da:	e14f      	b.n	800177c <HAL_ADC_ConfigChannel+0x2c0>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b06      	cmp	r3, #6
 80014ea:	d81c      	bhi.n	8001526 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	3b05      	subs	r3, #5
 80014fe:	221f      	movs	r2, #31
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	4019      	ands	r1, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	3b05      	subs	r3, #5
 8001518:	fa00 f203 	lsl.w	r2, r0, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	641a      	str	r2, [r3, #64]	; 0x40
 8001524:	e07e      	b.n	8001624 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b0c      	cmp	r3, #12
 800152c:	d81c      	bhi.n	8001568 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	3b23      	subs	r3, #35	; 0x23
 8001540:	221f      	movs	r2, #31
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	4019      	ands	r1, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	3b23      	subs	r3, #35	; 0x23
 800155a:	fa00 f203 	lsl.w	r2, r0, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	63da      	str	r2, [r3, #60]	; 0x3c
 8001566:	e05d      	b.n	8001624 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b12      	cmp	r3, #18
 800156e:	d81c      	bhi.n	80015aa <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	3b41      	subs	r3, #65	; 0x41
 8001582:	221f      	movs	r2, #31
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	4019      	ands	r1, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	3b41      	subs	r3, #65	; 0x41
 800159c:	fa00 f203 	lsl.w	r2, r0, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	639a      	str	r2, [r3, #56]	; 0x38
 80015a8:	e03c      	b.n	8001624 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b18      	cmp	r3, #24
 80015b0:	d81c      	bhi.n	80015ec <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	3b5f      	subs	r3, #95	; 0x5f
 80015c4:	221f      	movs	r2, #31
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	4019      	ands	r1, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	3b5f      	subs	r3, #95	; 0x5f
 80015de:	fa00 f203 	lsl.w	r2, r0, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	635a      	str	r2, [r3, #52]	; 0x34
 80015ea:	e01b      	b.n	8001624 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	3b7d      	subs	r3, #125	; 0x7d
 80015fe:	221f      	movs	r2, #31
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	4019      	ands	r1, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	3b7d      	subs	r3, #125	; 0x7d
 8001618:	fa00 f203 	lsl.w	r2, r0, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b09      	cmp	r3, #9
 800162a:	d81a      	bhi.n	8001662 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6959      	ldr	r1, [r3, #20]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	2207      	movs	r2, #7
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	4019      	ands	r1, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	6898      	ldr	r0, [r3, #8]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	fa00 f203 	lsl.w	r2, r0, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	615a      	str	r2, [r3, #20]
 8001660:	e05d      	b.n	800171e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b13      	cmp	r3, #19
 8001668:	d81c      	bhi.n	80016a4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6919      	ldr	r1, [r3, #16]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	3b1e      	subs	r3, #30
 800167c:	2207      	movs	r2, #7
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	4019      	ands	r1, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	6898      	ldr	r0, [r3, #8]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	3b1e      	subs	r3, #30
 8001696:	fa00 f203 	lsl.w	r2, r0, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	611a      	str	r2, [r3, #16]
 80016a2:	e03c      	b.n	800171e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b1d      	cmp	r3, #29
 80016aa:	d81c      	bhi.n	80016e6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68d9      	ldr	r1, [r3, #12]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	3b3c      	subs	r3, #60	; 0x3c
 80016be:	2207      	movs	r2, #7
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	4019      	ands	r1, r3
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	6898      	ldr	r0, [r3, #8]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	3b3c      	subs	r3, #60	; 0x3c
 80016d8:	fa00 f203 	lsl.w	r2, r0, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	e01b      	b.n	800171e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	3b5a      	subs	r3, #90	; 0x5a
 80016f8:	2207      	movs	r2, #7
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	4019      	ands	r1, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6898      	ldr	r0, [r3, #8]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	3b5a      	subs	r3, #90	; 0x5a
 8001712:	fa00 f203 	lsl.w	r2, r0, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b10      	cmp	r3, #16
 8001724:	d003      	beq.n	800172e <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800172a:	2b11      	cmp	r3, #17
 800172c:	d121      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <HAL_ADC_ConfigChannel+0x2cc>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d11b      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800173a:	4b13      	ldr	r3, [pc, #76]	; (8001788 <HAL_ADC_ConfigChannel+0x2cc>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <HAL_ADC_ConfigChannel+0x2cc>)
 8001740:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001744:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b10      	cmp	r3, #16
 800174c:	d111      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_ADC_ConfigChannel+0x2d0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_ADC_ConfigChannel+0x2d4>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	0c9a      	lsrs	r2, r3, #18
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001764:	e002      	b.n	800176c <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	3b01      	subs	r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f9      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40012700 	.word	0x40012700
 800178c:	20000000 	.word	0x20000000
 8001790:	431bde83 	.word	0x431bde83

08001794 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ae:	2b40      	cmp	r3, #64	; 0x40
 80017b0:	d043      	beq.n	800183a <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0201 	orr.w	r2, r2, #1
 80017c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <ADC_Enable+0xb0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a20      	ldr	r2, [pc, #128]	; (8001848 <ADC_Enable+0xb4>)
 80017c8:	fba2 2303 	umull	r2, r3, r2, r3
 80017cc:	0c9a      	lsrs	r2, r3, #18
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80017d6:	e002      	b.n	80017de <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	3b01      	subs	r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f9      	bne.n	80017d8 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80017e4:	f7ff fbfc 	bl	8000fe0 <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017ea:	e01f      	b.n	800182c <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80017ec:	f7ff fbf8 	bl	8000fe0 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d918      	bls.n	800182c <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001804:	2b40      	cmp	r3, #64	; 0x40
 8001806:	d011      	beq.n	800182c <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180c:	f043 0210 	orr.w	r2, r3, #16
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e007      	b.n	800183c <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001836:	2b40      	cmp	r3, #64	; 0x40
 8001838:	d1d8      	bne.n	80017ec <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000000 	.word	0x20000000
 8001848:	431bde83 	.word	0x431bde83

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	db0a      	blt.n	80018da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	490c      	ldr	r1, [pc, #48]	; (80018fc <__NVIC_SetPriority+0x4c>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	0112      	lsls	r2, r2, #4
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	440b      	add	r3, r1
 80018d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d8:	e00a      	b.n	80018f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4908      	ldr	r1, [pc, #32]	; (8001900 <__NVIC_SetPriority+0x50>)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	3b04      	subs	r3, #4
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	440b      	add	r3, r1
 80018ee:	761a      	strb	r2, [r3, #24]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f1c3 0307 	rsb	r3, r3, #7
 800191e:	2b04      	cmp	r3, #4
 8001920:	bf28      	it	cs
 8001922:	2304      	movcs	r3, #4
 8001924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3304      	adds	r3, #4
 800192a:	2b06      	cmp	r3, #6
 800192c:	d902      	bls.n	8001934 <NVIC_EncodePriority+0x30>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3b03      	subs	r3, #3
 8001932:	e000      	b.n	8001936 <NVIC_EncodePriority+0x32>
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	401a      	ands	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800194c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43d9      	mvns	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	4313      	orrs	r3, r2
         );
}
 800195e:	4618      	mov	r0, r3
 8001960:	3724      	adds	r7, #36	; 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001978:	d301      	bcc.n	800197e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800197a:	2301      	movs	r3, #1
 800197c:	e00f      	b.n	800199e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <SysTick_Config+0x40>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001986:	210f      	movs	r1, #15
 8001988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800198c:	f7ff ff90 	bl	80018b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <SysTick_Config+0x40>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <SysTick_Config+0x40>)
 8001998:	2207      	movs	r2, #7
 800199a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	e000e010 	.word	0xe000e010

080019ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff49 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d4:	f7ff ff5e 	bl	8001894 <__NVIC_GetPriorityGrouping>
 80019d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	6978      	ldr	r0, [r7, #20]
 80019e0:	f7ff ff90 	bl	8001904 <NVIC_EncodePriority>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff5f 	bl	80018b0 <__NVIC_SetPriority>
}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffb0 	bl	8001968 <SysTick_Config>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a2a:	e160      	b.n	8001cee <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8152 	beq.w	8001ce8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d005      	beq.n	8001a5c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d130      	bne.n	8001abe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001a92:	2201      	movs	r2, #1
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	f003 0201 	and.w	r2, r3, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d017      	beq.n	8001afa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d123      	bne.n	8001b4e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	6939      	ldr	r1, [r7, #16]
 8001b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0203 	and.w	r2, r3, #3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80ac 	beq.w	8001ce8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b90:	4b5e      	ldr	r3, [pc, #376]	; (8001d0c <HAL_GPIO_Init+0x2f8>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a5d      	ldr	r2, [pc, #372]	; (8001d0c <HAL_GPIO_Init+0x2f8>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	4b5b      	ldr	r3, [pc, #364]	; (8001d0c <HAL_GPIO_Init+0x2f8>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ba8:	4a59      	ldr	r2, [pc, #356]	; (8001d10 <HAL_GPIO_Init+0x2fc>)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3302      	adds	r3, #2
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a51      	ldr	r2, [pc, #324]	; (8001d14 <HAL_GPIO_Init+0x300>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d025      	beq.n	8001c20 <HAL_GPIO_Init+0x20c>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a50      	ldr	r2, [pc, #320]	; (8001d18 <HAL_GPIO_Init+0x304>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01f      	beq.n	8001c1c <HAL_GPIO_Init+0x208>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a4f      	ldr	r2, [pc, #316]	; (8001d1c <HAL_GPIO_Init+0x308>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d019      	beq.n	8001c18 <HAL_GPIO_Init+0x204>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a4e      	ldr	r2, [pc, #312]	; (8001d20 <HAL_GPIO_Init+0x30c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d013      	beq.n	8001c14 <HAL_GPIO_Init+0x200>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a4d      	ldr	r2, [pc, #308]	; (8001d24 <HAL_GPIO_Init+0x310>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d00d      	beq.n	8001c10 <HAL_GPIO_Init+0x1fc>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a4c      	ldr	r2, [pc, #304]	; (8001d28 <HAL_GPIO_Init+0x314>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d007      	beq.n	8001c0c <HAL_GPIO_Init+0x1f8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a4b      	ldr	r2, [pc, #300]	; (8001d2c <HAL_GPIO_Init+0x318>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d101      	bne.n	8001c08 <HAL_GPIO_Init+0x1f4>
 8001c04:	2306      	movs	r3, #6
 8001c06:	e00c      	b.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c08:	2307      	movs	r3, #7
 8001c0a:	e00a      	b.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c0c:	2305      	movs	r3, #5
 8001c0e:	e008      	b.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c10:	2304      	movs	r3, #4
 8001c12:	e006      	b.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c14:	2303      	movs	r3, #3
 8001c16:	e004      	b.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e002      	b.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_GPIO_Init+0x20e>
 8001c20:	2300      	movs	r3, #0
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	f002 0203 	and.w	r2, r2, #3
 8001c28:	0092      	lsls	r2, r2, #2
 8001c2a:	4093      	lsls	r3, r2
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c32:	4937      	ldr	r1, [pc, #220]	; (8001d10 <HAL_GPIO_Init+0x2fc>)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c40:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c64:	4a32      	ldr	r2, [pc, #200]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c6a:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c8e:	4a28      	ldr	r2, [pc, #160]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c94:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cb8:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ce2:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <HAL_GPIO_Init+0x31c>)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f47f ae97 	bne.w	8001a2c <HAL_GPIO_Init+0x18>
  }
}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40021400 	.word	0x40021400
 8001d2c:	40021800 	.word	0x40021800
 8001d30:	40010400 	.word	0x40010400

08001d34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	887b      	ldrh	r3, [r7, #2]
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	e001      	b.n	8001d56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	807b      	strh	r3, [r7, #2]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d72:	787b      	ldrb	r3, [r7, #1]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d78:	887a      	ldrh	r2, [r7, #2]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001d7e:	e003      	b.n	8001d88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001d80:	887b      	ldrh	r3, [r7, #2]
 8001d82:	041a      	lsls	r2, r3, #16
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e12b      	b.n	8001ffe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7fe fcac 	bl	8000718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2224      	movs	r2, #36	; 0x24
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001df8:	f001 fa80 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 8001dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4a81      	ldr	r2, [pc, #516]	; (8002008 <HAL_I2C_Init+0x274>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d807      	bhi.n	8001e18 <HAL_I2C_Init+0x84>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4a80      	ldr	r2, [pc, #512]	; (800200c <HAL_I2C_Init+0x278>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	bf94      	ite	ls
 8001e10:	2301      	movls	r3, #1
 8001e12:	2300      	movhi	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	e006      	b.n	8001e26 <HAL_I2C_Init+0x92>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a7d      	ldr	r2, [pc, #500]	; (8002010 <HAL_I2C_Init+0x27c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bf94      	ite	ls
 8001e20:	2301      	movls	r3, #1
 8001e22:	2300      	movhi	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0e7      	b.n	8001ffe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4a78      	ldr	r2, [pc, #480]	; (8002014 <HAL_I2C_Init+0x280>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	0c9b      	lsrs	r3, r3, #18
 8001e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a6a      	ldr	r2, [pc, #424]	; (8002008 <HAL_I2C_Init+0x274>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d802      	bhi.n	8001e68 <HAL_I2C_Init+0xd4>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3301      	adds	r3, #1
 8001e66:	e009      	b.n	8001e7c <HAL_I2C_Init+0xe8>
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	4a69      	ldr	r2, [pc, #420]	; (8002018 <HAL_I2C_Init+0x284>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	099b      	lsrs	r3, r3, #6
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	430b      	orrs	r3, r1
 8001e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	495c      	ldr	r1, [pc, #368]	; (8002008 <HAL_I2C_Init+0x274>)
 8001e98:	428b      	cmp	r3, r1
 8001e9a:	d819      	bhi.n	8001ed0 <HAL_I2C_Init+0x13c>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1e59      	subs	r1, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eaa:	1c59      	adds	r1, r3, #1
 8001eac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001eb0:	400b      	ands	r3, r1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HAL_I2C_Init+0x138>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1e59      	subs	r1, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eca:	e051      	b.n	8001f70 <HAL_I2C_Init+0x1dc>
 8001ecc:	2304      	movs	r3, #4
 8001ece:	e04f      	b.n	8001f70 <HAL_I2C_Init+0x1dc>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d111      	bne.n	8001efc <HAL_I2C_Init+0x168>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	1e58      	subs	r0, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	440b      	add	r3, r1
 8001ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf0c      	ite	eq
 8001ef4:	2301      	moveq	r3, #1
 8001ef6:	2300      	movne	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	e012      	b.n	8001f22 <HAL_I2C_Init+0x18e>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1e58      	subs	r0, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	0099      	lsls	r1, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2301      	moveq	r3, #1
 8001f1e:	2300      	movne	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_I2C_Init+0x196>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e022      	b.n	8001f70 <HAL_I2C_Init+0x1dc>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10e      	bne.n	8001f50 <HAL_I2C_Init+0x1bc>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1e58      	subs	r0, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6859      	ldr	r1, [r3, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	440b      	add	r3, r1
 8001f40:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f44:	3301      	adds	r3, #1
 8001f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f4e:	e00f      	b.n	8001f70 <HAL_I2C_Init+0x1dc>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1e58      	subs	r0, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	0099      	lsls	r1, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f66:	3301      	adds	r3, #1
 8001f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	6809      	ldr	r1, [r1, #0]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69da      	ldr	r2, [r3, #28]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6911      	ldr	r1, [r2, #16]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68d2      	ldr	r2, [r2, #12]
 8001faa:	4311      	orrs	r1, r2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	000186a0 	.word	0x000186a0
 800200c:	001e847f 	.word	0x001e847f
 8002010:	003d08ff 	.word	0x003d08ff
 8002014:	431bde83 	.word	0x431bde83
 8002018:	10624dd3 	.word	0x10624dd3

0800201c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af02      	add	r7, sp, #8
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	461a      	mov	r2, r3
 8002028:	460b      	mov	r3, r1
 800202a:	817b      	strh	r3, [r7, #10]
 800202c:	4613      	mov	r3, r2
 800202e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7fe ffd6 	bl	8000fe0 <HAL_GetTick>
 8002034:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b20      	cmp	r3, #32
 8002040:	f040 80e0 	bne.w	8002204 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2319      	movs	r3, #25
 800204a:	2201      	movs	r2, #1
 800204c:	4970      	ldr	r1, [pc, #448]	; (8002210 <HAL_I2C_Master_Transmit+0x1f4>)
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 fa92 	bl	8002578 <I2C_WaitOnFlagUntilTimeout>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800205a:	2302      	movs	r3, #2
 800205c:	e0d3      	b.n	8002206 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_I2C_Master_Transmit+0x50>
 8002068:	2302      	movs	r3, #2
 800206a:	e0cc      	b.n	8002206 <HAL_I2C_Master_Transmit+0x1ea>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b01      	cmp	r3, #1
 8002080:	d007      	beq.n	8002092 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0201 	orr.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2221      	movs	r2, #33	; 0x21
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2210      	movs	r2, #16
 80020ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	893a      	ldrh	r2, [r7, #8]
 80020c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4a50      	ldr	r2, [pc, #320]	; (8002214 <HAL_I2C_Master_Transmit+0x1f8>)
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020d4:	8979      	ldrh	r1, [r7, #10]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	6a3a      	ldr	r2, [r7, #32]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f9ca 	bl	8002474 <I2C_MasterRequestWrite>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e08d      	b.n	8002206 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002100:	e066      	b.n	80021d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	6a39      	ldr	r1, [r7, #32]
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 fb0c 	bl	8002724 <I2C_WaitOnTXEFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00d      	beq.n	800212e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	2b04      	cmp	r3, #4
 8002118:	d107      	bne.n	800212a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002128:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e06b      	b.n	8002206 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	781a      	ldrb	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b04      	cmp	r3, #4
 800216a:	d11b      	bne.n	80021a4 <HAL_I2C_Master_Transmit+0x188>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002170:	2b00      	cmp	r3, #0
 8002172:	d017      	beq.n	80021a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	781a      	ldrb	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218e:	b29b      	uxth	r3, r3
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	6a39      	ldr	r1, [r7, #32]
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fafc 	bl	80027a6 <I2C_WaitOnBTFFlagUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00d      	beq.n	80021d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d107      	bne.n	80021cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e01a      	b.n	8002206 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d194      	bne.n	8002102 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	e000      	b.n	8002206 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002204:	2302      	movs	r3, #2
  }
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	00100002 	.word	0x00100002
 8002214:	ffff0000 	.word	0xffff0000

08002218 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	; 0x28
 800221c:	af02      	add	r7, sp, #8
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	607a      	str	r2, [r7, #4]
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	460b      	mov	r3, r1
 8002226:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7fe feda 	bl	8000fe0 <HAL_GetTick>
 800222c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800222e:	2301      	movs	r3, #1
 8002230:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b20      	cmp	r3, #32
 800223c:	f040 8111 	bne.w	8002462 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2319      	movs	r3, #25
 8002246:	2201      	movs	r2, #1
 8002248:	4988      	ldr	r1, [pc, #544]	; (800246c <HAL_I2C_IsDeviceReady+0x254>)
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 f994 	bl	8002578 <I2C_WaitOnFlagUntilTimeout>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002256:	2302      	movs	r3, #2
 8002258:	e104      	b.n	8002464 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_I2C_IsDeviceReady+0x50>
 8002264:	2302      	movs	r3, #2
 8002266:	e0fd      	b.n	8002464 <HAL_I2C_IsDeviceReady+0x24c>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d007      	beq.n	800228e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0201 	orr.w	r2, r2, #1
 800228c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800229c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2224      	movs	r2, #36	; 0x24
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4a70      	ldr	r2, [pc, #448]	; (8002470 <HAL_I2C_IsDeviceReady+0x258>)
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f952 	bl	8002578 <I2C_WaitOnFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00d      	beq.n	80022f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022e8:	d103      	bne.n	80022f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e0b6      	b.n	8002464 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022f6:	897b      	ldrh	r3, [r7, #10]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002304:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002306:	f7fe fe6b 	bl	8000fe0 <HAL_GetTick>
 800230a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b02      	cmp	r3, #2
 8002318:	bf0c      	ite	eq
 800231a:	2301      	moveq	r3, #1
 800231c:	2300      	movne	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002330:	bf0c      	ite	eq
 8002332:	2301      	moveq	r3, #1
 8002334:	2300      	movne	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800233a:	e025      	b.n	8002388 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800233c:	f7fe fe50 	bl	8000fe0 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d302      	bcc.n	8002352 <HAL_I2C_IsDeviceReady+0x13a>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	22a0      	movs	r2, #160	; 0xa0
 8002356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b02      	cmp	r3, #2
 8002366:	bf0c      	ite	eq
 8002368:	2301      	moveq	r3, #1
 800236a:	2300      	movne	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2ba0      	cmp	r3, #160	; 0xa0
 8002392:	d005      	beq.n	80023a0 <HAL_I2C_IsDeviceReady+0x188>
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <HAL_I2C_IsDeviceReady+0x188>
 800239a:	7dbb      	ldrb	r3, [r7, #22]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0cd      	beq.n	800233c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d129      	bne.n	800240a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	2319      	movs	r3, #25
 80023e2:	2201      	movs	r2, #1
 80023e4:	4921      	ldr	r1, [pc, #132]	; (800246c <HAL_I2C_IsDeviceReady+0x254>)
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f8c6 	bl	8002578 <I2C_WaitOnFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e036      	b.n	8002464 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e02c      	b.n	8002464 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002418:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002422:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2319      	movs	r3, #25
 800242a:	2201      	movs	r2, #1
 800242c:	490f      	ldr	r1, [pc, #60]	; (800246c <HAL_I2C_IsDeviceReady+0x254>)
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f8a2 	bl	8002578 <I2C_WaitOnFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e012      	b.n	8002464 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	3301      	adds	r3, #1
 8002442:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	f4ff af32 	bcc.w	80022b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002462:	2302      	movs	r3, #2
  }
}
 8002464:	4618      	mov	r0, r3
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	00100002 	.word	0x00100002
 8002470:	ffff0000 	.word	0xffff0000

08002474 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af02      	add	r7, sp, #8
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	460b      	mov	r3, r1
 8002482:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b08      	cmp	r3, #8
 800248e:	d006      	beq.n	800249e <I2C_MasterRequestWrite+0x2a>
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d003      	beq.n	800249e <I2C_MasterRequestWrite+0x2a>
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800249c:	d108      	bne.n	80024b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	e00b      	b.n	80024c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	2b12      	cmp	r3, #18
 80024b6:	d107      	bne.n	80024c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f84f 	bl	8002578 <I2C_WaitOnFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00d      	beq.n	80024fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ee:	d103      	bne.n	80024f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e035      	b.n	8002568 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002504:	d108      	bne.n	8002518 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002506:	897b      	ldrh	r3, [r7, #10]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002514:	611a      	str	r2, [r3, #16]
 8002516:	e01b      	b.n	8002550 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002518:	897b      	ldrh	r3, [r7, #10]
 800251a:	11db      	asrs	r3, r3, #7
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f003 0306 	and.w	r3, r3, #6
 8002522:	b2db      	uxtb	r3, r3
 8002524:	f063 030f 	orn	r3, r3, #15
 8002528:	b2da      	uxtb	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	490e      	ldr	r1, [pc, #56]	; (8002570 <I2C_MasterRequestWrite+0xfc>)
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f875 	bl	8002626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e010      	b.n	8002568 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002546:	897b      	ldrh	r3, [r7, #10]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	4907      	ldr	r1, [pc, #28]	; (8002574 <I2C_MasterRequestWrite+0x100>)
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f865 	bl	8002626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	00010008 	.word	0x00010008
 8002574:	00010002 	.word	0x00010002

08002578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002588:	e025      	b.n	80025d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002590:	d021      	beq.n	80025d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002592:	f7fe fd25 	bl	8000fe0 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d302      	bcc.n	80025a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d116      	bne.n	80025d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f043 0220 	orr.w	r2, r3, #32
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e023      	b.n	800261e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d10d      	bne.n	80025fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4013      	ands	r3, r2
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf0c      	ite	eq
 80025f2:	2301      	moveq	r3, #1
 80025f4:	2300      	movne	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	e00c      	b.n	8002616 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	43da      	mvns	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4013      	ands	r3, r2
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	bf0c      	ite	eq
 800260e:	2301      	moveq	r3, #1
 8002610:	2300      	movne	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	429a      	cmp	r2, r3
 800261a:	d0b6      	beq.n	800258a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002634:	e051      	b.n	80026da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002644:	d123      	bne.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002654:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800265e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f043 0204 	orr.w	r2, r3, #4
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e046      	b.n	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002694:	d021      	beq.n	80026da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002696:	f7fe fca3 	bl	8000fe0 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d302      	bcc.n	80026ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d116      	bne.n	80026da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e020      	b.n	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d10c      	bne.n	80026fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	43da      	mvns	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4013      	ands	r3, r2
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf14      	ite	ne
 80026f6:	2301      	movne	r3, #1
 80026f8:	2300      	moveq	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	e00b      	b.n	8002716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	43da      	mvns	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4013      	ands	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf14      	ite	ne
 8002710:	2301      	movne	r3, #1
 8002712:	2300      	moveq	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d18d      	bne.n	8002636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002730:	e02d      	b.n	800278e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f878 	bl	8002828 <I2C_IsAcknowledgeFailed>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e02d      	b.n	800279e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002748:	d021      	beq.n	800278e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274a:	f7fe fc49 	bl	8000fe0 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	429a      	cmp	r2, r3
 8002758:	d302      	bcc.n	8002760 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d116      	bne.n	800278e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f043 0220 	orr.w	r2, r3, #32
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e007      	b.n	800279e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	2b80      	cmp	r3, #128	; 0x80
 800279a:	d1ca      	bne.n	8002732 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027b2:	e02d      	b.n	8002810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f837 	bl	8002828 <I2C_IsAcknowledgeFailed>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e02d      	b.n	8002820 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ca:	d021      	beq.n	8002810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027cc:	f7fe fc08 	bl	8000fe0 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d302      	bcc.n	80027e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d116      	bne.n	8002810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e007      	b.n	8002820 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b04      	cmp	r3, #4
 800281c:	d1ca      	bne.n	80027b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283e:	d11b      	bne.n	8002878 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002848:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f043 0204 	orr.w	r2, r3, #4
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e31d      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002896:	4b94      	ldr	r3, [pc, #592]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a0:	4b91      	ldr	r3, [pc, #580]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d07b      	beq.n	80029ae <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d006      	beq.n	80028ca <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	d10f      	bne.n	80028e2 <HAL_RCC_OscConfig+0x5e>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	d10b      	bne.n	80028e2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ca:	4b87      	ldr	r3, [pc, #540]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d06a      	beq.n	80029ac <HAL_RCC_OscConfig+0x128>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d166      	bne.n	80029ac <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e2f7      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d106      	bne.n	80028f8 <HAL_RCC_OscConfig+0x74>
 80028ea:	4b7f      	ldr	r3, [pc, #508]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a7e      	ldr	r2, [pc, #504]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e02d      	b.n	8002954 <HAL_RCC_OscConfig+0xd0>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10c      	bne.n	800291a <HAL_RCC_OscConfig+0x96>
 8002900:	4b79      	ldr	r3, [pc, #484]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a78      	ldr	r2, [pc, #480]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a75      	ldr	r2, [pc, #468]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	e01c      	b.n	8002954 <HAL_RCC_OscConfig+0xd0>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b05      	cmp	r3, #5
 8002920:	d10c      	bne.n	800293c <HAL_RCC_OscConfig+0xb8>
 8002922:	4b71      	ldr	r3, [pc, #452]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a70      	ldr	r2, [pc, #448]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	4b6e      	ldr	r3, [pc, #440]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a6d      	ldr	r2, [pc, #436]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e00b      	b.n	8002954 <HAL_RCC_OscConfig+0xd0>
 800293c:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a69      	ldr	r2, [pc, #420]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	4b67      	ldr	r3, [pc, #412]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a66      	ldr	r2, [pc, #408]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 800294e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d013      	beq.n	8002984 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe fb40 	bl	8000fe0 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002964:	f7fe fb3c 	bl	8000fe0 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e2ad      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002976:	4b5c      	ldr	r3, [pc, #368]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0xe0>
 8002982:	e014      	b.n	80029ae <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fe fb2c 	bl	8000fe0 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800298c:	f7fe fb28 	bl	8000fe0 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e299      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800299e:	4b52      	ldr	r3, [pc, #328]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x108>
 80029aa:	e000      	b.n	80029ae <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d05a      	beq.n	8002a70 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d005      	beq.n	80029cc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b0c      	cmp	r3, #12
 80029c4:	d119      	bne.n	80029fa <HAL_RCC_OscConfig+0x176>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d116      	bne.n	80029fa <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029cc:	4b46      	ldr	r3, [pc, #280]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_OscConfig+0x160>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e276      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e4:	4b40      	ldr	r3, [pc, #256]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	493d      	ldr	r1, [pc, #244]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f8:	e03a      	b.n	8002a70 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d020      	beq.n	8002a44 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a02:	4b3a      	ldr	r3, [pc, #232]	; (8002aec <HAL_RCC_OscConfig+0x268>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fe faea 	bl	8000fe0 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a10:	f7fe fae6 	bl	8000fe0 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e257      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a22:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	492a      	ldr	r1, [pc, #168]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	604b      	str	r3, [r1, #4]
 8002a42:	e015      	b.n	8002a70 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a44:	4b29      	ldr	r3, [pc, #164]	; (8002aec <HAL_RCC_OscConfig+0x268>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fac9 	bl	8000fe0 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a52:	f7fe fac5 	bl	8000fe0 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e236      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a64:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80b8 	beq.w	8002bee <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d170      	bne.n	8002b66 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a84:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_OscConfig+0x218>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e21a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1a      	ldr	r2, [r3, #32]
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d921      	bls.n	8002af0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fc4b 	bl	800334c <RCC_SetFlashLatencyFromMSIRange>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e208      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4906      	ldr	r1, [pc, #24]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	061b      	lsls	r3, r3, #24
 8002ae0:	4901      	ldr	r1, [pc, #4]	; (8002ae8 <HAL_RCC_OscConfig+0x264>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]
 8002ae6:	e020      	b.n	8002b2a <HAL_RCC_OscConfig+0x2a6>
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af0:	4ba4      	ldr	r3, [pc, #656]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	49a1      	ldr	r1, [pc, #644]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b02:	4ba0      	ldr	r3, [pc, #640]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	061b      	lsls	r3, r3, #24
 8002b10:	499c      	ldr	r1, [pc, #624]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fc16 	bl	800334c <RCC_SetFlashLatencyFromMSIRange>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e1d3      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	0b5b      	lsrs	r3, r3, #13
 8002b30:	3301      	adds	r3, #1
 8002b32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b3a:	4a92      	ldr	r2, [pc, #584]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002b3c:	6892      	ldr	r2, [r2, #8]
 8002b3e:	0912      	lsrs	r2, r2, #4
 8002b40:	f002 020f 	and.w	r2, r2, #15
 8002b44:	4990      	ldr	r1, [pc, #576]	; (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002b46:	5c8a      	ldrb	r2, [r1, r2]
 8002b48:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b4a:	4a90      	ldr	r2, [pc, #576]	; (8002d8c <HAL_RCC_OscConfig+0x508>)
 8002b4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b4e:	4b90      	ldr	r3, [pc, #576]	; (8002d90 <HAL_RCC_OscConfig+0x50c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe f9f8 	bl	8000f48 <HAL_InitTick>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d045      	beq.n	8002bee <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	e1b5      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d029      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b6e:	4b89      	ldr	r3, [pc, #548]	; (8002d94 <HAL_RCC_OscConfig+0x510>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe fa34 	bl	8000fe0 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b7c:	f7fe fa30 	bl	8000fe0 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1a1      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b8e:	4b7d      	ldr	r3, [pc, #500]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b9a:	4b7a      	ldr	r3, [pc, #488]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	4977      	ldr	r1, [pc, #476]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bac:	4b75      	ldr	r3, [pc, #468]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	4972      	ldr	r1, [pc, #456]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
 8002bc0:	e015      	b.n	8002bee <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bc2:	4b74      	ldr	r3, [pc, #464]	; (8002d94 <HAL_RCC_OscConfig+0x510>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fa0a 	bl	8000fe0 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bd0:	f7fe fa06 	bl	8000fe0 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e177      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002be2:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d030      	beq.n	8002c5c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d016      	beq.n	8002c30 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c02:	4b65      	ldr	r3, [pc, #404]	; (8002d98 <HAL_RCC_OscConfig+0x514>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c08:	f7fe f9ea 	bl	8000fe0 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c10:	f7fe f9e6 	bl	8000fe0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e157      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c22:	4b58      	ldr	r3, [pc, #352]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x38c>
 8002c2e:	e015      	b.n	8002c5c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c30:	4b59      	ldr	r3, [pc, #356]	; (8002d98 <HAL_RCC_OscConfig+0x514>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7fe f9d3 	bl	8000fe0 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c3e:	f7fe f9cf 	bl	8000fe0 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e140      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c50:	4b4c      	ldr	r3, [pc, #304]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f0      	bne.n	8002c3e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80b5 	beq.w	8002dd4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b45      	ldr	r3, [pc, #276]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10d      	bne.n	8002c96 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	4a41      	ldr	r2, [pc, #260]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c84:	6253      	str	r3, [r2, #36]	; 0x24
 8002c86:	4b3f      	ldr	r3, [pc, #252]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c92:	2301      	movs	r3, #1
 8002c94:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <HAL_RCC_OscConfig+0x518>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d118      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca2:	4b3e      	ldr	r3, [pc, #248]	; (8002d9c <HAL_RCC_OscConfig+0x518>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a3d      	ldr	r2, [pc, #244]	; (8002d9c <HAL_RCC_OscConfig+0x518>)
 8002ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cae:	f7fe f997 	bl	8000fe0 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb6:	f7fe f993 	bl	8000fe0 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b64      	cmp	r3, #100	; 0x64
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e104      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	4b34      	ldr	r3, [pc, #208]	; (8002d9c <HAL_RCC_OscConfig+0x518>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x466>
 8002cdc:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce0:	4a28      	ldr	r2, [pc, #160]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce6:	6353      	str	r3, [r2, #52]	; 0x34
 8002ce8:	e02d      	b.n	8002d46 <HAL_RCC_OscConfig+0x4c2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x488>
 8002cf2:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf6:	4a23      	ldr	r2, [pc, #140]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cfc:	6353      	str	r3, [r2, #52]	; 0x34
 8002cfe:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	4a20      	ldr	r2, [pc, #128]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002d04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d08:	6353      	str	r3, [r2, #52]	; 0x34
 8002d0a:	e01c      	b.n	8002d46 <HAL_RCC_OscConfig+0x4c2>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b05      	cmp	r3, #5
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_OscConfig+0x4aa>
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d18:	4a1a      	ldr	r2, [pc, #104]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d1e:	6353      	str	r3, [r2, #52]	; 0x34
 8002d20:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d24:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2a:	6353      	str	r3, [r2, #52]	; 0x34
 8002d2c:	e00b      	b.n	8002d46 <HAL_RCC_OscConfig+0x4c2>
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d32:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d38:	6353      	str	r3, [r2, #52]	; 0x34
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3e:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002d40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d44:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d015      	beq.n	8002d7a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe f947 	bl	8000fe0 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe f943 	bl	8000fe0 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0b2      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ee      	beq.n	8002d56 <HAL_RCC_OscConfig+0x4d2>
 8002d78:	e023      	b.n	8002dc2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7a:	f7fe f931 	bl	8000fe0 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d80:	e019      	b.n	8002db6 <HAL_RCC_OscConfig+0x532>
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	0800416c 	.word	0x0800416c
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	20000004 	.word	0x20000004
 8002d94:	42470020 	.word	0x42470020
 8002d98:	42470680 	.word	0x42470680
 8002d9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da0:	f7fe f91e 	bl	8000fe0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e08d      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002db6:	4b49      	ldr	r3, [pc, #292]	; (8002edc <HAL_RCC_OscConfig+0x658>)
 8002db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1ee      	bne.n	8002da0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dc2:	7ffb      	ldrb	r3, [r7, #31]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d105      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc8:	4b44      	ldr	r3, [pc, #272]	; (8002edc <HAL_RCC_OscConfig+0x658>)
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	4a43      	ldr	r2, [pc, #268]	; (8002edc <HAL_RCC_OscConfig+0x658>)
 8002dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d079      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b0c      	cmp	r3, #12
 8002de0:	d056      	beq.n	8002e90 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d13b      	bne.n	8002e62 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b3d      	ldr	r3, [pc, #244]	; (8002ee0 <HAL_RCC_OscConfig+0x65c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe f8f6 	bl	8000fe0 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe f8f2 	bl	8000fe0 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e063      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e0a:	4b34      	ldr	r3, [pc, #208]	; (8002edc <HAL_RCC_OscConfig+0x658>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e16:	4b31      	ldr	r3, [pc, #196]	; (8002edc <HAL_RCC_OscConfig+0x658>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	4319      	orrs	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	492b      	ldr	r1, [pc, #172]	; (8002edc <HAL_RCC_OscConfig+0x658>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e34:	4b2a      	ldr	r3, [pc, #168]	; (8002ee0 <HAL_RCC_OscConfig+0x65c>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7fe f8d1 	bl	8000fe0 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e42:	f7fe f8cd 	bl	8000fe0 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e03e      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e54:	4b21      	ldr	r3, [pc, #132]	; (8002edc <HAL_RCC_OscConfig+0x658>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x5be>
 8002e60:	e036      	b.n	8002ed0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <HAL_RCC_OscConfig+0x65c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe f8ba 	bl	8000fe0 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe f8b6 	bl	8000fe0 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e027      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e82:	4b16      	ldr	r3, [pc, #88]	; (8002edc <HAL_RCC_OscConfig+0x658>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x5ec>
 8002e8e:	e01f      	b.n	8002ed0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e01a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e9c:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <HAL_RCC_OscConfig+0x658>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d10d      	bne.n	8002ecc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d106      	bne.n	8002ecc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	42470060 	.word	0x42470060

08002ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e11a      	b.n	800312e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef8:	4b8f      	ldr	r3, [pc, #572]	; (8003138 <HAL_RCC_ClockConfig+0x254>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d919      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x34>
 8002f0c:	4b8a      	ldr	r3, [pc, #552]	; (8003138 <HAL_RCC_ClockConfig+0x254>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a89      	ldr	r2, [pc, #548]	; (8003138 <HAL_RCC_ClockConfig+0x254>)
 8002f12:	f043 0304 	orr.w	r3, r3, #4
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4b87      	ldr	r3, [pc, #540]	; (8003138 <HAL_RCC_ClockConfig+0x254>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f023 0201 	bic.w	r2, r3, #1
 8002f20:	4985      	ldr	r1, [pc, #532]	; (8003138 <HAL_RCC_ClockConfig+0x254>)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f28:	4b83      	ldr	r3, [pc, #524]	; (8003138 <HAL_RCC_ClockConfig+0x254>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0f9      	b.n	800312e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f46:	4b7d      	ldr	r3, [pc, #500]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	497a      	ldr	r1, [pc, #488]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 808e 	beq.w	8003082 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f6e:	4b73      	ldr	r3, [pc, #460]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d121      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e0d7      	b.n	800312e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d107      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f86:	4b6d      	ldr	r3, [pc, #436]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d115      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0cb      	b.n	800312e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f9e:	4b67      	ldr	r3, [pc, #412]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0bf      	b.n	800312e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fae:	4b63      	ldr	r3, [pc, #396]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e0b7      	b.n	800312e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fbe:	4b5f      	ldr	r3, [pc, #380]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f023 0203 	bic.w	r2, r3, #3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	495c      	ldr	r1, [pc, #368]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd0:	f7fe f806 	bl	8000fe0 <HAL_GetTick>
 8002fd4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d112      	bne.n	8003004 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe0:	f7fd fffe 	bl	8000fe0 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e09b      	b.n	800312e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ff6:	4b51      	ldr	r3, [pc, #324]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d1ee      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xfc>
 8003002:	e03e      	b.n	8003082 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b03      	cmp	r3, #3
 800300a:	d112      	bne.n	8003032 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800300c:	e00a      	b.n	8003024 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300e:	f7fd ffe7 	bl	8000fe0 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e084      	b.n	800312e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003024:	4b45      	ldr	r3, [pc, #276]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b0c      	cmp	r3, #12
 800302e:	d1ee      	bne.n	800300e <HAL_RCC_ClockConfig+0x12a>
 8003030:	e027      	b.n	8003082 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d11d      	bne.n	8003076 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303c:	f7fd ffd0 	bl	8000fe0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e06d      	b.n	800312e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003052:	4b3a      	ldr	r3, [pc, #232]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b04      	cmp	r3, #4
 800305c:	d1ee      	bne.n	800303c <HAL_RCC_ClockConfig+0x158>
 800305e:	e010      	b.n	8003082 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003060:	f7fd ffbe 	bl	8000fe0 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e05b      	b.n	800312e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003076:	4b31      	ldr	r3, [pc, #196]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1ee      	bne.n	8003060 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_ClockConfig+0x254>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d219      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d105      	bne.n	80030a2 <HAL_RCC_ClockConfig+0x1be>
 8003096:	4b28      	ldr	r3, [pc, #160]	; (8003138 <HAL_RCC_ClockConfig+0x254>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a27      	ldr	r2, [pc, #156]	; (8003138 <HAL_RCC_ClockConfig+0x254>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	4b25      	ldr	r3, [pc, #148]	; (8003138 <HAL_RCC_ClockConfig+0x254>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 0201 	bic.w	r2, r3, #1
 80030aa:	4923      	ldr	r1, [pc, #140]	; (8003138 <HAL_RCC_ClockConfig+0x254>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b21      	ldr	r3, [pc, #132]	; (8003138 <HAL_RCC_ClockConfig+0x254>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e034      	b.n	800312e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d0:	4b1a      	ldr	r3, [pc, #104]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4917      	ldr	r1, [pc, #92]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ee:	4b13      	ldr	r3, [pc, #76]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	490f      	ldr	r1, [pc, #60]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003102:	f000 f823 	bl	800314c <HAL_RCC_GetSysClockFreq>
 8003106:	4602      	mov	r2, r0
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <HAL_RCC_ClockConfig+0x258>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	490b      	ldr	r1, [pc, #44]	; (8003140 <HAL_RCC_ClockConfig+0x25c>)
 8003114:	5ccb      	ldrb	r3, [r1, r3]
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <HAL_RCC_ClockConfig+0x260>)
 800311c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_RCC_ClockConfig+0x264>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd ff10 	bl	8000f48 <HAL_InitTick>
 8003128:	4603      	mov	r3, r0
 800312a:	72fb      	strb	r3, [r7, #11]

  return status;
 800312c:	7afb      	ldrb	r3, [r7, #11]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023c00 	.word	0x40023c00
 800313c:	40023800 	.word	0x40023800
 8003140:	0800416c 	.word	0x0800416c
 8003144:	20000000 	.word	0x20000000
 8003148:	20000004 	.word	0x20000004

0800314c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800314c:	b5b0      	push	{r4, r5, r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003152:	4b61      	ldr	r3, [pc, #388]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b0c      	cmp	r3, #12
 8003160:	d00d      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0x32>
 8003162:	2b0c      	cmp	r3, #12
 8003164:	f200 80a4 	bhi.w	80032b0 <HAL_RCC_GetSysClockFreq+0x164>
 8003168:	2b04      	cmp	r3, #4
 800316a:	d002      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x26>
 800316c:	2b08      	cmp	r3, #8
 800316e:	d003      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x2c>
 8003170:	e09e      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003172:	4b5a      	ldr	r3, [pc, #360]	; (80032dc <HAL_RCC_GetSysClockFreq+0x190>)
 8003174:	613b      	str	r3, [r7, #16]
      break;
 8003176:	e0a9      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003178:	4b59      	ldr	r3, [pc, #356]	; (80032e0 <HAL_RCC_GetSysClockFreq+0x194>)
 800317a:	613b      	str	r3, [r7, #16]
      break;
 800317c:	e0a6      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	0c9b      	lsrs	r3, r3, #18
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	4a57      	ldr	r2, [pc, #348]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x198>)
 8003188:	5cd3      	ldrb	r3, [r2, r3]
 800318a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	0d9b      	lsrs	r3, r3, #22
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	3301      	adds	r3, #1
 8003196:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003198:	4b4f      	ldr	r3, [pc, #316]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x18c>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d041      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	461c      	mov	r4, r3
 80031a8:	f04f 0500 	mov.w	r5, #0
 80031ac:	4620      	mov	r0, r4
 80031ae:	4629      	mov	r1, r5
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	014b      	lsls	r3, r1, #5
 80031ba:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031be:	0142      	lsls	r2, r0, #5
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	1b00      	subs	r0, r0, r4
 80031c6:	eb61 0105 	sbc.w	r1, r1, r5
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	018b      	lsls	r3, r1, #6
 80031d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031d8:	0182      	lsls	r2, r0, #6
 80031da:	1a12      	subs	r2, r2, r0
 80031dc:	eb63 0301 	sbc.w	r3, r3, r1
 80031e0:	f04f 0000 	mov.w	r0, #0
 80031e4:	f04f 0100 	mov.w	r1, #0
 80031e8:	00d9      	lsls	r1, r3, #3
 80031ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031ee:	00d0      	lsls	r0, r2, #3
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	1912      	adds	r2, r2, r4
 80031f6:	eb45 0303 	adc.w	r3, r5, r3
 80031fa:	f04f 0000 	mov.w	r0, #0
 80031fe:	f04f 0100 	mov.w	r1, #0
 8003202:	0259      	lsls	r1, r3, #9
 8003204:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003208:	0250      	lsls	r0, r2, #9
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	461a      	mov	r2, r3
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	f7fc ffb7 	bl	800018c <__aeabi_uldivmod>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4613      	mov	r3, r2
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e040      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	461c      	mov	r4, r3
 800322c:	f04f 0500 	mov.w	r5, #0
 8003230:	4620      	mov	r0, r4
 8003232:	4629      	mov	r1, r5
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	014b      	lsls	r3, r1, #5
 800323e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003242:	0142      	lsls	r2, r0, #5
 8003244:	4610      	mov	r0, r2
 8003246:	4619      	mov	r1, r3
 8003248:	1b00      	subs	r0, r0, r4
 800324a:	eb61 0105 	sbc.w	r1, r1, r5
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	018b      	lsls	r3, r1, #6
 8003258:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800325c:	0182      	lsls	r2, r0, #6
 800325e:	1a12      	subs	r2, r2, r0
 8003260:	eb63 0301 	sbc.w	r3, r3, r1
 8003264:	f04f 0000 	mov.w	r0, #0
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	00d9      	lsls	r1, r3, #3
 800326e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003272:	00d0      	lsls	r0, r2, #3
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	1912      	adds	r2, r2, r4
 800327a:	eb45 0303 	adc.w	r3, r5, r3
 800327e:	f04f 0000 	mov.w	r0, #0
 8003282:	f04f 0100 	mov.w	r1, #0
 8003286:	0299      	lsls	r1, r3, #10
 8003288:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800328c:	0290      	lsls	r0, r2, #10
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4610      	mov	r0, r2
 8003294:	4619      	mov	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	461a      	mov	r2, r3
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	f7fc ff75 	bl	800018c <__aeabi_uldivmod>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4613      	mov	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	613b      	str	r3, [r7, #16]
      break;
 80032ae:	e00d      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x18c>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	0b5b      	lsrs	r3, r3, #13
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	3301      	adds	r3, #1
 80032c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	613b      	str	r3, [r7, #16]
      break;
 80032ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032cc:	693b      	ldr	r3, [r7, #16]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bdb0      	pop	{r4, r5, r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	00f42400 	.word	0x00f42400
 80032e0:	007a1200 	.word	0x007a1200
 80032e4:	08004160 	.word	0x08004160

080032e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ec:	4b02      	ldr	r3, [pc, #8]	; (80032f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	20000000 	.word	0x20000000

080032fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003300:	f7ff fff2 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4903      	ldr	r1, [pc, #12]	; (8003320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	0800417c 	.word	0x0800417c

08003324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003328:	f7ff ffde 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0adb      	lsrs	r3, r3, #11
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4903      	ldr	r1, [pc, #12]	; (8003348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	0800417c 	.word	0x0800417c

0800334c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003358:	4b29      	ldr	r3, [pc, #164]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d12c      	bne.n	80033be <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003364:	4b26      	ldr	r3, [pc, #152]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003370:	4b24      	ldr	r3, [pc, #144]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	e016      	b.n	80033aa <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337c:	4b20      	ldr	r3, [pc, #128]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	4a1f      	ldr	r2, [pc, #124]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003386:	6253      	str	r3, [r2, #36]	; 0x24
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003394:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800339c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	4a17      	ldr	r2, [pc, #92]	; (8003400 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80033b0:	d105      	bne.n	80033be <RCC_SetFlashLatencyFromMSIRange+0x72>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033b8:	d101      	bne.n	80033be <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80033ba:	2301      	movs	r3, #1
 80033bc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d105      	bne.n	80033d0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80033c4:	4b10      	ldr	r3, [pc, #64]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ca:	f043 0304 	orr.w	r3, r3, #4
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 0201 	bic.w	r2, r3, #1
 80033d8:	490b      	ldr	r1, [pc, #44]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d001      	beq.n	80033f2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800
 8003404:	40007000 	.word	0x40007000
 8003408:	40023c00 	.word	0x40023c00

0800340c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e03f      	b.n	800349e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fd06 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	; 0x24
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800344e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f905 	bl	8003660 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08a      	sub	sp, #40	; 0x28
 80034aa:	af02      	add	r7, sp, #8
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d17c      	bne.n	80035c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_UART_Transmit+0x2c>
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e075      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_UART_Transmit+0x3e>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e06e      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2221      	movs	r2, #33	; 0x21
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034fa:	f7fd fd71 	bl	8000fe0 <HAL_GetTick>
 80034fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003514:	d108      	bne.n	8003528 <HAL_UART_Transmit+0x82>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d104      	bne.n	8003528 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	e003      	b.n	8003530 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003538:	e02a      	b.n	8003590 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2200      	movs	r2, #0
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f840 	bl	80035ca <UART_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e036      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003568:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	3302      	adds	r3, #2
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	e007      	b.n	8003582 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	3301      	adds	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1cf      	bne.n	800353a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2140      	movs	r1, #64	; 0x40
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f810 	bl	80035ca <UART_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e006      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3720      	adds	r7, #32
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	4613      	mov	r3, r2
 80035d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	e02c      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e2:	d028      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0x30>
 80035ea:	f7fd fcf9 	bl	8000fe0 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d21d      	bcs.n	8003636 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003608:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e00f      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4013      	ands	r3, r2
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	bf0c      	ite	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	2300      	movne	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	429a      	cmp	r2, r3
 8003652:	d0c3      	beq.n	80035dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	4313      	orrs	r3, r2
 8003694:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036a0:	f023 030c 	bic.w	r3, r3, #12
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	430b      	orrs	r3, r1
 80036ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a55      	ldr	r2, [pc, #340]	; (8003820 <UART_SetConfig+0x1c0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d103      	bne.n	80036d6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036ce:	f7ff fe29 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	e002      	b.n	80036dc <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036d6:	f7ff fe11 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 80036da:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e4:	d14c      	bne.n	8003780 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	009a      	lsls	r2, r3, #2
 80036f0:	441a      	add	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	4a49      	ldr	r2, [pc, #292]	; (8003824 <UART_SetConfig+0x1c4>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	0119      	lsls	r1, r3, #4
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009a      	lsls	r2, r3, #2
 8003710:	441a      	add	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fbb2 f2f3 	udiv	r2, r2, r3
 800371c:	4b41      	ldr	r3, [pc, #260]	; (8003824 <UART_SetConfig+0x1c4>)
 800371e:	fba3 0302 	umull	r0, r3, r3, r2
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	2064      	movs	r0, #100	; 0x64
 8003726:	fb00 f303 	mul.w	r3, r0, r3
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	3332      	adds	r3, #50	; 0x32
 8003730:	4a3c      	ldr	r2, [pc, #240]	; (8003824 <UART_SetConfig+0x1c4>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800373e:	4419      	add	r1, r3
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	009a      	lsls	r2, r3, #2
 800374a:	441a      	add	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fbb2 f2f3 	udiv	r2, r2, r3
 8003756:	4b33      	ldr	r3, [pc, #204]	; (8003824 <UART_SetConfig+0x1c4>)
 8003758:	fba3 0302 	umull	r0, r3, r3, r2
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	2064      	movs	r0, #100	; 0x64
 8003760:	fb00 f303 	mul.w	r3, r0, r3
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	3332      	adds	r3, #50	; 0x32
 800376a:	4a2e      	ldr	r2, [pc, #184]	; (8003824 <UART_SetConfig+0x1c4>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	f003 0207 	and.w	r2, r3, #7
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	440a      	add	r2, r1
 800377c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800377e:	e04a      	b.n	8003816 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	009a      	lsls	r2, r3, #2
 800378a:	441a      	add	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	4a23      	ldr	r2, [pc, #140]	; (8003824 <UART_SetConfig+0x1c4>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	095b      	lsrs	r3, r3, #5
 800379e:	0119      	lsls	r1, r3, #4
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009a      	lsls	r2, r3, #2
 80037aa:	441a      	add	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b6:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <UART_SetConfig+0x1c4>)
 80037b8:	fba3 0302 	umull	r0, r3, r3, r2
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	2064      	movs	r0, #100	; 0x64
 80037c0:	fb00 f303 	mul.w	r3, r0, r3
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	3332      	adds	r3, #50	; 0x32
 80037ca:	4a16      	ldr	r2, [pc, #88]	; (8003824 <UART_SetConfig+0x1c4>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037d6:	4419      	add	r1, r3
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	009a      	lsls	r2, r3, #2
 80037e2:	441a      	add	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <UART_SetConfig+0x1c4>)
 80037f0:	fba3 0302 	umull	r0, r3, r3, r2
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	2064      	movs	r0, #100	; 0x64
 80037f8:	fb00 f303 	mul.w	r3, r0, r3
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	3332      	adds	r3, #50	; 0x32
 8003802:	4a08      	ldr	r2, [pc, #32]	; (8003824 <UART_SetConfig+0x1c4>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	f003 020f 	and.w	r2, r3, #15
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	440a      	add	r2, r1
 8003814:	609a      	str	r2, [r3, #8]
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40013800 	.word	0x40013800
 8003824:	51eb851f 	.word	0x51eb851f

08003828 <__errno>:
 8003828:	4b01      	ldr	r3, [pc, #4]	; (8003830 <__errno+0x8>)
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	2000000c 	.word	0x2000000c

08003834 <__libc_init_array>:
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	2600      	movs	r6, #0
 8003838:	4d0c      	ldr	r5, [pc, #48]	; (800386c <__libc_init_array+0x38>)
 800383a:	4c0d      	ldr	r4, [pc, #52]	; (8003870 <__libc_init_array+0x3c>)
 800383c:	1b64      	subs	r4, r4, r5
 800383e:	10a4      	asrs	r4, r4, #2
 8003840:	42a6      	cmp	r6, r4
 8003842:	d109      	bne.n	8003858 <__libc_init_array+0x24>
 8003844:	f000 fc5c 	bl	8004100 <_init>
 8003848:	2600      	movs	r6, #0
 800384a:	4d0a      	ldr	r5, [pc, #40]	; (8003874 <__libc_init_array+0x40>)
 800384c:	4c0a      	ldr	r4, [pc, #40]	; (8003878 <__libc_init_array+0x44>)
 800384e:	1b64      	subs	r4, r4, r5
 8003850:	10a4      	asrs	r4, r4, #2
 8003852:	42a6      	cmp	r6, r4
 8003854:	d105      	bne.n	8003862 <__libc_init_array+0x2e>
 8003856:	bd70      	pop	{r4, r5, r6, pc}
 8003858:	f855 3b04 	ldr.w	r3, [r5], #4
 800385c:	4798      	blx	r3
 800385e:	3601      	adds	r6, #1
 8003860:	e7ee      	b.n	8003840 <__libc_init_array+0xc>
 8003862:	f855 3b04 	ldr.w	r3, [r5], #4
 8003866:	4798      	blx	r3
 8003868:	3601      	adds	r6, #1
 800386a:	e7f2      	b.n	8003852 <__libc_init_array+0x1e>
 800386c:	080041c0 	.word	0x080041c0
 8003870:	080041c0 	.word	0x080041c0
 8003874:	080041c0 	.word	0x080041c0
 8003878:	080041c4 	.word	0x080041c4

0800387c <memset>:
 800387c:	4603      	mov	r3, r0
 800387e:	4402      	add	r2, r0
 8003880:	4293      	cmp	r3, r2
 8003882:	d100      	bne.n	8003886 <memset+0xa>
 8003884:	4770      	bx	lr
 8003886:	f803 1b01 	strb.w	r1, [r3], #1
 800388a:	e7f9      	b.n	8003880 <memset+0x4>

0800388c <siprintf>:
 800388c:	b40e      	push	{r1, r2, r3}
 800388e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003892:	b500      	push	{lr}
 8003894:	b09c      	sub	sp, #112	; 0x70
 8003896:	ab1d      	add	r3, sp, #116	; 0x74
 8003898:	9002      	str	r0, [sp, #8]
 800389a:	9006      	str	r0, [sp, #24]
 800389c:	9107      	str	r1, [sp, #28]
 800389e:	9104      	str	r1, [sp, #16]
 80038a0:	4808      	ldr	r0, [pc, #32]	; (80038c4 <siprintf+0x38>)
 80038a2:	4909      	ldr	r1, [pc, #36]	; (80038c8 <siprintf+0x3c>)
 80038a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038a8:	9105      	str	r1, [sp, #20]
 80038aa:	6800      	ldr	r0, [r0, #0]
 80038ac:	a902      	add	r1, sp, #8
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	f000 f868 	bl	8003984 <_svfiprintf_r>
 80038b4:	2200      	movs	r2, #0
 80038b6:	9b02      	ldr	r3, [sp, #8]
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	b01c      	add	sp, #112	; 0x70
 80038bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80038c0:	b003      	add	sp, #12
 80038c2:	4770      	bx	lr
 80038c4:	2000000c 	.word	0x2000000c
 80038c8:	ffff0208 	.word	0xffff0208

080038cc <__ssputs_r>:
 80038cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038d0:	688e      	ldr	r6, [r1, #8]
 80038d2:	4682      	mov	sl, r0
 80038d4:	429e      	cmp	r6, r3
 80038d6:	460c      	mov	r4, r1
 80038d8:	4690      	mov	r8, r2
 80038da:	461f      	mov	r7, r3
 80038dc:	d838      	bhi.n	8003950 <__ssputs_r+0x84>
 80038de:	898a      	ldrh	r2, [r1, #12]
 80038e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038e4:	d032      	beq.n	800394c <__ssputs_r+0x80>
 80038e6:	6825      	ldr	r5, [r4, #0]
 80038e8:	6909      	ldr	r1, [r1, #16]
 80038ea:	3301      	adds	r3, #1
 80038ec:	eba5 0901 	sub.w	r9, r5, r1
 80038f0:	6965      	ldr	r5, [r4, #20]
 80038f2:	444b      	add	r3, r9
 80038f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038fc:	106d      	asrs	r5, r5, #1
 80038fe:	429d      	cmp	r5, r3
 8003900:	bf38      	it	cc
 8003902:	461d      	movcc	r5, r3
 8003904:	0553      	lsls	r3, r2, #21
 8003906:	d531      	bpl.n	800396c <__ssputs_r+0xa0>
 8003908:	4629      	mov	r1, r5
 800390a:	f000 fb53 	bl	8003fb4 <_malloc_r>
 800390e:	4606      	mov	r6, r0
 8003910:	b950      	cbnz	r0, 8003928 <__ssputs_r+0x5c>
 8003912:	230c      	movs	r3, #12
 8003914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003918:	f8ca 3000 	str.w	r3, [sl]
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003922:	81a3      	strh	r3, [r4, #12]
 8003924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003928:	464a      	mov	r2, r9
 800392a:	6921      	ldr	r1, [r4, #16]
 800392c:	f000 face 	bl	8003ecc <memcpy>
 8003930:	89a3      	ldrh	r3, [r4, #12]
 8003932:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393a:	81a3      	strh	r3, [r4, #12]
 800393c:	6126      	str	r6, [r4, #16]
 800393e:	444e      	add	r6, r9
 8003940:	6026      	str	r6, [r4, #0]
 8003942:	463e      	mov	r6, r7
 8003944:	6165      	str	r5, [r4, #20]
 8003946:	eba5 0509 	sub.w	r5, r5, r9
 800394a:	60a5      	str	r5, [r4, #8]
 800394c:	42be      	cmp	r6, r7
 800394e:	d900      	bls.n	8003952 <__ssputs_r+0x86>
 8003950:	463e      	mov	r6, r7
 8003952:	4632      	mov	r2, r6
 8003954:	4641      	mov	r1, r8
 8003956:	6820      	ldr	r0, [r4, #0]
 8003958:	f000 fac6 	bl	8003ee8 <memmove>
 800395c:	68a3      	ldr	r3, [r4, #8]
 800395e:	6822      	ldr	r2, [r4, #0]
 8003960:	1b9b      	subs	r3, r3, r6
 8003962:	4432      	add	r2, r6
 8003964:	2000      	movs	r0, #0
 8003966:	60a3      	str	r3, [r4, #8]
 8003968:	6022      	str	r2, [r4, #0]
 800396a:	e7db      	b.n	8003924 <__ssputs_r+0x58>
 800396c:	462a      	mov	r2, r5
 800396e:	f000 fb7b 	bl	8004068 <_realloc_r>
 8003972:	4606      	mov	r6, r0
 8003974:	2800      	cmp	r0, #0
 8003976:	d1e1      	bne.n	800393c <__ssputs_r+0x70>
 8003978:	4650      	mov	r0, sl
 800397a:	6921      	ldr	r1, [r4, #16]
 800397c:	f000 face 	bl	8003f1c <_free_r>
 8003980:	e7c7      	b.n	8003912 <__ssputs_r+0x46>
	...

08003984 <_svfiprintf_r>:
 8003984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003988:	4698      	mov	r8, r3
 800398a:	898b      	ldrh	r3, [r1, #12]
 800398c:	4607      	mov	r7, r0
 800398e:	061b      	lsls	r3, r3, #24
 8003990:	460d      	mov	r5, r1
 8003992:	4614      	mov	r4, r2
 8003994:	b09d      	sub	sp, #116	; 0x74
 8003996:	d50e      	bpl.n	80039b6 <_svfiprintf_r+0x32>
 8003998:	690b      	ldr	r3, [r1, #16]
 800399a:	b963      	cbnz	r3, 80039b6 <_svfiprintf_r+0x32>
 800399c:	2140      	movs	r1, #64	; 0x40
 800399e:	f000 fb09 	bl	8003fb4 <_malloc_r>
 80039a2:	6028      	str	r0, [r5, #0]
 80039a4:	6128      	str	r0, [r5, #16]
 80039a6:	b920      	cbnz	r0, 80039b2 <_svfiprintf_r+0x2e>
 80039a8:	230c      	movs	r3, #12
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039b0:	e0d1      	b.n	8003b56 <_svfiprintf_r+0x1d2>
 80039b2:	2340      	movs	r3, #64	; 0x40
 80039b4:	616b      	str	r3, [r5, #20]
 80039b6:	2300      	movs	r3, #0
 80039b8:	9309      	str	r3, [sp, #36]	; 0x24
 80039ba:	2320      	movs	r3, #32
 80039bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039c0:	2330      	movs	r3, #48	; 0x30
 80039c2:	f04f 0901 	mov.w	r9, #1
 80039c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80039ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b70 <_svfiprintf_r+0x1ec>
 80039ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039d2:	4623      	mov	r3, r4
 80039d4:	469a      	mov	sl, r3
 80039d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039da:	b10a      	cbz	r2, 80039e0 <_svfiprintf_r+0x5c>
 80039dc:	2a25      	cmp	r2, #37	; 0x25
 80039de:	d1f9      	bne.n	80039d4 <_svfiprintf_r+0x50>
 80039e0:	ebba 0b04 	subs.w	fp, sl, r4
 80039e4:	d00b      	beq.n	80039fe <_svfiprintf_r+0x7a>
 80039e6:	465b      	mov	r3, fp
 80039e8:	4622      	mov	r2, r4
 80039ea:	4629      	mov	r1, r5
 80039ec:	4638      	mov	r0, r7
 80039ee:	f7ff ff6d 	bl	80038cc <__ssputs_r>
 80039f2:	3001      	adds	r0, #1
 80039f4:	f000 80aa 	beq.w	8003b4c <_svfiprintf_r+0x1c8>
 80039f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039fa:	445a      	add	r2, fp
 80039fc:	9209      	str	r2, [sp, #36]	; 0x24
 80039fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 80a2 	beq.w	8003b4c <_svfiprintf_r+0x1c8>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a12:	f10a 0a01 	add.w	sl, sl, #1
 8003a16:	9304      	str	r3, [sp, #16]
 8003a18:	9307      	str	r3, [sp, #28]
 8003a1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a1e:	931a      	str	r3, [sp, #104]	; 0x68
 8003a20:	4654      	mov	r4, sl
 8003a22:	2205      	movs	r2, #5
 8003a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a28:	4851      	ldr	r0, [pc, #324]	; (8003b70 <_svfiprintf_r+0x1ec>)
 8003a2a:	f000 fa41 	bl	8003eb0 <memchr>
 8003a2e:	9a04      	ldr	r2, [sp, #16]
 8003a30:	b9d8      	cbnz	r0, 8003a6a <_svfiprintf_r+0xe6>
 8003a32:	06d0      	lsls	r0, r2, #27
 8003a34:	bf44      	itt	mi
 8003a36:	2320      	movmi	r3, #32
 8003a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a3c:	0711      	lsls	r1, r2, #28
 8003a3e:	bf44      	itt	mi
 8003a40:	232b      	movmi	r3, #43	; 0x2b
 8003a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a46:	f89a 3000 	ldrb.w	r3, [sl]
 8003a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a4c:	d015      	beq.n	8003a7a <_svfiprintf_r+0xf6>
 8003a4e:	4654      	mov	r4, sl
 8003a50:	2000      	movs	r0, #0
 8003a52:	f04f 0c0a 	mov.w	ip, #10
 8003a56:	9a07      	ldr	r2, [sp, #28]
 8003a58:	4621      	mov	r1, r4
 8003a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a5e:	3b30      	subs	r3, #48	; 0x30
 8003a60:	2b09      	cmp	r3, #9
 8003a62:	d94e      	bls.n	8003b02 <_svfiprintf_r+0x17e>
 8003a64:	b1b0      	cbz	r0, 8003a94 <_svfiprintf_r+0x110>
 8003a66:	9207      	str	r2, [sp, #28]
 8003a68:	e014      	b.n	8003a94 <_svfiprintf_r+0x110>
 8003a6a:	eba0 0308 	sub.w	r3, r0, r8
 8003a6e:	fa09 f303 	lsl.w	r3, r9, r3
 8003a72:	4313      	orrs	r3, r2
 8003a74:	46a2      	mov	sl, r4
 8003a76:	9304      	str	r3, [sp, #16]
 8003a78:	e7d2      	b.n	8003a20 <_svfiprintf_r+0x9c>
 8003a7a:	9b03      	ldr	r3, [sp, #12]
 8003a7c:	1d19      	adds	r1, r3, #4
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	9103      	str	r1, [sp, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	bfbb      	ittet	lt
 8003a86:	425b      	neglt	r3, r3
 8003a88:	f042 0202 	orrlt.w	r2, r2, #2
 8003a8c:	9307      	strge	r3, [sp, #28]
 8003a8e:	9307      	strlt	r3, [sp, #28]
 8003a90:	bfb8      	it	lt
 8003a92:	9204      	strlt	r2, [sp, #16]
 8003a94:	7823      	ldrb	r3, [r4, #0]
 8003a96:	2b2e      	cmp	r3, #46	; 0x2e
 8003a98:	d10c      	bne.n	8003ab4 <_svfiprintf_r+0x130>
 8003a9a:	7863      	ldrb	r3, [r4, #1]
 8003a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a9e:	d135      	bne.n	8003b0c <_svfiprintf_r+0x188>
 8003aa0:	9b03      	ldr	r3, [sp, #12]
 8003aa2:	3402      	adds	r4, #2
 8003aa4:	1d1a      	adds	r2, r3, #4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	9203      	str	r2, [sp, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bfb8      	it	lt
 8003aae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ab2:	9305      	str	r3, [sp, #20]
 8003ab4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b80 <_svfiprintf_r+0x1fc>
 8003ab8:	2203      	movs	r2, #3
 8003aba:	4650      	mov	r0, sl
 8003abc:	7821      	ldrb	r1, [r4, #0]
 8003abe:	f000 f9f7 	bl	8003eb0 <memchr>
 8003ac2:	b140      	cbz	r0, 8003ad6 <_svfiprintf_r+0x152>
 8003ac4:	2340      	movs	r3, #64	; 0x40
 8003ac6:	eba0 000a 	sub.w	r0, r0, sl
 8003aca:	fa03 f000 	lsl.w	r0, r3, r0
 8003ace:	9b04      	ldr	r3, [sp, #16]
 8003ad0:	3401      	adds	r4, #1
 8003ad2:	4303      	orrs	r3, r0
 8003ad4:	9304      	str	r3, [sp, #16]
 8003ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ada:	2206      	movs	r2, #6
 8003adc:	4825      	ldr	r0, [pc, #148]	; (8003b74 <_svfiprintf_r+0x1f0>)
 8003ade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ae2:	f000 f9e5 	bl	8003eb0 <memchr>
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	d038      	beq.n	8003b5c <_svfiprintf_r+0x1d8>
 8003aea:	4b23      	ldr	r3, [pc, #140]	; (8003b78 <_svfiprintf_r+0x1f4>)
 8003aec:	bb1b      	cbnz	r3, 8003b36 <_svfiprintf_r+0x1b2>
 8003aee:	9b03      	ldr	r3, [sp, #12]
 8003af0:	3307      	adds	r3, #7
 8003af2:	f023 0307 	bic.w	r3, r3, #7
 8003af6:	3308      	adds	r3, #8
 8003af8:	9303      	str	r3, [sp, #12]
 8003afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003afc:	4433      	add	r3, r6
 8003afe:	9309      	str	r3, [sp, #36]	; 0x24
 8003b00:	e767      	b.n	80039d2 <_svfiprintf_r+0x4e>
 8003b02:	460c      	mov	r4, r1
 8003b04:	2001      	movs	r0, #1
 8003b06:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b0a:	e7a5      	b.n	8003a58 <_svfiprintf_r+0xd4>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f04f 0c0a 	mov.w	ip, #10
 8003b12:	4619      	mov	r1, r3
 8003b14:	3401      	adds	r4, #1
 8003b16:	9305      	str	r3, [sp, #20]
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b1e:	3a30      	subs	r2, #48	; 0x30
 8003b20:	2a09      	cmp	r2, #9
 8003b22:	d903      	bls.n	8003b2c <_svfiprintf_r+0x1a8>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0c5      	beq.n	8003ab4 <_svfiprintf_r+0x130>
 8003b28:	9105      	str	r1, [sp, #20]
 8003b2a:	e7c3      	b.n	8003ab4 <_svfiprintf_r+0x130>
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	2301      	movs	r3, #1
 8003b30:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b34:	e7f0      	b.n	8003b18 <_svfiprintf_r+0x194>
 8003b36:	ab03      	add	r3, sp, #12
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	462a      	mov	r2, r5
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <_svfiprintf_r+0x1f8>)
 8003b40:	a904      	add	r1, sp, #16
 8003b42:	f3af 8000 	nop.w
 8003b46:	1c42      	adds	r2, r0, #1
 8003b48:	4606      	mov	r6, r0
 8003b4a:	d1d6      	bne.n	8003afa <_svfiprintf_r+0x176>
 8003b4c:	89ab      	ldrh	r3, [r5, #12]
 8003b4e:	065b      	lsls	r3, r3, #25
 8003b50:	f53f af2c 	bmi.w	80039ac <_svfiprintf_r+0x28>
 8003b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b56:	b01d      	add	sp, #116	; 0x74
 8003b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b5c:	ab03      	add	r3, sp, #12
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	462a      	mov	r2, r5
 8003b62:	4638      	mov	r0, r7
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <_svfiprintf_r+0x1f8>)
 8003b66:	a904      	add	r1, sp, #16
 8003b68:	f000 f87c 	bl	8003c64 <_printf_i>
 8003b6c:	e7eb      	b.n	8003b46 <_svfiprintf_r+0x1c2>
 8003b6e:	bf00      	nop
 8003b70:	08004184 	.word	0x08004184
 8003b74:	0800418e 	.word	0x0800418e
 8003b78:	00000000 	.word	0x00000000
 8003b7c:	080038cd 	.word	0x080038cd
 8003b80:	0800418a 	.word	0x0800418a

08003b84 <_printf_common>:
 8003b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b88:	4616      	mov	r6, r2
 8003b8a:	4699      	mov	r9, r3
 8003b8c:	688a      	ldr	r2, [r1, #8]
 8003b8e:	690b      	ldr	r3, [r1, #16]
 8003b90:	4607      	mov	r7, r0
 8003b92:	4293      	cmp	r3, r2
 8003b94:	bfb8      	it	lt
 8003b96:	4613      	movlt	r3, r2
 8003b98:	6033      	str	r3, [r6, #0]
 8003b9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ba4:	b10a      	cbz	r2, 8003baa <_printf_common+0x26>
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	6033      	str	r3, [r6, #0]
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	0699      	lsls	r1, r3, #26
 8003bae:	bf42      	ittt	mi
 8003bb0:	6833      	ldrmi	r3, [r6, #0]
 8003bb2:	3302      	addmi	r3, #2
 8003bb4:	6033      	strmi	r3, [r6, #0]
 8003bb6:	6825      	ldr	r5, [r4, #0]
 8003bb8:	f015 0506 	ands.w	r5, r5, #6
 8003bbc:	d106      	bne.n	8003bcc <_printf_common+0x48>
 8003bbe:	f104 0a19 	add.w	sl, r4, #25
 8003bc2:	68e3      	ldr	r3, [r4, #12]
 8003bc4:	6832      	ldr	r2, [r6, #0]
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	42ab      	cmp	r3, r5
 8003bca:	dc28      	bgt.n	8003c1e <_printf_common+0x9a>
 8003bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bd0:	1e13      	subs	r3, r2, #0
 8003bd2:	6822      	ldr	r2, [r4, #0]
 8003bd4:	bf18      	it	ne
 8003bd6:	2301      	movne	r3, #1
 8003bd8:	0692      	lsls	r2, r2, #26
 8003bda:	d42d      	bmi.n	8003c38 <_printf_common+0xb4>
 8003bdc:	4649      	mov	r1, r9
 8003bde:	4638      	mov	r0, r7
 8003be0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003be4:	47c0      	blx	r8
 8003be6:	3001      	adds	r0, #1
 8003be8:	d020      	beq.n	8003c2c <_printf_common+0xa8>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	68e5      	ldr	r5, [r4, #12]
 8003bee:	f003 0306 	and.w	r3, r3, #6
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	bf18      	it	ne
 8003bf6:	2500      	movne	r5, #0
 8003bf8:	6832      	ldr	r2, [r6, #0]
 8003bfa:	f04f 0600 	mov.w	r6, #0
 8003bfe:	68a3      	ldr	r3, [r4, #8]
 8003c00:	bf08      	it	eq
 8003c02:	1aad      	subeq	r5, r5, r2
 8003c04:	6922      	ldr	r2, [r4, #16]
 8003c06:	bf08      	it	eq
 8003c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	bfc4      	itt	gt
 8003c10:	1a9b      	subgt	r3, r3, r2
 8003c12:	18ed      	addgt	r5, r5, r3
 8003c14:	341a      	adds	r4, #26
 8003c16:	42b5      	cmp	r5, r6
 8003c18:	d11a      	bne.n	8003c50 <_printf_common+0xcc>
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	e008      	b.n	8003c30 <_printf_common+0xac>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	4652      	mov	r2, sl
 8003c22:	4649      	mov	r1, r9
 8003c24:	4638      	mov	r0, r7
 8003c26:	47c0      	blx	r8
 8003c28:	3001      	adds	r0, #1
 8003c2a:	d103      	bne.n	8003c34 <_printf_common+0xb0>
 8003c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c34:	3501      	adds	r5, #1
 8003c36:	e7c4      	b.n	8003bc2 <_printf_common+0x3e>
 8003c38:	2030      	movs	r0, #48	; 0x30
 8003c3a:	18e1      	adds	r1, r4, r3
 8003c3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c46:	4422      	add	r2, r4
 8003c48:	3302      	adds	r3, #2
 8003c4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c4e:	e7c5      	b.n	8003bdc <_printf_common+0x58>
 8003c50:	2301      	movs	r3, #1
 8003c52:	4622      	mov	r2, r4
 8003c54:	4649      	mov	r1, r9
 8003c56:	4638      	mov	r0, r7
 8003c58:	47c0      	blx	r8
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	d0e6      	beq.n	8003c2c <_printf_common+0xa8>
 8003c5e:	3601      	adds	r6, #1
 8003c60:	e7d9      	b.n	8003c16 <_printf_common+0x92>
	...

08003c64 <_printf_i>:
 8003c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c68:	460c      	mov	r4, r1
 8003c6a:	7e27      	ldrb	r7, [r4, #24]
 8003c6c:	4691      	mov	r9, r2
 8003c6e:	2f78      	cmp	r7, #120	; 0x78
 8003c70:	4680      	mov	r8, r0
 8003c72:	469a      	mov	sl, r3
 8003c74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c7a:	d807      	bhi.n	8003c8c <_printf_i+0x28>
 8003c7c:	2f62      	cmp	r7, #98	; 0x62
 8003c7e:	d80a      	bhi.n	8003c96 <_printf_i+0x32>
 8003c80:	2f00      	cmp	r7, #0
 8003c82:	f000 80d9 	beq.w	8003e38 <_printf_i+0x1d4>
 8003c86:	2f58      	cmp	r7, #88	; 0x58
 8003c88:	f000 80a4 	beq.w	8003dd4 <_printf_i+0x170>
 8003c8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c94:	e03a      	b.n	8003d0c <_printf_i+0xa8>
 8003c96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c9a:	2b15      	cmp	r3, #21
 8003c9c:	d8f6      	bhi.n	8003c8c <_printf_i+0x28>
 8003c9e:	a001      	add	r0, pc, #4	; (adr r0, 8003ca4 <_printf_i+0x40>)
 8003ca0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ca4:	08003cfd 	.word	0x08003cfd
 8003ca8:	08003d11 	.word	0x08003d11
 8003cac:	08003c8d 	.word	0x08003c8d
 8003cb0:	08003c8d 	.word	0x08003c8d
 8003cb4:	08003c8d 	.word	0x08003c8d
 8003cb8:	08003c8d 	.word	0x08003c8d
 8003cbc:	08003d11 	.word	0x08003d11
 8003cc0:	08003c8d 	.word	0x08003c8d
 8003cc4:	08003c8d 	.word	0x08003c8d
 8003cc8:	08003c8d 	.word	0x08003c8d
 8003ccc:	08003c8d 	.word	0x08003c8d
 8003cd0:	08003e1f 	.word	0x08003e1f
 8003cd4:	08003d41 	.word	0x08003d41
 8003cd8:	08003e01 	.word	0x08003e01
 8003cdc:	08003c8d 	.word	0x08003c8d
 8003ce0:	08003c8d 	.word	0x08003c8d
 8003ce4:	08003e41 	.word	0x08003e41
 8003ce8:	08003c8d 	.word	0x08003c8d
 8003cec:	08003d41 	.word	0x08003d41
 8003cf0:	08003c8d 	.word	0x08003c8d
 8003cf4:	08003c8d 	.word	0x08003c8d
 8003cf8:	08003e09 	.word	0x08003e09
 8003cfc:	680b      	ldr	r3, [r1, #0]
 8003cfe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d02:	1d1a      	adds	r2, r3, #4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	600a      	str	r2, [r1, #0]
 8003d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0a4      	b.n	8003e5a <_printf_i+0x1f6>
 8003d10:	6825      	ldr	r5, [r4, #0]
 8003d12:	6808      	ldr	r0, [r1, #0]
 8003d14:	062e      	lsls	r6, r5, #24
 8003d16:	f100 0304 	add.w	r3, r0, #4
 8003d1a:	d50a      	bpl.n	8003d32 <_printf_i+0xce>
 8003d1c:	6805      	ldr	r5, [r0, #0]
 8003d1e:	600b      	str	r3, [r1, #0]
 8003d20:	2d00      	cmp	r5, #0
 8003d22:	da03      	bge.n	8003d2c <_printf_i+0xc8>
 8003d24:	232d      	movs	r3, #45	; 0x2d
 8003d26:	426d      	negs	r5, r5
 8003d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d2c:	230a      	movs	r3, #10
 8003d2e:	485e      	ldr	r0, [pc, #376]	; (8003ea8 <_printf_i+0x244>)
 8003d30:	e019      	b.n	8003d66 <_printf_i+0x102>
 8003d32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d36:	6805      	ldr	r5, [r0, #0]
 8003d38:	600b      	str	r3, [r1, #0]
 8003d3a:	bf18      	it	ne
 8003d3c:	b22d      	sxthne	r5, r5
 8003d3e:	e7ef      	b.n	8003d20 <_printf_i+0xbc>
 8003d40:	680b      	ldr	r3, [r1, #0]
 8003d42:	6825      	ldr	r5, [r4, #0]
 8003d44:	1d18      	adds	r0, r3, #4
 8003d46:	6008      	str	r0, [r1, #0]
 8003d48:	0628      	lsls	r0, r5, #24
 8003d4a:	d501      	bpl.n	8003d50 <_printf_i+0xec>
 8003d4c:	681d      	ldr	r5, [r3, #0]
 8003d4e:	e002      	b.n	8003d56 <_printf_i+0xf2>
 8003d50:	0669      	lsls	r1, r5, #25
 8003d52:	d5fb      	bpl.n	8003d4c <_printf_i+0xe8>
 8003d54:	881d      	ldrh	r5, [r3, #0]
 8003d56:	2f6f      	cmp	r7, #111	; 0x6f
 8003d58:	bf0c      	ite	eq
 8003d5a:	2308      	moveq	r3, #8
 8003d5c:	230a      	movne	r3, #10
 8003d5e:	4852      	ldr	r0, [pc, #328]	; (8003ea8 <_printf_i+0x244>)
 8003d60:	2100      	movs	r1, #0
 8003d62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d66:	6866      	ldr	r6, [r4, #4]
 8003d68:	2e00      	cmp	r6, #0
 8003d6a:	bfa8      	it	ge
 8003d6c:	6821      	ldrge	r1, [r4, #0]
 8003d6e:	60a6      	str	r6, [r4, #8]
 8003d70:	bfa4      	itt	ge
 8003d72:	f021 0104 	bicge.w	r1, r1, #4
 8003d76:	6021      	strge	r1, [r4, #0]
 8003d78:	b90d      	cbnz	r5, 8003d7e <_printf_i+0x11a>
 8003d7a:	2e00      	cmp	r6, #0
 8003d7c:	d04d      	beq.n	8003e1a <_printf_i+0x1b6>
 8003d7e:	4616      	mov	r6, r2
 8003d80:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d84:	fb03 5711 	mls	r7, r3, r1, r5
 8003d88:	5dc7      	ldrb	r7, [r0, r7]
 8003d8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d8e:	462f      	mov	r7, r5
 8003d90:	42bb      	cmp	r3, r7
 8003d92:	460d      	mov	r5, r1
 8003d94:	d9f4      	bls.n	8003d80 <_printf_i+0x11c>
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d10b      	bne.n	8003db2 <_printf_i+0x14e>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	07df      	lsls	r7, r3, #31
 8003d9e:	d508      	bpl.n	8003db2 <_printf_i+0x14e>
 8003da0:	6923      	ldr	r3, [r4, #16]
 8003da2:	6861      	ldr	r1, [r4, #4]
 8003da4:	4299      	cmp	r1, r3
 8003da6:	bfde      	ittt	le
 8003da8:	2330      	movle	r3, #48	; 0x30
 8003daa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dae:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003db2:	1b92      	subs	r2, r2, r6
 8003db4:	6122      	str	r2, [r4, #16]
 8003db6:	464b      	mov	r3, r9
 8003db8:	4621      	mov	r1, r4
 8003dba:	4640      	mov	r0, r8
 8003dbc:	f8cd a000 	str.w	sl, [sp]
 8003dc0:	aa03      	add	r2, sp, #12
 8003dc2:	f7ff fedf 	bl	8003b84 <_printf_common>
 8003dc6:	3001      	adds	r0, #1
 8003dc8:	d14c      	bne.n	8003e64 <_printf_i+0x200>
 8003dca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dce:	b004      	add	sp, #16
 8003dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd4:	4834      	ldr	r0, [pc, #208]	; (8003ea8 <_printf_i+0x244>)
 8003dd6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003dda:	680e      	ldr	r6, [r1, #0]
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	f856 5b04 	ldr.w	r5, [r6], #4
 8003de2:	061f      	lsls	r7, r3, #24
 8003de4:	600e      	str	r6, [r1, #0]
 8003de6:	d514      	bpl.n	8003e12 <_printf_i+0x1ae>
 8003de8:	07d9      	lsls	r1, r3, #31
 8003dea:	bf44      	itt	mi
 8003dec:	f043 0320 	orrmi.w	r3, r3, #32
 8003df0:	6023      	strmi	r3, [r4, #0]
 8003df2:	b91d      	cbnz	r5, 8003dfc <_printf_i+0x198>
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	f023 0320 	bic.w	r3, r3, #32
 8003dfa:	6023      	str	r3, [r4, #0]
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	e7af      	b.n	8003d60 <_printf_i+0xfc>
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	f043 0320 	orr.w	r3, r3, #32
 8003e06:	6023      	str	r3, [r4, #0]
 8003e08:	2378      	movs	r3, #120	; 0x78
 8003e0a:	4828      	ldr	r0, [pc, #160]	; (8003eac <_printf_i+0x248>)
 8003e0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e10:	e7e3      	b.n	8003dda <_printf_i+0x176>
 8003e12:	065e      	lsls	r6, r3, #25
 8003e14:	bf48      	it	mi
 8003e16:	b2ad      	uxthmi	r5, r5
 8003e18:	e7e6      	b.n	8003de8 <_printf_i+0x184>
 8003e1a:	4616      	mov	r6, r2
 8003e1c:	e7bb      	b.n	8003d96 <_printf_i+0x132>
 8003e1e:	680b      	ldr	r3, [r1, #0]
 8003e20:	6826      	ldr	r6, [r4, #0]
 8003e22:	1d1d      	adds	r5, r3, #4
 8003e24:	6960      	ldr	r0, [r4, #20]
 8003e26:	600d      	str	r5, [r1, #0]
 8003e28:	0635      	lsls	r5, r6, #24
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	d501      	bpl.n	8003e32 <_printf_i+0x1ce>
 8003e2e:	6018      	str	r0, [r3, #0]
 8003e30:	e002      	b.n	8003e38 <_printf_i+0x1d4>
 8003e32:	0671      	lsls	r1, r6, #25
 8003e34:	d5fb      	bpl.n	8003e2e <_printf_i+0x1ca>
 8003e36:	8018      	strh	r0, [r3, #0]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	4616      	mov	r6, r2
 8003e3c:	6123      	str	r3, [r4, #16]
 8003e3e:	e7ba      	b.n	8003db6 <_printf_i+0x152>
 8003e40:	680b      	ldr	r3, [r1, #0]
 8003e42:	1d1a      	adds	r2, r3, #4
 8003e44:	600a      	str	r2, [r1, #0]
 8003e46:	681e      	ldr	r6, [r3, #0]
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	6862      	ldr	r2, [r4, #4]
 8003e4e:	f000 f82f 	bl	8003eb0 <memchr>
 8003e52:	b108      	cbz	r0, 8003e58 <_printf_i+0x1f4>
 8003e54:	1b80      	subs	r0, r0, r6
 8003e56:	6060      	str	r0, [r4, #4]
 8003e58:	6863      	ldr	r3, [r4, #4]
 8003e5a:	6123      	str	r3, [r4, #16]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e62:	e7a8      	b.n	8003db6 <_printf_i+0x152>
 8003e64:	4632      	mov	r2, r6
 8003e66:	4649      	mov	r1, r9
 8003e68:	4640      	mov	r0, r8
 8003e6a:	6923      	ldr	r3, [r4, #16]
 8003e6c:	47d0      	blx	sl
 8003e6e:	3001      	adds	r0, #1
 8003e70:	d0ab      	beq.n	8003dca <_printf_i+0x166>
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	079b      	lsls	r3, r3, #30
 8003e76:	d413      	bmi.n	8003ea0 <_printf_i+0x23c>
 8003e78:	68e0      	ldr	r0, [r4, #12]
 8003e7a:	9b03      	ldr	r3, [sp, #12]
 8003e7c:	4298      	cmp	r0, r3
 8003e7e:	bfb8      	it	lt
 8003e80:	4618      	movlt	r0, r3
 8003e82:	e7a4      	b.n	8003dce <_printf_i+0x16a>
 8003e84:	2301      	movs	r3, #1
 8003e86:	4632      	mov	r2, r6
 8003e88:	4649      	mov	r1, r9
 8003e8a:	4640      	mov	r0, r8
 8003e8c:	47d0      	blx	sl
 8003e8e:	3001      	adds	r0, #1
 8003e90:	d09b      	beq.n	8003dca <_printf_i+0x166>
 8003e92:	3501      	adds	r5, #1
 8003e94:	68e3      	ldr	r3, [r4, #12]
 8003e96:	9903      	ldr	r1, [sp, #12]
 8003e98:	1a5b      	subs	r3, r3, r1
 8003e9a:	42ab      	cmp	r3, r5
 8003e9c:	dcf2      	bgt.n	8003e84 <_printf_i+0x220>
 8003e9e:	e7eb      	b.n	8003e78 <_printf_i+0x214>
 8003ea0:	2500      	movs	r5, #0
 8003ea2:	f104 0619 	add.w	r6, r4, #25
 8003ea6:	e7f5      	b.n	8003e94 <_printf_i+0x230>
 8003ea8:	08004195 	.word	0x08004195
 8003eac:	080041a6 	.word	0x080041a6

08003eb0 <memchr>:
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	b510      	push	{r4, lr}
 8003eb4:	b2c9      	uxtb	r1, r1
 8003eb6:	4402      	add	r2, r0
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	d101      	bne.n	8003ec2 <memchr+0x12>
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	e003      	b.n	8003eca <memchr+0x1a>
 8003ec2:	7804      	ldrb	r4, [r0, #0]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	428c      	cmp	r4, r1
 8003ec8:	d1f6      	bne.n	8003eb8 <memchr+0x8>
 8003eca:	bd10      	pop	{r4, pc}

08003ecc <memcpy>:
 8003ecc:	440a      	add	r2, r1
 8003ece:	4291      	cmp	r1, r2
 8003ed0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003ed4:	d100      	bne.n	8003ed8 <memcpy+0xc>
 8003ed6:	4770      	bx	lr
 8003ed8:	b510      	push	{r4, lr}
 8003eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ede:	4291      	cmp	r1, r2
 8003ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ee4:	d1f9      	bne.n	8003eda <memcpy+0xe>
 8003ee6:	bd10      	pop	{r4, pc}

08003ee8 <memmove>:
 8003ee8:	4288      	cmp	r0, r1
 8003eea:	b510      	push	{r4, lr}
 8003eec:	eb01 0402 	add.w	r4, r1, r2
 8003ef0:	d902      	bls.n	8003ef8 <memmove+0x10>
 8003ef2:	4284      	cmp	r4, r0
 8003ef4:	4623      	mov	r3, r4
 8003ef6:	d807      	bhi.n	8003f08 <memmove+0x20>
 8003ef8:	1e43      	subs	r3, r0, #1
 8003efa:	42a1      	cmp	r1, r4
 8003efc:	d008      	beq.n	8003f10 <memmove+0x28>
 8003efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f06:	e7f8      	b.n	8003efa <memmove+0x12>
 8003f08:	4601      	mov	r1, r0
 8003f0a:	4402      	add	r2, r0
 8003f0c:	428a      	cmp	r2, r1
 8003f0e:	d100      	bne.n	8003f12 <memmove+0x2a>
 8003f10:	bd10      	pop	{r4, pc}
 8003f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f1a:	e7f7      	b.n	8003f0c <memmove+0x24>

08003f1c <_free_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	4605      	mov	r5, r0
 8003f20:	2900      	cmp	r1, #0
 8003f22:	d043      	beq.n	8003fac <_free_r+0x90>
 8003f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f28:	1f0c      	subs	r4, r1, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	bfb8      	it	lt
 8003f2e:	18e4      	addlt	r4, r4, r3
 8003f30:	f000 f8d0 	bl	80040d4 <__malloc_lock>
 8003f34:	4a1e      	ldr	r2, [pc, #120]	; (8003fb0 <_free_r+0x94>)
 8003f36:	6813      	ldr	r3, [r2, #0]
 8003f38:	4610      	mov	r0, r2
 8003f3a:	b933      	cbnz	r3, 8003f4a <_free_r+0x2e>
 8003f3c:	6063      	str	r3, [r4, #4]
 8003f3e:	6014      	str	r4, [r2, #0]
 8003f40:	4628      	mov	r0, r5
 8003f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f46:	f000 b8cb 	b.w	80040e0 <__malloc_unlock>
 8003f4a:	42a3      	cmp	r3, r4
 8003f4c:	d90a      	bls.n	8003f64 <_free_r+0x48>
 8003f4e:	6821      	ldr	r1, [r4, #0]
 8003f50:	1862      	adds	r2, r4, r1
 8003f52:	4293      	cmp	r3, r2
 8003f54:	bf01      	itttt	eq
 8003f56:	681a      	ldreq	r2, [r3, #0]
 8003f58:	685b      	ldreq	r3, [r3, #4]
 8003f5a:	1852      	addeq	r2, r2, r1
 8003f5c:	6022      	streq	r2, [r4, #0]
 8003f5e:	6063      	str	r3, [r4, #4]
 8003f60:	6004      	str	r4, [r0, #0]
 8003f62:	e7ed      	b.n	8003f40 <_free_r+0x24>
 8003f64:	461a      	mov	r2, r3
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	b10b      	cbz	r3, 8003f6e <_free_r+0x52>
 8003f6a:	42a3      	cmp	r3, r4
 8003f6c:	d9fa      	bls.n	8003f64 <_free_r+0x48>
 8003f6e:	6811      	ldr	r1, [r2, #0]
 8003f70:	1850      	adds	r0, r2, r1
 8003f72:	42a0      	cmp	r0, r4
 8003f74:	d10b      	bne.n	8003f8e <_free_r+0x72>
 8003f76:	6820      	ldr	r0, [r4, #0]
 8003f78:	4401      	add	r1, r0
 8003f7a:	1850      	adds	r0, r2, r1
 8003f7c:	4283      	cmp	r3, r0
 8003f7e:	6011      	str	r1, [r2, #0]
 8003f80:	d1de      	bne.n	8003f40 <_free_r+0x24>
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4401      	add	r1, r0
 8003f88:	6011      	str	r1, [r2, #0]
 8003f8a:	6053      	str	r3, [r2, #4]
 8003f8c:	e7d8      	b.n	8003f40 <_free_r+0x24>
 8003f8e:	d902      	bls.n	8003f96 <_free_r+0x7a>
 8003f90:	230c      	movs	r3, #12
 8003f92:	602b      	str	r3, [r5, #0]
 8003f94:	e7d4      	b.n	8003f40 <_free_r+0x24>
 8003f96:	6820      	ldr	r0, [r4, #0]
 8003f98:	1821      	adds	r1, r4, r0
 8003f9a:	428b      	cmp	r3, r1
 8003f9c:	bf01      	itttt	eq
 8003f9e:	6819      	ldreq	r1, [r3, #0]
 8003fa0:	685b      	ldreq	r3, [r3, #4]
 8003fa2:	1809      	addeq	r1, r1, r0
 8003fa4:	6021      	streq	r1, [r4, #0]
 8003fa6:	6063      	str	r3, [r4, #4]
 8003fa8:	6054      	str	r4, [r2, #4]
 8003faa:	e7c9      	b.n	8003f40 <_free_r+0x24>
 8003fac:	bd38      	pop	{r3, r4, r5, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000094 	.word	0x20000094

08003fb4 <_malloc_r>:
 8003fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb6:	1ccd      	adds	r5, r1, #3
 8003fb8:	f025 0503 	bic.w	r5, r5, #3
 8003fbc:	3508      	adds	r5, #8
 8003fbe:	2d0c      	cmp	r5, #12
 8003fc0:	bf38      	it	cc
 8003fc2:	250c      	movcc	r5, #12
 8003fc4:	2d00      	cmp	r5, #0
 8003fc6:	4606      	mov	r6, r0
 8003fc8:	db01      	blt.n	8003fce <_malloc_r+0x1a>
 8003fca:	42a9      	cmp	r1, r5
 8003fcc:	d903      	bls.n	8003fd6 <_malloc_r+0x22>
 8003fce:	230c      	movs	r3, #12
 8003fd0:	6033      	str	r3, [r6, #0]
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fd6:	f000 f87d 	bl	80040d4 <__malloc_lock>
 8003fda:	4921      	ldr	r1, [pc, #132]	; (8004060 <_malloc_r+0xac>)
 8003fdc:	680a      	ldr	r2, [r1, #0]
 8003fde:	4614      	mov	r4, r2
 8003fe0:	b99c      	cbnz	r4, 800400a <_malloc_r+0x56>
 8003fe2:	4f20      	ldr	r7, [pc, #128]	; (8004064 <_malloc_r+0xb0>)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	b923      	cbnz	r3, 8003ff2 <_malloc_r+0x3e>
 8003fe8:	4621      	mov	r1, r4
 8003fea:	4630      	mov	r0, r6
 8003fec:	f000 f862 	bl	80040b4 <_sbrk_r>
 8003ff0:	6038      	str	r0, [r7, #0]
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	f000 f85d 	bl	80040b4 <_sbrk_r>
 8003ffa:	1c43      	adds	r3, r0, #1
 8003ffc:	d123      	bne.n	8004046 <_malloc_r+0x92>
 8003ffe:	230c      	movs	r3, #12
 8004000:	4630      	mov	r0, r6
 8004002:	6033      	str	r3, [r6, #0]
 8004004:	f000 f86c 	bl	80040e0 <__malloc_unlock>
 8004008:	e7e3      	b.n	8003fd2 <_malloc_r+0x1e>
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	1b5b      	subs	r3, r3, r5
 800400e:	d417      	bmi.n	8004040 <_malloc_r+0x8c>
 8004010:	2b0b      	cmp	r3, #11
 8004012:	d903      	bls.n	800401c <_malloc_r+0x68>
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	441c      	add	r4, r3
 8004018:	6025      	str	r5, [r4, #0]
 800401a:	e004      	b.n	8004026 <_malloc_r+0x72>
 800401c:	6863      	ldr	r3, [r4, #4]
 800401e:	42a2      	cmp	r2, r4
 8004020:	bf0c      	ite	eq
 8004022:	600b      	streq	r3, [r1, #0]
 8004024:	6053      	strne	r3, [r2, #4]
 8004026:	4630      	mov	r0, r6
 8004028:	f000 f85a 	bl	80040e0 <__malloc_unlock>
 800402c:	f104 000b 	add.w	r0, r4, #11
 8004030:	1d23      	adds	r3, r4, #4
 8004032:	f020 0007 	bic.w	r0, r0, #7
 8004036:	1ac2      	subs	r2, r0, r3
 8004038:	d0cc      	beq.n	8003fd4 <_malloc_r+0x20>
 800403a:	1a1b      	subs	r3, r3, r0
 800403c:	50a3      	str	r3, [r4, r2]
 800403e:	e7c9      	b.n	8003fd4 <_malloc_r+0x20>
 8004040:	4622      	mov	r2, r4
 8004042:	6864      	ldr	r4, [r4, #4]
 8004044:	e7cc      	b.n	8003fe0 <_malloc_r+0x2c>
 8004046:	1cc4      	adds	r4, r0, #3
 8004048:	f024 0403 	bic.w	r4, r4, #3
 800404c:	42a0      	cmp	r0, r4
 800404e:	d0e3      	beq.n	8004018 <_malloc_r+0x64>
 8004050:	1a21      	subs	r1, r4, r0
 8004052:	4630      	mov	r0, r6
 8004054:	f000 f82e 	bl	80040b4 <_sbrk_r>
 8004058:	3001      	adds	r0, #1
 800405a:	d1dd      	bne.n	8004018 <_malloc_r+0x64>
 800405c:	e7cf      	b.n	8003ffe <_malloc_r+0x4a>
 800405e:	bf00      	nop
 8004060:	20000094 	.word	0x20000094
 8004064:	20000098 	.word	0x20000098

08004068 <_realloc_r>:
 8004068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406a:	4607      	mov	r7, r0
 800406c:	4614      	mov	r4, r2
 800406e:	460e      	mov	r6, r1
 8004070:	b921      	cbnz	r1, 800407c <_realloc_r+0x14>
 8004072:	4611      	mov	r1, r2
 8004074:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004078:	f7ff bf9c 	b.w	8003fb4 <_malloc_r>
 800407c:	b922      	cbnz	r2, 8004088 <_realloc_r+0x20>
 800407e:	f7ff ff4d 	bl	8003f1c <_free_r>
 8004082:	4625      	mov	r5, r4
 8004084:	4628      	mov	r0, r5
 8004086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004088:	f000 f830 	bl	80040ec <_malloc_usable_size_r>
 800408c:	42a0      	cmp	r0, r4
 800408e:	d20f      	bcs.n	80040b0 <_realloc_r+0x48>
 8004090:	4621      	mov	r1, r4
 8004092:	4638      	mov	r0, r7
 8004094:	f7ff ff8e 	bl	8003fb4 <_malloc_r>
 8004098:	4605      	mov	r5, r0
 800409a:	2800      	cmp	r0, #0
 800409c:	d0f2      	beq.n	8004084 <_realloc_r+0x1c>
 800409e:	4631      	mov	r1, r6
 80040a0:	4622      	mov	r2, r4
 80040a2:	f7ff ff13 	bl	8003ecc <memcpy>
 80040a6:	4631      	mov	r1, r6
 80040a8:	4638      	mov	r0, r7
 80040aa:	f7ff ff37 	bl	8003f1c <_free_r>
 80040ae:	e7e9      	b.n	8004084 <_realloc_r+0x1c>
 80040b0:	4635      	mov	r5, r6
 80040b2:	e7e7      	b.n	8004084 <_realloc_r+0x1c>

080040b4 <_sbrk_r>:
 80040b4:	b538      	push	{r3, r4, r5, lr}
 80040b6:	2300      	movs	r3, #0
 80040b8:	4d05      	ldr	r5, [pc, #20]	; (80040d0 <_sbrk_r+0x1c>)
 80040ba:	4604      	mov	r4, r0
 80040bc:	4608      	mov	r0, r1
 80040be:	602b      	str	r3, [r5, #0]
 80040c0:	f7fc fe5a 	bl	8000d78 <_sbrk>
 80040c4:	1c43      	adds	r3, r0, #1
 80040c6:	d102      	bne.n	80040ce <_sbrk_r+0x1a>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	b103      	cbz	r3, 80040ce <_sbrk_r+0x1a>
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	bd38      	pop	{r3, r4, r5, pc}
 80040d0:	20000198 	.word	0x20000198

080040d4 <__malloc_lock>:
 80040d4:	4801      	ldr	r0, [pc, #4]	; (80040dc <__malloc_lock+0x8>)
 80040d6:	f000 b811 	b.w	80040fc <__retarget_lock_acquire_recursive>
 80040da:	bf00      	nop
 80040dc:	200001a0 	.word	0x200001a0

080040e0 <__malloc_unlock>:
 80040e0:	4801      	ldr	r0, [pc, #4]	; (80040e8 <__malloc_unlock+0x8>)
 80040e2:	f000 b80c 	b.w	80040fe <__retarget_lock_release_recursive>
 80040e6:	bf00      	nop
 80040e8:	200001a0 	.word	0x200001a0

080040ec <_malloc_usable_size_r>:
 80040ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040f0:	1f18      	subs	r0, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bfbc      	itt	lt
 80040f6:	580b      	ldrlt	r3, [r1, r0]
 80040f8:	18c0      	addlt	r0, r0, r3
 80040fa:	4770      	bx	lr

080040fc <__retarget_lock_acquire_recursive>:
 80040fc:	4770      	bx	lr

080040fe <__retarget_lock_release_recursive>:
 80040fe:	4770      	bx	lr

08004100 <_init>:
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	bf00      	nop
 8004104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004106:	bc08      	pop	{r3}
 8004108:	469e      	mov	lr, r3
 800410a:	4770      	bx	lr

0800410c <_fini>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	bf00      	nop
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr
